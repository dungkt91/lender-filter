{"version":3,"sources":["logo.svg","Api.js","LenderFilter.js","LenderFilters.js","CarDescription.js","CarImagesGallery.js","CarShowElementButtons.js","CarShowElement.js","Car.js","CarShow.js","Sort.js","ListFilter.js","RangeFilter.js","Filter.js","LenderInputs.js","Lender.js","LeftPanel.js","App.js","serviceWorker.js","index.js","CarCalculation.js"],"names":["module","exports","domain","fetchLenders","fetch","fetchLenderPrograms","fetchLenderTerms","LenderFilter","selectLenderEvent","bind","selectTierEvent","state","filterBeginningState","selectedTierIndex","currencyFields","value","error","percentageFields","this","beginningState","selectedLenderIndex","selectedLenderImage","allLenderNames","tierMenuItems","textfieldsBeginningState","isTierSelectEnabled","isTextFieldsEnabled","lenderMenuItems","allTierNames","push","MenuItem","key","nextProps","i","lenders","length","lender","name","setState","event","fieldLabel","newValue","target","isError","isNaN","console","log","newCurrencyFields","newPercentageFields","index","indexMinusOne","newState","selectedLenderId","props","id","allTierOfSelectedLender","lenderPrograms","filter","lenderProgram","lender_id","map","newTierMenuItems","itemValue","isPleaseSelectItemSelected","Grid","container","spacing","item","xs","Select","onChange","selectedLenderValue","style","width","disabled","Object","keys","currencyFieldLabel","sm","md","padding","TextField","label","variant","textboxOnChange","helperText","InputProps","startAdornment","InputAdornment","position","size","percentageFieldLabel","React","CarDescription","year","getRowValue","make","model","trim","rowName","row","getRowWithName","matches","details","Paper","backgroundColor","Table","TableRow","TableCell","colSpan","textAlign","fontSize","getCarTitle","CarImagesGallery","items","images","showPlayButton","showFullscreenButton","CarShowElementButtons","lg","Button","color","Car","carYear","carMake","carModel","carTrim","Card","CardContent","original","showThumbnails","className","align","Component","css","CarShow","sortOptionIndex","selectSortOption","filterTitle","number","carDetails","sort","carDetail1","carDetail2","parseInt","total_cost","reverseNumberSign","mileage","hasFilterValues","filterValues","filterValue","filterType","filterFieldName","filterTitleToFieldName","selectedOptions","selectedOptionsSet","Set","carDetail","has","minVal","maxVal","Number","MAX_SAFE_INTEGER","sortCarDetails","carDetailsAfterFilterAndSort","class","ListFilter","optionCheckedDict","options","selectAll","optionOnchange","title","option","selectAllCheckbox","selectedCheckboxState","checked","checkbox","sortedOptions","manyOptions","Checkbox","RangeFilter","onChangeDebounced","debounce","selectRange","textFieldName","min","max","undefined","minTitle","maxTitle","toText","getMinTitle","textFieldOnChange","getToText","getMaxTitle","rangeList","range","href","onClick","Filter","filters","filterOnChange","createFilter","expandOrCollapse","stateKeyName","dependentFilter","dependentList","refsDict","getValues","newOptions","forEach","add","Array","from","values","stateName","filterIndex","filterComponent","ref","curFilter","Fragment","Collapse","in","LenderInputs","replace","toLowerCase","split","word","charAt","toUpperCase","slice","join","IconButton","handleDeleteBtnClick","inputs","input","keyToTitle","Lender","lenderInputs","selectLender","selectTier","addLender","reset","deleteLenderInput","selectedTier","tierSelectDisabled","selectedLender","lenderSelectDisabled","lenderName","lenderToPrograms","selectLenderName","tierName","selectIndex","hasAnyErrors","lenderInput","hasAnyErrorsInLenderInput","newLenderInputs","lenderInputIndex","splice","marginLeft","LeftPanel","handleChange","filterRef","createRef","selectedTabIndex","newSelectedTabIndex","makes","makeToModelsDict","models","yearSet","yearRangeList","createRangeListContinuousValue","lenderIdToLenderName","partsCount","Math","current","getFilterValues","Tabs","Tab","clipLoaderCss","AppClass","leftPanelRef","carJson","lendersJson","lenderTermsJson","lenderProgramsJson","isLoading","Promise","all","then","responses","response","json","jsons","smooth","xl","AppBar","isBigScreen","Toolbar","aria-label","aria-controls","aria-haspopup","menuBtnOnClick","anchorEl","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","open","Boolean","onClose","closeMenu","display","justifyContent","App","theme","useTheme","mdUp","useMediaQuery","breakpoints","up","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message","StyledTableCell","withStyles","head","palette","primary","main","common","white","body","StyledTableRow","root","background","default","CarCalculation","CarCalculationClass","mileageToKms","addCurrencySymbol","abs","pv","rate","periods","payment","future","type","eval","pow","getLenderId","calculateProfitFirstInterest","filterInputs","lenderData","interests","createCalculationDetail","profit","selectedInterest","lenderTerms","advance","interest","term","foundLenderTerm","foundLenderProgram","lenderId","parseFloat","rateMin","rate_min","rateMax","rate_max","carKms","lenderTerm","min_kms","max_kms","Payment","maxFront","termType","x_clean","clean","average","rough","round","maxProfit","financed","holdBack","hold_back","funded","tradeAllowance","tradePayOff","downPayment","tradeAcv","paidOut","userInputTax","Tax","netPaid","calculationDetailsColumnHeaders","calculationDetailsValues","selectInterestEvent","selectedInterests","filtersInputs","newCalculationDetailsValues","entries","isValidFilterInputs","calculationDetails","firstInterest","lenderIndex","newInterest","header","columnValues","columnValue","interestMenuItems","tables","lenderCalculationDetailsValues","createCell","userInputsFilterData","createCalculationDetails","renderWithOneTable","renderWithThreeTables"],"mappings":"qKAAAA,EAAOC,QAAU,IAA0B,kC,4UCAvCC,EAAS,mDAMb,SAASC,IACL,OAAOC,MAAM,GAAD,OAAIF,EAAJ,cAGhB,SAASG,IACL,OAAOD,MAAM,GAAD,OAAIF,EAAJ,uBAGhB,SAASI,IACL,OAAOF,MAAM,GAAD,OAAIF,EAAJ,oBCNhB,IAEqBK,E,kDACjB,aAAe,IAAD,8BACV,gBACKC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBACzB,EAAKC,gBAAkB,EAAKA,gBAAgBD,KAArB,gBACvB,EAAKE,MAAQ,EAAKC,uBAJR,E,uEAQV,MAAO,CACHC,kBAAkB,EAClBC,eAAe,CACX,QAAU,CACNC,MAAO,GACPC,OAAO,GAEX,eAAe,CACXD,MAAO,GACPC,OAAO,GAEX,kBAAkB,CACdD,MAAO,GACPC,OAAO,GAEX,eAAe,CACXD,MAAO,GACPC,OAAO,GAEX,cAAc,CACVD,MAAO,GACPC,OAAO,IAGfC,iBAAiB,CACb,IAAM,CACFF,MAAO,GACPC,OAAO,O,iCAOnB,IAAIF,EAAiBI,KAAKP,MAAMG,eAC5BG,EAAmBC,KAAKP,MAAMM,iBAElC,OAAOH,EAAc,QAAYE,OAASF,EAAe,gBAAgBE,OAASF,EAAe,mBAAmBE,OAASF,EAAe,gBAAgBE,OAASF,EAAe,eAAeE,OAASC,EAAgB,IAAQD,Q,6CAIpO,IAAIG,EAAc,aACdC,oBAAqB,EACrBC,oBAAqB,KACrBC,eAAe,GACfC,cAAc,IACXL,KAAKM,2BALM,CAMdC,qBAAoB,EACpBC,qBAAoB,EACpBC,gBAAgB,GAChBd,kBAAkB,EAClBe,aAAa,KAKjB,OAFAT,EAAeI,cAAcM,KAAK,gBAACC,EAAA,EAAD,CAAUC,IAAK,0BAA0BhB,MAjEvD,GAiEc,uBAE3BI,I,gDAGea,GAItB,IAHA,IAAIL,EAAkB,GAClBL,EAAiB,GAEbW,EAAI,EAAGA,EAAID,EAAUE,QAAQC,OAAQF,IAAI,CAC7C,IAAIG,EAASJ,EAAUE,QAAQD,GAE/BN,EAAgBE,KAAK,gBAACC,EAAA,EAAD,CAAUC,IAAK,eAAiBE,EAAGlB,MAAOkB,EAAE,GAAIG,EAAOC,OAC5Ef,EAAeO,KAAKO,EAAOC,MAG/BnB,KAAKoB,SAAS,CAACX,gBAAgBA,EAAiBL,eAAeA,M,sCAGnDiB,EAAOC,GACnB,IAAIC,EAAWF,EAAMG,OAAO3B,MACxB4B,EAAUC,MAAMH,GAGpB,GAFAI,QAAQC,IAAIH,GAERH,KAActB,KAAKP,MAAMG,eAAe,CACxC,IAAIiC,EAAiB,eAAO7B,KAAKP,MAAMG,gBACvCiC,EAAkBP,GAAe,CAC7BzB,MAAM0B,EACNzB,MAAM2B,GAGVzB,KAAKoB,SAAS,CAACxB,eAAeiC,SAC5B,GAAIP,KAActB,KAAKP,MAAMM,iBAAiB,CAChD,IAAI+B,EAAmB,eAAO9B,KAAKP,MAAMM,kBACzC+B,EAAoBR,GAAc,CAC9BzB,MAAM0B,EACNzB,MAAM2B,GAEVzB,KAAKoB,SAAS,CAACrB,iBAAiB+B,O,wCAItBT,GACd,IAAIU,EAAQV,EAAMG,OAAO3B,MACrBmC,EAAgBD,EAAQ,EAExBE,EAAW,GAef,GAdAA,EAAS/B,oBAAsB6B,IAhHX,GAkHaA,GAYD,CAC5B,IAAIG,EAAmBlC,KAAKmC,MAAMnB,QAAQgB,GAAeI,GACrDC,EAA0BrC,KAAKmC,MAAMG,eAAeC,QAAO,SAAAC,GAAa,OAAKA,EAAcC,WAAaP,KAAkBQ,KAAI,SAAAF,GAAa,OAAIA,EAAcrB,QAC7JwB,EAAmB,GACvBA,EAAiBhC,KAAK,gBAACC,EAAA,EAAD,CAAUf,MAlIhB,GAkIM,uBAEtB,IAAK,IAAIkB,EAAI,EAAGA,EAAIsB,EAAwBpB,OAAQF,IAAK,CACrD,IAAI6B,EAAY7B,EAAI,EAEpB4B,EAAiBhC,KAAK,gBAACC,EAAA,EAAD,CAAUf,MAAO+C,GAAYP,EAAwBtB,KAG/EkB,EAAS5B,cAAgBsC,EACzBV,EAAS1B,qBAAsB,EAC/B0B,EAASvB,aAAe2B,EAG5BJ,EAAStC,kBA/IW,EAiJpBK,KAAKoB,SAASa,K,sCAGFZ,GACZ,IAAIY,EAAQ,eAAOjC,KAAKM,4BAExB2B,EAAStC,kBAAoB0B,EAAMG,OAAO3B,MAE1C,IAAIgD,EAzJgB,GAyJaxB,EAAMG,OAAO3B,MAG1CoC,EAASzB,qBADVqC,EAMH7C,KAAKoB,SAASa,K,8BAIdjC,KAAKoB,SAASpB,KAAKN,0B,+BAGd,IAAD,OACJ,OACI,gBAACoD,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACrB,gBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,IACX,gBAACC,EAAA,EAAD,CAAQC,SAAUpD,KAAKV,kBAAmBO,MAAOG,KAAKP,MAAM4D,oBAAqBC,MAAO,CAACC,MAAM,SAC1FvD,KAAKP,MAAMgB,kBAMpB,gBAACqC,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,IACX,gBAACC,EAAA,EAAD,CAAQG,MAAO,CAACC,MAAM,QAASC,UAAWxD,KAAKP,MAAMc,oBAAqBV,MAAOG,KAAKP,MAAME,kBAAmByD,SAAUpD,KAAKR,iBACzHQ,KAAKP,MAAMY,gBAGnBoD,OAAOC,KAAK1D,KAAKP,MAAMG,gBAAgB8C,KAAI,SAAAiB,GAAkB,OAC1D,gBAACb,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGU,GAAI,EAAGC,GAAI,EAAGP,MAAO,CAACQ,QAAQ,KAAK,gBAACC,EAAA,EAAD,CAAWP,UAAW,EAAK/D,MAAMe,oBACjDwD,MAAOL,EACPM,QAAQ,WACRb,SAAU,SAAC/B,GAAD,OAAW,EAAK6C,gBAAgB7C,EAAOsC,IAC3C7D,MAAS,EAAKL,MAAMG,eAAe+D,GAAoB7D,MACvDqE,WAAY,EAAK1E,MAAMG,eAAe+D,GAAoB7D,MAAM,gBAAgB,GAChFD,MAAO,EAAKJ,MAAMG,eAAe+D,GAAoB9D,MAC3DuE,WAAY,CACRC,eAAgB,gBAACC,EAAA,EAAD,CAAgBC,SAAS,SAAzB,MAGpBC,KAAM,cAK9Cf,OAAOC,KAAK1D,KAAKP,MAAMM,kBAAkB2C,KAAI,SAAA+B,GAAoB,OAC1D,gBAAC3B,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGU,GAAI,EAAGC,GAAI,EAAGP,MAAO,CAACQ,QAAQ,KAAK,gBAACC,EAAA,EAAD,CAAWP,UAAW,EAAK/D,MAAMe,oBACjDwD,MAAOS,EACPR,QAAQ,WACRb,SAAU,SAAC/B,GAAD,OAAW,EAAK6C,gBAAgB7C,EAAOoD,IACjD3E,MAAS,EAAKL,MAAMM,iBAAiB0E,GAAsB3E,MACrDqE,WAAY,EAAK1E,MAAMM,iBAAiB0E,GAAsB3E,MAAM,gBAAgB,GAC1FD,MAAO,EAAKJ,MAAMM,iBAAiB0E,GAAsB5E,MACzDuE,WAAY,CACRC,eAAgB,gBAACC,EAAA,EAAD,CAAgBC,SAAS,SAAzB,MAEpBC,KAAM,mB,GAlNzBE,a,6CCHCA,Y,4DCDtBC,E,4KAEb,IAAIC,EAAO5E,KAAK6E,YAAY,QACxBC,EAAO9E,KAAK6E,YAAY,QACxBE,EAAQ/E,KAAK6E,YAAY,SACzBG,EAAOhF,KAAK6E,YAAY,QAE5B,MAAM,GAAN,OAAUD,EAAV,YAAkBE,EAAlB,YAA0BC,EAA1B,YAAmCC,K,kCAG3BC,GACR,IAAIC,EAAMlF,KAAKmF,eAAeF,GAE9B,OAAW,MAAPC,EACOA,EAAIrF,MAGR,K,qCAGIoF,GACX,IAAIG,EAAUpF,KAAKmC,MAAMkD,QAAQ9C,QAAO,SAAA2C,GAAG,OAAKA,EAAI/D,MAAQ8D,KAE5D,OAAIG,EAAQnE,OAAS,EACVmE,EAAQ,GAGZ,O,+BAGP,OACI,gBAACE,EAAA,EAAD,CAAOhC,MAAO,CAACQ,QAAS,OAAQyB,gBAAiB,uBAC7C,gBAACC,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,CAAWC,QAAS,EAAGrC,MAAO,CAACsC,UAAW,WAAW,qBACjDtC,MAAO,CAACuC,SAAU,WAAY7F,KAAK8F,iBAE1C9F,KAAKmC,MAAMkD,QAAQ3C,KAAI,SAAAwC,GAAG,OACvB,gBAACO,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,CAAWpC,MAAO,CAACQ,QAAS,QACxB,yBAAIoB,EAAI/D,OAEZ,gBAACuE,EAAA,EAAD,CAAWpC,MAAO,CAACQ,QAAS,QACvBoB,EAAIrF,iB,GA3CO6E,a,yBCFvBqB,G,qLAEb,OACI,gBAAC,IAAD,CAAcC,MAAOhG,KAAKmC,MAAM8D,OAAQC,gBAAgB,EAAOC,sBAAsB,Q,GAHnDzB,cCDzB0B,E,uKAEb,OAAO,gBAAC,WAAD,KACH,gBAACtD,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACrB,gBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGW,GAAI,EAAGwC,GAAI,GACzB,gBAACC,EAAA,EAAD,CAAQrC,QAAQ,YAAYsC,MAAO,UAAWjD,MAAO,CAACC,MAAM,SAA5D,SAEJ,gBAACT,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGW,GAAI,EAAGwC,GAAI,GACzB,gBAACC,EAAA,EAAD,CAAQrC,QAAQ,YAAYsC,MAAO,UAAWjD,MAAO,CAACC,MAAM,SAA5D,aAEJ,gBAACT,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGW,GAAI,EAAGwC,GAAI,GACzB,gBAACC,EAAA,EAAD,CAAQrC,QAAQ,YAAYsC,MAAO,UAAWjD,MAAO,CAACC,MAAM,SAA5D,cAEJ,gBAACT,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGW,GAAI,EAAGwC,GAAI,GACzB,gBAACC,EAAA,EAAD,CAAQrC,QAAQ,YAAYsC,MAAO,UAAWjD,MAAO,CAACC,MAAM,SAA5D,e,GAd+BmB,a,GCKPA,Y,eC+B7B8B,G,0LAhCP,IAAIC,EAAUzG,KAAKmC,MAAMkD,QAAX,KACVqB,EAAU1G,KAAKmC,MAAMkD,QAAX,KACVsB,EAAW3G,KAAKmC,MAAMkD,QAAX,MACXuB,EAAU5G,KAAKmC,MAAMkD,QAAX,KAEd,MAAM,GAAN,OAAUoB,EAAV,YAAqBC,EAArB,YAAgCC,EAAhC,YAA4CC,K,+BAI5C,OACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAAChE,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,IACX,kBAAC,IAAD,CAAc8C,MAAO,CAAC,CAACe,SAAS,iFAAkFb,gBAAgB,EAAOC,sBAAsB,EAAOa,gBAAgB,KAE1L,kBAAClE,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,IACX,0BAAM+D,UAAW,aAAcjH,KAAK8F,gBAExC,kBAAChD,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACX,0BAAM+D,UAAW,kBAAjB,IAAqCjH,KAAKmC,MAAMkD,QAAX,aAEzC,kBAACvC,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGgE,MAAO,SACrB,0BAAMD,UAAW,eAAgBjH,KAAKmC,MAAMkD,QAAX,iB,GAzB3CX,IAAMyC,Y,qLCSFC,cAAH,KAAnB,IAgJeC,E,kDAxIX,WAAYlF,GAAQ,IAAD,8BACf,cAAMA,IAED1C,MAAQ,CACT6H,iBAAiB,GAGrB,EAAKC,iBAAmB,EAAKA,iBAAiBhI,KAAtB,gBAPT,E,mEAUIiI,GASnB,MARW,CACP,KAAO,OACP,MAAQ,QACR,KAAO,OACP,aAAa,aACb,QAAU,WAGFA,K,wCAGEC,GACd,OAAQA,I,qCAGGC,EAAYJ,GAAiB,IAAD,OACvC,OAAOA,GACH,KAAK,EACDI,EAAWC,MAAK,SAACC,EAAYC,GAAb,OAA4BC,SAASF,EAAWG,YAAcD,SAASD,EAAWE,eAClG,MACJ,KAAK,EACDL,EAAWC,MAAK,SAACC,EAAYC,GAAb,OAA4B,EAAKG,kBAAkBF,SAASF,EAAWG,YAAcD,SAASD,EAAWE,gBACzH,MACJ,KAAK,EACDL,EAAWC,MAAK,SAACC,EAAYC,GAAb,OAA4BC,SAASF,EAAWK,SAAWH,SAASD,EAAWI,YAC/F,MACJ,KAAK,EACDP,EAAWC,MAAK,SAACC,EAAYC,GAAb,OAA4B,EAAKG,kBAAkBF,SAASF,EAAWK,SAAWH,SAASD,EAAWI,aACtH,MACJ,KAAK,EACDP,EAAWC,MAAK,SAACC,EAAYC,GAAb,OAA4B,EAAKG,kBAAkBF,SAASF,EAAWhD,MAAQkD,SAASD,EAAWjD,UACnH,MACJ,KAAK,EACD8C,EAAWC,MAAK,SAACC,EAAYC,GAAb,OAA4BC,SAASF,EAAWhD,MAAQkD,SAASD,EAAWjD,SAIpG,OAAO8C,I,mCAGE,IAAD,OAEJQ,EADqBzE,OAAOC,KAAK1D,KAAKmC,MAAMgG,cAAclH,OACnB,EACvCyG,EAAU,YAAO1H,KAAKmC,MAAMuF,YAEhC,GAAIQ,EAAiB,CAAC,IAAD,WAGTV,GACJ,IAAIY,EAAc,EAAKjG,MAAMgG,aAAaX,GACtCa,EAAaD,EAAW,KACxBE,EAAkB,EAAKC,uBAAuBf,GAElD,GAAkB,QAAda,EAAqB,CACrB,IAAIG,EAAkBJ,EAAW,gBAC7BK,EAAqB,IAAIC,IAAIF,GAEjCd,EAAaA,EAAWnF,QAAO,SAAAoG,GAAS,OAAIF,EAAmBG,IAAID,EAAUL,YAC3E,GAAiB,SAAdD,EAAsB,CAC3B,IAAIQ,EAAST,EAAW,IACpBU,EAASV,EAAW,IAET,KAAXS,GAA2B,IAAVC,IACH,IAAVD,IACAA,EAAS,GAGC,IAAVC,IACAA,EAASC,OAAOC,kBAGpBtB,EAAaA,EAAWnF,QAAO,SAAAoG,GAAS,OAAIA,EAAUL,IAAoBO,GAAUF,EAAUL,IAAoBQ,QAvB9H,IAAI,IAAItB,KAAexH,KAAKmC,MAAMgG,aAAc,EAAxCX,GAiCR,OAJmC,GAA/BxH,KAAKP,MAAM6H,kBACXI,EAAa1H,KAAKiJ,eAAevB,EAAY1H,KAAKP,MAAM6H,kBAGrDI,EAOP,OAJmC,GAA/B1H,KAAKP,MAAM6H,kBACXI,EAAa1H,KAAKiJ,eAAevB,EAAY1H,KAAKP,MAAM6H,kBAGrDI,I,uCAIErG,GACb,IAAIiG,EAAkBjG,EAAMG,OAAO3B,MAEnCG,KAAKoB,SAAS,CAACkG,gBAAgBA,M,+BAI/B,IAAI4B,EAA+BlJ,KAAK0H,aAExC,OAAQ,gBAAC5E,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GAC7B,gBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACX,wBAAMiG,MAAO,WAAYD,EAA6BjI,OAAS,aAEnE,gBAAC6B,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGgE,MAAO,SACrB,wBAAMD,UAAW,UAAjB,YACA,gBAAC9D,EAAA,EAAD,CAAQtD,MAAOG,KAAKP,MAAM6H,gBAAiBlE,SAAUpD,KAAKuH,kBACtD,gBAAC3G,EAAA,EAAD,CAAUf,MAAO,GAAjB,gBACA,gBAACe,EAAA,EAAD,CAAUf,MAAO,GAAjB,iBACA,gBAACe,EAAA,EAAD,CAAUf,MAAO,GAAjB,kBACA,gBAACe,EAAA,EAAD,CAAUf,MAAO,GAAjB,mBACA,gBAACe,EAAA,EAAD,CAAUf,MAAO,GAAjB,eACA,gBAACe,EAAA,EAAD,CAAUf,MAAO,GAAjB,iBAGPqJ,EAA6BxG,KAAI,SAAAiG,GAAS,OACxC,gBAAC7F,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIW,GAAI,EAAGwC,GAAI,GAC1B,gBAAC,EAAD,CAAKhB,QAASsD,a,GAlIXjE,a,yHClBHA,Y,iBC+GJ0E,G,kDA9GX,WAAYjH,GAAQ,IAAD,sBACf,cAAMA,GACN,IAFe,EAEXkH,EAAoB,GAFT,eAIG,EAAKlH,MAAMmH,SAJd,IAIf,IAAI,EAAJ,qBAAqC,CACjCD,EADiC,UACL,GALjB,qCAQf,EAAK5J,MAAL,aACI,cAAc,GACX4J,GAGP,EAAKE,UAAY,EAAKA,UAAUhK,KAAf,gBACjB,EAAKiK,eAAiB,EAAKA,eAAejK,KAApB,gBAdP,E,uDAkBf,OAAOS,KAAKmC,MAAMsH,Q,kCAIlB,IADO,EACHjB,EAAkB,GADf,eAGYxI,KAAKmC,MAAMmH,SAHvB,IAGP,2BAAsC,CAAC,IAA9BI,EAA6B,QAC9B1J,KAAKP,MAAMiK,IACXlB,EAAgB7H,KAAK+I,IALtB,8BASP,MAAO,CAAC,gBAAkBlB,K,gDAGJ1H,GAGtB,GAFqBA,EAAUwI,QAAQrI,QAAUjB,KAAKmC,MAAMmH,QAAQrI,OAEjD,CACf,IADe,EACXgB,EAAW,CAEfA,cAAyB,GAHV,eAKInB,EAAUwI,SALd,IAKf,2BAAsC,CAClCrH,EADkC,UACf,GANR,8BASfjC,KAAKoB,SAAL,eAAkBa,O,gCAIhBZ,GACN,IADY,EACRsI,EAAoBtI,EAAMG,OAC1BoI,EAAwBD,EAAkBE,QAC1C5H,EAAQ,eAAOjC,KAAKP,OAHZ,eAKMO,KAAKmC,MAAMmH,SALjB,IAKZ,IAAI,EAAJ,qBAAqC,CAAC,IAA9BI,EAA6B,QAC7BC,EAAkBE,QAClB5H,EAASyH,IAAU,EAEnBzH,EAASyH,IAAU,GATf,8BAaZzH,EAAS,cAAgB2H,EACzB5J,KAAKoB,SAASa,EAAUjC,KAAKmC,MAAMiB,Y,qCAGxB/B,EAAOF,GAElB,IAAI2I,EAAWzI,EAAMG,OACjBS,EAAQ,eAAOjC,KAAKP,OACxBwC,EAASd,GAAQ2I,EAASD,QAE1B,IANuB,EAMnBN,GAAY,EANO,eAQLvJ,KAAKmC,MAAMmH,SARN,IAQvB,IAAI,EAAJ,qBAAqC,CAC7BrH,EAD6B,WAE7BsH,GAAY,IAVG,8BAcvBtH,EAAS,cAAgBsH,EAEzBvJ,KAAKoB,SAASa,EAAUjC,KAAKmC,MAAMiB,UACnCzB,QAAQC,KAAKkI,EAASD,QAAQ,SAAS,cAAgB1I,K,+BAGlD,IAAD,OACA4I,EAAa,YAAO/J,KAAKmC,MAAMmH,SACnCS,EAAcpC,OAEd,IAAIqC,EAAcD,EAAc9I,OAAS,GAEzC,OACI,kBAAC6B,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,IACX,kBAAC+G,GAAA,EAAD,CAAUJ,QAAS7J,KAAKP,MAAM,cAAe8G,MAAO,UAAWnD,SAAUpD,KAAKuJ,YADlF,OAIIQ,EAAcrH,KAAI,SAAAO,GAAI,OAClB,kBAACH,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI8G,EAAY,EAAE,IACzB,kBAACC,GAAA,EAAD,CAAUJ,QAAS,EAAKpK,MAAMwD,GAAOsD,MAAO,UAClCnD,SAAU,SAAC/B,GAAD,OAAW,EAAKmI,eAAenI,EAAO4B,MAASA,W,GAtGtEyB,IAAMyC,W,oBC+EhB+C,G,kDA3EX,WAAY/H,GAAQ,IAAD,8BACf,cAAMA,IAoBVgI,kBAAoB,WAChB,EAAKhI,MAAMiB,YAnBX,EAAK3D,MAAQ,CACT,IAAM,GACN,IAAM,IAGV,EAAK0K,kBAAoBC,KAAS,EAAKD,kBAAmB,KAC1D,EAAKE,YAAc,EAAKA,YAAY9K,KAAjB,gBATJ,E,8DAYD8B,EAAOiJ,GACrB,IAAIrI,EAAW,GAEfA,EAASqI,GAAiBjJ,EAAMG,OAAO3B,MAEvCG,KAAKoB,SAASa,GACdjC,KAAKmK,sB,kCAQL,MAAO,CAAC,IAAMnK,KAAKP,MAAM8K,IAAK,IAAMvK,KAAKP,MAAM+K,O,oCAI/C,YAA8BC,GAAvBzK,KAAKmC,MAAMuI,SAAsB,MAAM1K,KAAKmC,MAAMuI,W,oCAIzD,YAA8BD,GAAvBzK,KAAKmC,MAAMwI,SAAsB,MAAM3K,KAAKmC,MAAMwI,W,kCAIzD,YAA4BF,GAArBzK,KAAKmC,MAAMyI,OAAoB,KAAK5K,KAAKmC,MAAMyI,S,kCAG9CvJ,EAAOkJ,EAAKC,GACpBxK,KAAKoB,SAAS,CAAC,IAAMmJ,EAAK,IAAMC,GAAMxK,KAAKmC,MAAMiB,Y,+BAG5C,IAAD,OACJ,OACI,kBAACN,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACX,kBAACa,EAAA,EAAD,CAAWlE,MAAOG,KAAKP,MAAL,IAAmBuE,MAAOhE,KAAK6K,cACtC5G,QAAQ,WAAWO,KAAM,QAASpB,SAAU,SAAC/B,GAAD,OAAW,EAAKyJ,kBAAkBzJ,EAAO,WAEpG,kBAACyB,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGgE,MAAO,UACpBlH,KAAK+K,aAEV,kBAACjI,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACX,kBAACa,EAAA,EAAD,CAAWlE,MAAOG,KAAKP,MAAL,IAAmBuE,MAAOhE,KAAKgL,cACtC/G,QAAQ,WAAWO,KAAM,QAASpB,SAAU,SAAC/B,GAAD,OAAW,EAAKyJ,kBAAkBzJ,EAAO,WAGhGrB,KAAKmC,MAAM8I,UAAW,4BAAKjL,KAAKmC,MAAM8I,UAAUvI,KAAI,SAAAwI,GAChD,OAAoB,GAAhBA,EAAMjK,OACE,4BAAI,uBAAGkK,KAAK,IAAIC,QAAS,SAAC/J,GAAD,OAAW,EAAKgJ,YAAYhJ,EAAO6J,EAAM,GAAIA,EAAM,MAAMA,EAAM,KAC1E,GAAhBA,EAAMjK,OACJ,4BAAI,uBAAGkK,KAAK,IAAKC,QAAS,SAAC/J,GAAD,OAAW,EAAKgJ,YAAYhJ,EAAO6J,EAAM,GAAIA,EAAM,MAAMA,EAAM,GAArF,MAA4FA,EAAM,KAG3G,SACA,U,GArELxG,IAAMyC,W,kDCqHjBkE,I,yDAjHX,WAAYlJ,GAAQ,IAAD,8BACf,cAAMA,IAED1C,MAAQ,CAAC6L,QAAQ,IACtB,EAAKC,eAAiB,EAAKA,eAAehM,KAApB,gBACtB,EAAKiM,aAAe,EAAKA,aAAajM,KAAlB,gBACpB,EAAKkM,iBAAmB,EAAKA,iBAAiBlM,KAAtB,gBANT,E,6DASF8B,EAAOmG,GACpB,IAAIkE,EAAelE,EAAc,UAC7BvF,EAAW,GACfA,EAASyJ,IAAiB1L,KAAKP,MAAMiM,GAErC1L,KAAKoB,SAASa,K,gDAGQnB,GACtBd,KAAKoB,SAAS,CAACkK,QAAQxK,EAAUwK,Y,qCAGtBjK,EAAOmG,GAClB7F,QAAQC,IAAI,kBACZ,IAF8B,EAE1BK,EAAQ,eAAOjC,KAAKP,OAFM,eAIZwC,EAASqJ,SAJG,IAI9B,IAAI,EAAJ,qBAAmC,CAAC,IAA5B/I,EAA2B,QAG/B,GAFwC,QAAlBA,EAAM,MAAsB,qBAAsBA,GAAU,mBAAoBA,EAElF,CAChB,IADgB,EACZoJ,EAAkBpJ,EAAM,iBACxBqJ,EAAgBrJ,EAAM,eAEtBiG,EAAkBxI,KAAK6L,SAASF,GAAiBG,YAA/B,gBAClBC,EAAa,IAAIrD,IALL,eAOUF,GAPV,IAOhB,IAAI,EAAJ,qBAA0C,CACtCoD,EADsC,SACRI,QAAQD,EAAWE,IAAKF,IAR1C,8BAWhBxJ,EAAM,QAAc2J,MAAMC,KAAKJ,KAlBT,8BAsB9B/L,KAAKoB,SAASa,EAAUjC,KAAKmC,MAAMiB,Y,wCAGrB,IAAD,OACTgJ,EAAS,GADA,WAGL3C,GACJ,IAAIpB,EAAa,EAAK5I,MAAM6L,QAAQ/I,QAAO,SAAAA,GAAM,OAAIA,EAAM,QAAYkH,KAAO,GAA7D,KACjB2C,EAAO3C,GAAP,aACI,KAAOpB,GACJ,EAAKwD,SAASpC,GAAOqC,cAJhC,IAAI,IAAIrC,KAASzJ,KAAK6L,SAAU,EAAxBpC,GAQR,OAAO2C,I,uCAGM/K,EAAOmG,GACpB,IAAI6E,EAAY7E,EAAc,UAC1BvF,EAAW,GAEfA,EAASoK,IAAcrM,KAAKP,MAAM4M,GAClCrM,KAAKoB,SAASa,K,mCAGLM,EAAQ+J,GAAa,IAAD,OAEzBjE,GADkBrI,KAAKP,MAAM6L,QAAQrK,OACxBsB,EAAM,MACnBgK,OAAkB9B,EAQtB,MANkB,QAAdpC,EACAkE,EAAkB,kBAAC,GAAD,iBAAgBhK,EAAhB,CAAwBiK,IAAK,SAAAC,GAAS,OAAI,EAAKZ,SAAStJ,EAAM,OAAakK,GAAWrJ,SAAU,SAAC/B,GAAD,OAAW,EAAKkK,eAAelK,EAAOkB,EAAM,WAC1I,SAAd8F,IACNkE,EAAkB,kBAAC,GAAD,iBAAiBhK,EAAjB,CAAyBiK,IAAK,SAAAC,GAAS,OAAI,EAAKZ,SAAStJ,EAAM,OAAakK,GAAWrJ,SAAU,SAAC/B,GAAD,OAAW,EAAKkK,eAAelK,EAAOkB,EAAM,YAI/J,kBAAC,IAAMmK,SAAP,KACI,kBAAC5J,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAI+D,UAAW,UAC1B,kBAACnE,EAAA,EAAD,CAAMC,WAAS,EAACkE,UAAW,aAAcmE,QAAS,SAAC/J,GAAD,OAAW,EAAKoK,iBAAiBpK,EAAOkB,EAAM,SAC5F,kBAACO,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,IACX,0BAAM+D,UAAW,gBAAiB1E,EAAM,QAE5C,kBAACO,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGgE,MAAM,SACnBlH,KAAKP,MAAM8C,EAAM,MAAY,WAAY,kBAAC,KAAD,MAAgB,kBAAC,KAAD,QAGlE,kBAACoK,GAAA,EAAD,CAAUC,GAAI5M,KAAKP,MAAM8C,EAAM,MAAY,YACtCgK,O,+BAYjB,OAJA5K,QAAQC,IAAI,UACZD,QAAQC,IAAI5B,KAAKP,OACjBO,KAAK6L,SAAW,GAGZ,kBAAC/I,EAAA,EAAD,CAAMC,WAAS,EAACkE,UAAW,uBAEnBjH,KAAKP,MAAM6L,QAAQ5I,IAAI1C,KAAKwL,mB,GA3G3B9G,IAAMyC,Y,6BCoCZ0F,G,kDAvCX,WAAY1K,GAAQ,uCACVA,G,uDAGCtB,GAGP,OAFaA,EAAIiM,QAAQ,IAAI,KAGxBC,cACAC,MAAM,KACNtK,KAAI,SAAAuK,GAAI,OAAIA,EAAKC,OAAO,GAAGC,cAAgBF,EAAKG,MAAM,MACtDC,KAAK,O,+BAGL,IAAD,OACJ,OACA,kBAAC/H,EAAA,EAAD,CAAOhC,MAAO,CAACQ,QAAQ,KACnB,kBAAChB,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIgE,MAAO,SACtB,kBAACoG,GAAA,EAAD,CAAY/G,MAAM,YAAY6E,QAASpL,KAAKmC,MAAMoL,sBAC9C,kBAAC,KAAD,QAIJ9J,OAAOC,KAAK1D,KAAKmC,MAAMqL,QAAQ9K,KAAI,SAAA+K,GAAK,OACpC,kBAAC,IAAMf,SAAP,KACI,kBAAC5J,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACd,EAAKwK,WAAWD,IAEjB,kBAAC3K,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACV,EAAKf,MAAMqL,OAAOC,c,GA/BxB/I,IAAMyC,WCkPlBwG,I,yDApMX,WAAYxL,GAAQ,IAAD,8BACf,cAAMA,IAED1C,MAAL,aACIgB,gBAAgB,IACb,EAAKR,iBAFZ,CAGI2N,aAAa,KAGjB,EAAKC,aAAe,EAAKA,aAAatO,KAAlB,gBACpB,EAAKuO,WAAa,EAAKA,WAAWvO,KAAhB,gBAClB,EAAKwO,UAAY,EAAKA,UAAUxO,KAAf,gBACjB,EAAKyO,MAAQ,EAAKA,MAAMzO,KAAX,gBACb,EAAK0O,kBAAoB,EAAKA,kBAAkB1O,KAAvB,gBAbV,E,6DAxCf,MAAO,CACH2O,aAAa,OACb7N,cAAc,GACd8N,oBAAmB,EAEnBC,eAAe,OACfC,sBAAqB,EAErBzO,eAAe,CACX,QAAU,CACNC,MAAO,GACPC,OAAO,GAEX,eAAe,CACXD,MAAO,GACPC,OAAO,GAEX,kBAAkB,CACdD,MAAO,GACPC,OAAO,GAEX,eAAe,CACXD,MAAO,GACPC,OAAO,GAEX,cAAc,CACVD,MAAO,GACPC,OAAO,IAGfC,iBAAiB,CACb,IAAM,CACFF,MAAO,GACPC,OAAO,IAGfU,qBAAoB,O,+DAoBFM,GACtB,IAAIL,EAAkB,GAItB,IAAK,IAAI6N,KAFT7N,EAAgBE,KAAK,kBAACC,EAAA,EAAD,CAAUf,MAAO,QAAjB,yBAEEiB,EAAUyN,iBAC7B9N,EAAgBE,KAAK,kBAACC,EAAA,EAAD,CAAUf,MAAOyO,GAAaA,IAGvDtO,KAAKoB,SAAS,CAACX,gBAAgBA,M,sCAGnBY,EAAOC,GACnB,IAAIC,EAAWF,EAAMG,OAAO3B,MACxB4B,EAAUC,MAAMH,GAGpB,GAFAI,QAAQC,IAAIH,GAERH,KAActB,KAAKP,MAAMG,eAAe,CACxC,IAAIiC,EAAiB,eAAO7B,KAAKP,MAAMG,gBACvCiC,EAAkBP,GAAe,CAC7BzB,MAAM0B,EACNzB,MAAM2B,GAGVzB,KAAKoB,SAAS,CAACxB,eAAeiC,SAC5B,GAAIP,KAActB,KAAKP,MAAMM,iBAAiB,CAChD,IAAI+B,EAAmB,eAAO9B,KAAKP,MAAMM,kBACzC+B,EAAoBR,GAAc,CAC9BzB,MAAM0B,EACNzB,MAAM2B,GAEVzB,KAAKoB,SAAS,CAACrB,iBAAiB+B,O,mCAI3BT,GACT,IAAImN,EAAmBnN,EAAMG,OAAO3B,MAEhCsO,GAAqB,EAED,QAApBK,IACAL,GAAqB,GAGzB,IAAI9N,EAAgB,GACpBA,EAAcM,KAAK,kBAACC,EAAA,EAAD,CAAUf,MAAO,QAAjB,uBAVJ,qBAYKG,KAAKmC,MAAMoM,iBAAiBC,IAZjC,IAYf,IAAI,EAAJ,qBAAmE,CAAC,IAA5DC,EAA2D,QAC/DpO,EAAcM,KAAK,kBAACC,EAAA,EAAD,CAAUf,MAAO4O,GAAWA,KAbpC,8BAgBfzO,KAAKoB,SAAS,CACVgN,eAAeI,EACfN,aAAa,OACbC,mBAAoBA,EACpB9N,cAAcA,M,iCAIXgB,GACP,IAAIqN,EAAcrN,EAAMG,OAAO3B,MAE/BG,KAAKoB,SAAS,CACV8M,aAAeQ,EACflO,qBAAoB,M,kDAIA,IAAD,OACnBmO,GAAe,EAcnB,OAZAlL,OAAOC,KAAK1D,KAAKP,MAAMG,gBAAgBoM,SAAQ,SAACnL,GACxC,EAAKpB,MAAMG,eAAeiB,GAAKf,QAC/B6O,GAAe,MAIvBlL,OAAOC,KAAK1D,KAAKP,MAAMM,kBAAkBiM,SAAQ,SAACnL,GAC1C,EAAKpB,MAAMM,iBAAiBc,GAAKf,QACjC6O,GAAe,MAIhBA,I,gCAGDtN,GACN,IAAIuN,EAAc,GACdD,EAAe3O,KAAK6O,4BAExB,GAAiC,QAA7B7O,KAAKP,MAAM2O,gBAAuD,QAA3BpO,KAAKP,MAAMyO,eAA2BS,EAAc,CAC3FC,EAAW,OAAa5O,KAAKP,MAAM2O,eACnCQ,EAAW,KAAW5O,KAAKP,MAAMyO,aACjCU,EAAW,QAAc5O,KAAKP,MAAMG,eAAX,QAAqCC,MAC9D+O,EAAY,gBAAkB5O,KAAKP,MAAMG,eAAe,gBAAgBC,MACxE+O,EAAY,mBAAqB5O,KAAKP,MAAMG,eAAe,mBAAmBC,MAC9E+O,EAAY,gBAAkB5O,KAAKP,MAAMG,eAAe,gBAAgBC,MACxE+O,EAAY,eAAiB5O,KAAKP,MAAMG,eAAe,eAAeC,MACtE+O,EAAW,IAAU5O,KAAKP,MAAMM,iBAAX,IAAmCF,MAExD,IAAIiP,EAAkB9O,KAAKP,MAAMmO,aACjCkB,EAAgBnO,KAAKiO,GAErB5O,KAAKoB,SAAS,CAACwM,aAAckB,O,4BAI/BzN,GACFrB,KAAKoB,SAAL,eAAkBpB,KAAKC,qB,wCAGToB,EAAO0N,GACrB,IAAID,EAAkB9O,KAAKP,MAAMmO,aAEjCkB,EAAgBE,OAAOD,EAAkB,GAEzC/O,KAAKoB,SAAS,CAACwM,aAAakB,M,+BAGvB,IAAD,OACJ,OACE,kBAAChM,EAAA,EAAD,CAAMC,WAAS,EAACkE,UAAW,gCAAiCjE,QAAS,GACjE,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,IACX,kBAACC,EAAA,EAAD,CAAQC,SAAUpD,KAAK6N,aAAchO,MAAOG,KAAKP,MAAM2O,eAAgB5K,SAAUxD,KAAKP,MAAM4O,qBAAsB/K,MAAO,CAACC,MAAM,SAC3HvD,KAAKP,MAAMgB,kBAGpB,kBAACqC,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,IACX,kBAACC,EAAA,EAAD,CAAQC,SAAUpD,KAAK8N,WAAYjO,MAAOG,KAAKP,MAAMyO,aAAc1K,SAAUxD,KAAKP,MAAM0O,mBAAoB7K,MAAO,CAACC,MAAM,SACrHvD,KAAKP,MAAMY,gBAGnBoD,OAAOC,KAAK1D,KAAKP,MAAMG,gBAAgB8C,KAAI,SAAAiB,GAAkB,OACtD,kBAACb,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGU,GAAI,EAAGC,GAAI,EAAGP,MAAO,CAACQ,QAAQ,KAAK,kBAACC,EAAA,EAAD,CAAWP,UAAW,EAAK/D,MAAMe,oBACtBwD,MAAOL,EACPM,QAAQ,WACRb,SAAU,SAAC/B,GAAD,OAAW,EAAK6C,gBAAgB7C,EAAOsC,IACjD7D,MAAS,EAAKL,MAAMG,eAAe+D,GAAoB7D,MACvDqE,WAAY,EAAK1E,MAAMG,eAAe+D,GAAoB7D,MAAM,gBAAgB,GAChFD,MAAO,EAAKJ,MAAMG,eAAe+D,GAAoB9D,MACrDuE,WAAY,CACRC,eAAgB,kBAACC,EAAA,EAAD,CAAgBC,SAAS,SAAzB,MAGpBC,KAAM,cAK7Ef,OAAOC,KAAK1D,KAAKP,MAAMM,kBAAkB2C,KAAI,SAAA+B,GAAoB,OAC1D,kBAAC3B,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGU,GAAI,EAAGC,GAAI,EAAGP,MAAO,CAACQ,QAAQ,KAAK,kBAACC,EAAA,EAAD,CAAWP,UAAW,EAAK/D,MAAMe,oBACtBwD,MAAOS,EACPR,QAAQ,WACRb,SAAU,SAAC/B,GAAD,OAAW,EAAK6C,gBAAgB7C,EAAOoD,IACjD3E,MAAS,EAAKL,MAAMM,iBAAiB0E,GAAsB3E,MAC3DqE,WAAY,EAAK1E,MAAMM,iBAAiB0E,GAAsB3E,MAAM,gBAAgB,GACpFD,MAAO,EAAKJ,MAAMM,iBAAiB0E,GAAsB5E,MACzDuE,WAAY,CACRC,eAAgB,kBAACC,EAAA,EAAD,CAAgBC,SAAS,SAAzB,MAEpBC,KAAM,cAK9E,kBAAC1B,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAII,MAAO,CAACsC,UAAU,WACjC,kBAACU,EAAA,EAAD,CAAQrC,QAAQ,YAAYsC,MAAO,UAAW6E,QAASpL,KAAK+N,WAA5D,OACA,kBAACzH,EAAA,EAAD,CAAQrC,QAAQ,YAAYsC,MAAO,YAAa6E,QAASpL,KAAKgO,MAAO1K,MAAO,CAAC2L,WAAW,KAAxF,UAGAjP,KAAKP,MAAMmO,aAAalL,KAAI,SAACkM,EAAaG,GAAd,OACxB,kBAACjM,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,IACX,kBAAC,GAAD,CAAcsK,OAAQoB,EAAarB,qBAAsB,SAAClM,GAAD,OAAW,EAAK4M,kBAAkBc,e,GAtOhGrK,IAAMyC,YCwKZ+H,G,kDA1KX,WAAY/M,GAAQ,IAAD,uBACf,cAAMA,IAEDgN,aAAe,EAAKA,aAAa5P,KAAlB,gBACpB,EAAK6P,UAAY1K,IAAM2K,YAEvB,EAAK5P,MAAQ,CACT6P,iBAAiB,EACjBhE,QAAQ,CACJ,CACI,MAAS,OACT,KAAQ,OACR,QAAU,IAEd,CACI,MAAS,QACT,KAAQ,OACR,QAAW,IAEf,CACI,MAAS,OACT,KAAQ,QACR,SAAY,MACZ,SAAY,OAEhB,CACI,MAAS,UACT,KAAQ,QACR,SAAY,MACZ,SAAY,OAEhB,CACI,MAAS,aACT,KAAQ,QACR,SAAY,MACZ,SAAY,QAGpBiD,iBAAiB,GACjB7G,WAAW,IAvCA,S,yDA2CNrG,EAAOkO,GAChBvP,KAAKoB,SAAS,CAACkO,iBAAiBC,M,gDAGVzO,GAGtB,GAFgBd,KAAKP,MAAMiI,WAAWzG,QAAUH,EAAU4G,WAAWzG,OAEtD,CAMX,IALA,IAAIuO,EAAQ,IAAI9G,IACZ+G,EAAmB,GACnBC,EAAS,IAAIhH,IACbiH,EAAU,IAAIjH,IAET3H,EAAI,EAAGA,EAAID,EAAU4G,WAAWzG,OAAQF,IAAK,CAClD,IAAI4H,EAAY7H,EAAU4G,WAAW3G,GACjC+D,EAAO6D,EAAS,KAChB5D,EAAQ4D,EAAS,MACjB/D,EAAO+D,EAAS,KAEpB6G,EAAMvD,IAAInH,GACV4K,EAAOzD,IAAIlH,GACNrD,MAAMkD,IACP+K,EAAQ1D,IAAIrH,GAGVE,KAAQ2K,IACVA,EAAiB3K,GAAQ,IAAI4D,KAGjC+G,EAAiB3K,GAAMmH,IAAIlH,GAG/B,IAzBW,EAyBP6K,EAAgB,GAzBT,eA4BKD,GA5BL,IA4BX,IAAI,EAAJ,qBAAwB,CAAC,IAAjB/K,EAAgB,QACpBgL,EAAcjP,KAAK,CAACiE,KA7Bb,8BAgCX,IAAI0G,EAAU,CACV,CACI,MAAS,OACT,KAAQ,OACR,QAAWY,MAAMC,KAAKqD,IAE1B,CACI,MAAS,QACT,KAAQ,OACR,iBAAoB,OACpB,eAAkBC,EAClB,QAAWvD,MAAMC,KAAKuD,IAE1B,CACI,MAAS,OACT,KAAQ,QACR,SAAY,MACZ,SAAY,MACZ,UAAaE,GAEjB,CACI,MAAS,UACT,KAAQ,QACR,SAAY,MACZ,SAAY,MACZ,UAAa5P,KAAK6P,+BAA+B/O,EAAU4G,WAAWhF,KAAI,SAAAiG,GAAS,OAAIb,SAASa,EAAS,YAAe,KAE5H,CACI,MAAS,aACT,KAAQ,QACR,SAAY,MACZ,SAAY,MACZ,UAAa3I,KAAK6P,+BAA+B/O,EAAU4G,WAAWhF,KAAI,SAAAiG,GAAS,OAAIb,SAASa,EAAS,eAAkB,MAI/H4F,EAAmB,GACnBuB,EAAuB,GAC3BhP,EAAUE,QAAQgL,SAAQ,SAAA9K,GACtB4O,EAAqB5O,EAAM,IAAUA,EAAM,QAG/CJ,EAAUwB,eAAe0J,SAAQ,SAAAxJ,GAC7B,IAAI8L,EAAawB,EAAqBtN,EAAa,WAE7C8L,KAAcC,IAChBA,EAAiBD,GAAc,IAGnCC,EAAiBD,GAAY3N,KAAK6B,EAAa,SAGnDxC,KAAKoB,SAAS,CAACkK,QAASA,EAASiD,iBAAkBA,EAAkB7G,WAAW5G,EAAU4G,gB,qDAInE0E,EAAQ2D,GACnC,IAAIxF,EAAMyF,KAAKzF,IAAL,MAAAyF,KAAI,YAAQ5D,IAClB5B,EAAMwF,KAAKxF,IAAL,MAAAwF,KAAI,YAAQ5D,IAGtB,MAAO,CAAC,CAAC7B,EAAKC,M,wCAId,OAAOxK,KAAKoP,UAAUa,QAAQC,oB,+BAI9B,OACA,kBAAC,IAAMxD,SAAP,KACI,kBAACyD,EAAA,EAAD,CAAMtQ,MAAOG,KAAKP,MAAM6P,iBAAkBlM,SAAUpD,KAAKmP,cACrD,kBAACiB,EAAA,EAAD,CAAKpM,MAAO,SAAUiD,UAAwC,GAA7BjH,KAAKP,MAAM6P,iBAAoB,eAAe,mBAC/E,kBAACc,EAAA,EAAD,CAAKpM,MAAO,SAAUiD,UAAwC,GAA7BjH,KAAKP,MAAM6P,iBAAoB,eAAe,oBAEnF,yBAAKrI,UAAwC,GAA7BjH,KAAKP,MAAM6P,iBAAoB,GAAG,QAC9C,kBAAC,GAAD,CAAQ9C,IAAKxM,KAAKoP,UAAW9D,QAAStL,KAAKP,MAAM6L,QACzClI,SAAUpD,KAAKmC,MAAMoJ,kBAGjC,yBAAKtE,UAAwC,GAA7BjH,KAAKP,MAAM6P,iBAAoB,GAAG,QAC9C,kBAAC,GAAD,CAAQf,iBAAkBvO,KAAKP,MAAM8O,yB,GApK7B7J,IAAMyC,W,uLCwB9B,IAOMkJ,GAAgBjJ,cAAH,MAObkJ,G,kDACF,aAAe,IAAD,8BACV,gBAEKC,aAAe7L,IAAM2K,YAE1B,EAAK5P,MAAQ,CACT+Q,QAAQ,GACRC,YAAY,GACZC,gBAAgB,GAChBC,mBAAmB,GACnBC,WAAW,EACXzI,aAAc,IAGlB0I,QAAQC,IAAI,ChBzDT5R,MAAM,GAAD,OAAIF,EAAJ,WgByDkBC,IAAgBG,IAAoBD,MAAwB4R,MAAK,SAAAC,GAAS,OAAIH,QAAQC,IAAIE,EAAUtO,KAAI,SAAAuO,GAAQ,OAAIA,EAASC,cAAUH,MAAK,SAAAI,GACnK,IAAIX,EAAUW,EAAM,GAChBV,EAAcU,EAAM,GACpBT,EAAkBS,EAAM,GACxBR,EAAqBQ,EAAM,GAE/B,EAAK/P,SAAS,CAACoP,QAAQA,EAASC,YAAYA,EAAaC,gBAAgBA,EAAiBC,mBAAmBA,EAAoBC,WAAU,OAE9I,EAAKrF,eAAiB,EAAKA,eAAehM,KAApB,gBAtBZ,E,6DA0BVS,KAAKoB,SAAS,CAAC+G,aAAanI,KAAKuQ,aAAaN,QAAQC,sB,+BAItD,OACI,kBAAC,IAAMxD,SAAP,KACA,kBAAC,KAAD,CAAa0E,QAAM,IACnB,kBAACtO,EAAA,EAAD,CAAMC,WAAS,EAACO,MAAO,CAACiC,gBAAgB,qBACpC,kBAACzC,EAAA,EAAD,CAAMG,MAAI,EAACoO,GAAI,EAAGnO,GAAI,IACtB,kBAACJ,EAAA,EAAD,CAAMG,MAAI,EAACoO,GAAI,GAAInO,GAAI,IACnB,kBAACoO,EAAA,EAAD,CAAQ/M,SAAS,UACZvE,KAAKmC,MAAMoP,YACR,kBAAC,IAAM7E,SAAP,KACI,kBAACyD,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKpM,MAAM,SACX,kBAACoM,EAAA,EAAD,CAAKpM,MAAM,aAAaR,UAAQ,IAChC,kBAAC4M,EAAA,EAAD,CAAKpM,MAAM,cAAcR,UAAQ,IACjC,kBAAC4M,EAAA,EAAD,CAAKpM,MAAM,gBAAgBR,UAAQ,MAGvC,kBAACgO,GAAA,EAAD,KACI,kBAAClE,GAAA,EAAD,CACImE,aAAW,OACXC,gBAAc,cACdC,gBAAc,OACdrO,MAAO,CAAC,MAAQ,SAChB8H,QAASpL,KAAK4R,gBACd,kBAAC,IAAD,OAEJ,kBAAC,KAAD,CACIxP,GAAG,cACHyP,SAAU7R,KAAKP,MAAMoS,SACrBC,aAAc,CACVC,SAAU,MACVC,WAAY,SAEhBC,aAAW,EACXC,gBAAiB,CACbH,SAAU,MACVC,WAAY,SAEhBG,KAAMC,QAAQpS,KAAKP,MAAMoS,UACzBQ,QAASrS,KAAKsS,WAEd,kBAAC1R,EAAA,EAAD,aACA,kBAACA,EAAA,EAAD,mBACA,kBAACA,EAAA,EAAD,oBACA,kBAACA,EAAA,EAAD,0BAOxB,kBAACkC,EAAA,EAAD,CAAMG,MAAI,EAACoO,GAAI,EAAGnO,GAAI,IACtB,kBAACJ,EAAA,EAAD,CAAMG,MAAI,EAACW,GAAI,EAAGV,GAAI,IACtB,kBAACJ,EAAA,EAAD,CAAMG,MAAI,EAACY,GAAI,EAAGD,GAAI,EAAGV,GAAI,IAC1B,kBAAC,GAAD,CAAWsJ,IAAKxM,KAAKuQ,aAAc7I,WAAY1H,KAAKP,MAAM+Q,QAASxP,QAAShB,KAAKP,MAAMgR,YAAanO,eAAgBtC,KAAKP,MAAMkR,mBAAoBpF,eAAgBvL,KAAKuL,kBAE3K,kBAACzI,EAAA,EAAD,CAAMG,MAAI,EAACY,GAAI,EAAGD,GAAI,EAAGV,GAAI,IAErBlD,KAAKP,MAAMmR,UAAW,yBAAKtN,MAAO,CAACiP,QAAQ,OAAQC,eAAe,WAAW,kBAAC,aAAD,CAAYpL,IAAKiJ,MAAyB,kBAAC,EAAD,CAAS3I,WAAY1H,KAAKP,MAAM+Q,QAASrI,aAAcnI,KAAKP,MAAM0I,gBAGjM,kBAACrF,EAAA,EAAD,CAAMG,MAAI,EAACW,GAAI,EAAGV,GAAI,U,GA3FfwB,IAAMyC,WAkGdsL,GAhHH,SAACtQ,GACT,IAAMuQ,EAAQC,cACRC,EAAOC,YAAcH,EAAMI,YAAYC,GAAG,OAEhD,OAAO,kBAAC,GAAD,CAAUxB,YAAaqB,KCvBdR,QACW,cAA7BY,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5C,MAAK,SAAA6C,GACJA,EAAaC,gBAEdC,OAAM,SAAAhU,GACL6B,QAAQ7B,MAAMA,EAAMiU,a,i8EE5HtBC,gBAAkBC,kEAAW,SAAAvB,GAAK,MAAK,CACzCwB,KAAM,CACF3O,gBAAiBmN,EAAMyB,QAAQC,QAAQC,KACvC9N,MAAOmM,EAAMyB,QAAQG,OAAOC,OAEhCC,KAAM,CACF3O,SAAU,OANMoO,CAQpBvO,6DAEE+O,eAAiBR,kEAAW,SAAAvB,GAAK,MAAK,CACxCgC,KAAM,CACF,qBAAsB,CAClBnP,gBAAiBmN,EAAMyB,QAAQQ,WAAWC,aAH/BX,CAMnBxO,2DAEEoP,eAAiB,SAAC1S,GACpB,IAAMuQ,EAAQC,mEACRC,EAAOC,wEAAcH,EAAMI,YAAYC,GAAG,OAEhD,OAAO,iDAAC+B,oBAAD,eAAqBvD,YAAaqB,GAAUzQ,KAGvD,SAAS4S,aAAa9M,GAClB,OAAiB,QAAVA,EAKX,SAAS+M,kBAAkBnV,GACvB,OAAIA,EAAQ,EACF,KAAN,OAAYmQ,KAAKiF,IAAIpV,IAEf,IAAN,OAAWA,GAInB,SAASqV,GAAGC,KAAMC,QAASC,QAASC,OAAQC,MAExC,IAAIA,KAAwB,qBAATA,KAAwB,EAAIA,KAO/C,OAJAJ,KAAOK,KAAKL,MACZC,QAAUI,KAAKJ,SAGF,IAATD,MACSE,QAAUD,QAAUE,SAEnB,EAAItF,KAAKyF,IAAI,EAAIN,KAAMC,UAAYD,KAAQE,SAAW,EAAGF,KAAOI,MAAQD,QAAUtF,KAAKyF,IAAI,EAAIN,KAAMC,SAIvH,SAASM,YAAYpH,EAAYtN,GAC7B,IAAI,IAAID,EAAI,EAAGA,EAAIC,EAAQC,OAAQF,IAC/B,GAAIuN,GAActN,EAAQD,GAAGI,KACzB,OAAOH,EAAQD,GAAGqB,GAG1B,OAAO,KAGJ,SAASuT,6BAA6BC,EAAcC,EAAYnO,GACnE,IAGIoO,EAHqBC,yBAAyB,EAAGH,EAAcC,EAAYnO,GACrD,GAE8BsF,MAAM,KAE9D,GAAI8I,EAAU7U,OAAS,EAAG,CAEtB,IAGI+U,EADqCD,wBAFrBD,EAAU,GAEkDF,EAAcC,EAAYnO,GAPtF,GAUpB,GAAc,aAAVsO,EACA,OAAOA,EAGf,OAAO,KAGX,SAASD,wBAAwBE,EAAkBL,EAAcC,EAAYnO,GACzE/F,QAAQC,IAAI,6BACZD,QAAQC,IAAIqU,GACZtU,QAAQC,IAAIgU,GACZjU,QAAQC,IAAIiU,GACZlU,QAAQC,IAAI8F,GAEZ,IAAI1G,EAAU6U,EAAW,GACrBvT,EAAiBuT,EAAW,GAC5BK,EAAcL,EAAW,GAEzBvH,EAAasH,EAAaxV,eAAewV,EAAa1V,oBAAsB,GAC5EuO,EAAWmH,EAAalV,aAAakV,EAAajW,kBAAoB,GAC1EgC,QAAQC,IAAI,gBAAkB0M,GAC9B3M,QAAQC,IAAI,cAAgB6M,GAG5B,IAAI0H,EAAU,YACVC,EAAW,YACXC,EAAO,YACPC,EAAkB,KAClBC,EAAqB,KACrBC,EAAWd,YAAYpH,EAAYtN,GAGvC,GAFAW,QAAQC,IAAI,cAAgB4U,GAEb,MAAZA,EAAiB,CAAC,IAAD,qMACSlU,GADT,IAChB,IAAI,EAAJ,qBAAwC,CAAC,IAAjCE,EAAgC,QACpC,GAAIA,EAAcC,WAAa+T,GAAYhU,EAAcrB,MAAQsN,EAAS,CACtE8H,EAAqB/T,EAGjBd,MAAMc,EAAc2T,WACpBA,EAAUM,WAAWjU,EAAc2T,UAIvC,IAAIO,EAAUD,WAAWjU,EAAcmU,UACnCC,EAAUH,WAAWjU,EAAcqU,UACvCT,EAAW,GAEX,IAAI,IAAIjB,EAAOuB,EAASvB,EAAOyB,EAASzB,GAAM,EAC1CiB,GAAYjB,EAAO,IAGvBiB,GAAYQ,EAEZ,QArBQ,8BAyBhB,IAAIE,EAAS/B,aAAa0B,WAAW/O,EAAWO,UAChDtG,QAAQC,IAAI,YAAckV,GA1BV,yMA4BMZ,GA5BN,IA4BhB,IAAI,EAAJ,qBAAkC,CAAC,IAA3Ba,EAA0B,QAC9B,GAAIA,EAAWtU,WAAa+T,GAAYO,EAAWC,SAAWF,GAAUC,EAAWE,SAAWH,GAAUC,EAAWnS,MAAQkD,SAASJ,EAAW9C,MAAM,CAEjJyR,EAAOU,EAAWV,KAClBC,EAAkBS,EAClB,QAjCQ,+BAsCpBpV,QAAQC,IAAI,aAAeuU,GAC3BxU,QAAQC,IAAI,cAAgBwU,GAC5BzU,QAAQC,IAAI,UAAYyU,GAExB,IAAIhB,EAAUoB,WAAWb,EAAahW,eAAesX,QAAQrX,OAIzDsX,EAAW,YAEf,GAAsB,MAAlBb,GAAqC,aAAXH,EAAuB,CACjD,IAAIiB,EAAWd,EAAgBf,KAAKzI,QAAQ,MAAO,IAGnD,OAFAnL,QAAQC,IAAI,cAAgBwV,GAErBA,EAASrK,eACZ,IAAK,UACDoK,EAAWzP,EAAW2P,QAAUlB,EAAUzO,EAAWK,WACrD,MACJ,IAAK,QACDoP,EAAWzP,EAAW4P,MAASnB,EAAUzO,EAAWK,WACpD,MACJ,IAAK,UACDoP,EAAWzP,EAAW6P,QAAWpB,EAAUzO,EAAWK,WACtD,MACJ,IAAK,QACDoP,EAAWzP,EAAW8P,MAASrB,EAAUzO,EAAWK,WAI5DoP,EAAWnH,KAAKyH,MAAMN,GAG1BxV,QAAQC,IAAI,cAAgBuV,GAG5B,IAAIO,EAAY,YAEhB,IAAyB,GAArBzB,GAAgC,aAANI,EAAmB,CAC7C,IAEIsB,EAAWzC,IAAIe,EAAmB,IAFvB,EACL,GACoD,GAAII,GAAOhB,EAAS,GAC9EuC,EAAWrB,EAAmBsB,UAC9BC,EAASH,GAAY,EAAIC,GAE7BjW,QAAQC,IAAI,cAAgB+V,GAC5BhW,QAAQC,IAAI,cAAgBgW,GAC5BjW,QAAQC,IAAI,YAAckW,GAE1B,IAGIC,EAAiB,EACuC,IAAxDnC,EAAahW,eAAe,mBAAmBC,OAAgB6B,MAAMkU,EAAahW,eAAe,mBAAmBC,SACpHkY,EAAiBtB,WAAWb,EAAahW,eAAe,mBAAmBC,QAG/E,IAAImY,EAAc,EACuC,IAArDpC,EAAahW,eAAe,gBAAgBC,OAAgB6B,MAAMkU,EAAahW,eAAe,gBAAgBC,SAC9GmY,EAAcvB,WAAWb,EAAahW,eAAe,gBAAgBC,QAGzE,IAAIoY,EAAc,EACuC,IAArDrC,EAAahW,eAAe,gBAAgBC,OAAgB6B,MAAMkU,EAAahW,eAAe,gBAAgBC,SAC9GoY,EAAcxB,WAAWb,EAAahW,eAAe,gBAAgBC,QAGzE,IAAIqY,EAAW,EACyC,IAApDtC,EAAahW,eAAe,eAAeC,OAAgB6B,MAAMkU,EAAahW,eAAe,eAAeC,SAC5GqY,EAAWzB,WAAWb,EAAahW,eAAe,eAAeC,QAGrE8B,QAAQC,IAAI,oBAAsBmW,GAClCpW,QAAQC,IAAI,iBAAmBoW,GAC/BrW,QAAQC,IAAI,iBAAmBqW,GAC/BtW,QAAQC,IAAI,cAAgBsW,GAE5B,IAAIC,EAAUL,EA5BD,EACF,EA2B4BC,EAAiBC,EAAcC,EACtEtW,QAAQC,IAAI,aAAeuW,GAE3B,IAAIC,EAAe,EAE4B,IAA3CxC,EAAa7V,iBAAiBsY,IAAIxY,OAAgB6B,MAAMkU,EAAa7V,iBAAiBsY,IAAIxY,SAC1F8B,QAAQC,IAAIgU,EAAa7V,iBAAiBsY,IAAIxY,OAC9CuY,EAAe3B,WAAWb,EAAa7V,iBAAiBsY,IAAIxY,OAAS,KAGzE8B,QAAQC,IAAI,kBAAoBwW,GAEhC,IAAIE,EAAUH,GAAS,EAAEC,GAAgBF,EACzCvW,QAAQC,IAAI,aAAe0W,GAGvBZ,EADAY,EAAU5Q,EAAWK,WAAaoP,EACtBmB,EAAU5Q,EAAWK,WAErBoP,EAGhBO,EAAY1H,KAAKyH,MAAMC,GAc3B,OAXA/V,QAAQC,IAAI,eAAiB8V,GAEb,aAAZP,IACAA,EAAWnC,kBAAkBmC,IAGhB,aAAbO,IACAA,EAAY1C,kBAAkB0C,IAGlC/V,QAAQC,IAAI,iCACL,CAAC0M,EAAYG,EAAqB,IAAV0H,EAAiB,IAAKC,EAAUC,EAAM,IAAMhB,EA1GhE,IA0G+E8B,EAAUO,G,IAGlG5C,oB,6XACF,aAAe,IAAD,wMACV,gBAEKyD,gCAAiC,CAClC,SACA,OACA,UACA,WACA,OACA,UACA,OACA,QACA,UAGJ,EAAK9Y,MAAQ,CACT+Y,yBAAyB,GACzB1C,UAAU,EAAE,GAAG,GAAG,IAGtB,EAAK2C,oBAAsB,EAAKA,oBAAoBlZ,KAAzB,iMApBjB,E,4OAuBWmZ,EAAmBC,EAAe9C,EAAYxQ,GACnE,IAD2E,EACvEuT,EAA8B,GADyC,mMAG9CD,EAAcE,WAHgC,IAG3E,IAAI,EAAJ,qBAAqD,CAAC,IAAD,kMAA5C9X,EAA4C,KAAzC6U,EAAyC,KACjD,GAAG5V,KAAK8Y,oBAAoBlD,GACxB,IAA6B,GAAzB8C,EAAkB3X,GAAS,CAC3B,IAAIgY,EAAqBhD,yBAAyB,EAAGH,EAAcC,EAAYxQ,GAE3EyQ,EAAYiD,EADU,GAC8B/L,MAAM,KAE9D,GAAI8I,EAAU7U,OAAS,EAAG,CAEtB,IAAI+X,EAAgBlD,EAAU,GAC9B9V,KAAKP,MAAMqW,UAAU/U,GAAKiY,EAE1BJ,EAA4BjY,KAAKoV,wBAAwBiD,EAAepD,EAAcC,EAAYxQ,SAElGuT,EAA4BjY,KAAKoY,QAIrCH,EAA4BjY,KAAKoV,wBAAwB2C,EAAkB3X,GAAI6U,EAAcC,EAAYxQ,KArB1C,8BA0B3E,OAAOuT,I,0CAGShD,GAChB,OAA2C,GAApCA,EAAa1V,qBAA8D,GAAlC0V,EAAajW,oB,0CAG7C0B,EAAO4X,GACvB,IAAIC,EAAc7X,EAAMG,OAAO3B,MAC3BiW,EAAY9V,KAAKP,MAAMqW,UAC3BA,EAAUmD,GAAeC,EAEzBlZ,KAAKoB,SAAS,CAAC0U,UAAUA,M,yCAGV0C,GAA0B,IAAD,OACxC,OACI,iDAAC,4CAAD,KACI,iDAAC,wDAAD,CAAOlV,MAAO,CAACiC,gBAAgB,uBAC3B,iDAAC,uDAAD,KACI,iDAAC,4DAAD,KACQ,iDAACkP,eAAD,KACCzU,KAAKuY,gCAAgC7V,KAAI,SAAAyW,GAAM,OAC5C,iDAACnF,gBAAD,KAAkBmF,QAK1BX,EAAyB9V,KAAI,SAAC0W,EAAcH,GAAf,OACzB,iDAACxE,eAAD,KAEQ2E,EAAa1W,KAAI,SAAC2W,EAAatX,GAG3B,GAF0B,GAEtBA,EAA6B,CAC7B,IAAIuX,EAAoB,GAMxB,OAJAD,EAAYrM,MAAM,KAAKhB,SAAQ,SAACoK,EAAUrU,GACtCuX,EAAkB3Y,KAAK,iDAAC,2DAAD,CAAUd,MAAOuW,GAAWA,EAA5B,UAIvB,iDAACpC,gBAAD,KACI,iDAAC,yDAAD,CAAQ5Q,SAAU,SAAC/B,GAAD,OAAW,EAAKoX,oBAAoBpX,EAAO4X,IAAcpZ,MAAO,EAAKJ,MAAMqW,UAAUmD,IAClGK,IAMjB,OACI,iDAACtF,gBAAD,KACKqF,e,iCActCxZ,EAAOkC,EAAOkX,GAAa,IAAD,OAGjC,GAF0B,GAEtBlX,EAA6B,CAC7B,IAAIuX,EAAoB,GAMxB,OAJAzZ,EAAMmN,MAAM,KAAKhB,SAAQ,SAACoK,EAAUrU,GAChCuX,EAAkB3Y,KAAK,iDAAC,2DAAD,CAAUd,MAAOuW,GAAWA,EAA5B,UAInB,iDAAC,yDAAD,CAAQhT,SAAU,SAAC/B,GAAD,OAAW,EAAKoX,oBAAoBpX,EAAO4X,IAAcpZ,MAAOG,KAAKP,MAAMqW,UAAUmD,IAClGK,GAKb,OAAO,iDAAC,4CAAD,KACFzZ,K,4CAIS2Y,GAA0B,IAAD,SACvCe,EAAS,GAD8B,mMAGcf,EAAyBK,WAHvC,2NAGlCI,EAHkC,KAGrBO,EAHqB,KAIvCD,EAAO5Y,KACH,iDAAC,uDAAD,CAAMsC,MAAI,EAACC,GAAI,IACX,iDAAC,wDAAD,CAAOI,MAAO,CAACiC,gBAAgB,uBAC3B,iDAAC,uDAAD,KACI,iDAAC,4DAAD,KACI,iDAACkP,eAAD,KACI,iDAACT,gBAAD,aACA,iDAACA,gBAAD,gBAIJwF,EAA+B9W,KAAI,SAACwC,EAAKnD,GAAN,OAC/B,iDAAC0S,eAAD,KACI,iDAACT,gBAAD,KAAkB,EAAKuE,gCAAgCxW,IACvD,iDAACiS,gBAAD,KAAkB,EAAKyF,WAAWvU,EAAKnD,EAAOkX,aAf9E,IAAI,EAAJ,qBAA6F,IAHlD,8BA4B3C,OACI,iDAAC,4CAAD,KACI,iDAAC,uDAAD,CAAMlW,WAAS,EAACC,QAAS,GACpBuW,M,+BAQb,IAAIG,OAAmDjP,GAA5BzK,KAAKmC,MAAMwW,eAA8B3Y,KAAKmC,MAAMwW,cAAc1X,OAAS,EAClGuX,EAA2BxY,KAAK2Z,yBAAyB3Z,KAAKP,MAAMqW,UAAW9V,KAAKmC,MAAMwW,cAAe3Y,KAAKmC,MAAM0T,WAAY7V,KAAKmC,MAAMkD,SAE/I,OAAIqU,EACI1Z,KAAKmC,MAAMoP,YACJvR,KAAK4Z,mBAAmBpB,GAExBxY,KAAK6Z,sBAAsBrB,GAG/B,S,GA3Le9T,8CAgMnBmQ,uC","file":"static/js/main.bb38317a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","var domain = 'https://lender-filter-backend-test.herokuapp.com';\n\nfunction fetchCars(){\n    return fetch(`${domain}/cars/`);\n}\n\nfunction fetchLenders(){\n    return fetch(`${domain}/lenders/`);\n}\n\nfunction fetchLenderPrograms(){\n    return fetch(`${domain}/lenders/programs/`);\n}\n\nfunction fetchLenderTerms(){\n    return fetch(`${domain}/lenders/terms/`)\n}\n\n\nexport {fetchCars, fetchLenders, fetchLenderPrograms, fetchLenderTerms};","import * as React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Grid from \"@material-ui/core/Grid\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport {fetchCars, fetchLenders, fetchLenderPrograms, fetchLenderTerms} from \"./Api\";\n\nconst PLEASE_SELECT_INDEX = 0;\n\nexport default class LenderFilter extends React.Component{\n    constructor() {\n        super();\n        this.selectLenderEvent = this.selectLenderEvent.bind(this);\n        this.selectTierEvent = this.selectTierEvent.bind(this);\n        this.state = this.filterBeginningState();\n    }\n\n    textfieldsBeginningState(){\n        return {\n            selectedTierIndex:0,\n            currencyFields:{\n                \"Payment\":{\n                    value: \"\",\n                    error: false\n                },\n                \"Down Payment\":{\n                    value: \"\",\n                    error: false\n                },\n                \"Trade Allowance\":{\n                    value: \"\",\n                    error: false\n                },\n                \"Trade Payoff\":{\n                    value: \"\",\n                    error: false\n                },\n                \"Trace a.c.v\":{\n                    value: \"\",\n                    error: false\n                }\n            },\n            percentageFields:{\n                \"Tax\":{\n                    value: \"\",\n                    error: false\n                }\n            }\n        }\n    }\n\n    hasError(){\n        let currencyFields = this.state.currencyFields;\n        let percentageFields = this.state.percentageFields;\n\n        return currencyFields[\"Payment\"].error || currencyFields[\"Down Payment\"].error || currencyFields[\"Trade Allowance\"].error || currencyFields[\"Trade Payoff\"].error || currencyFields[\"Trace a.c.v\"].error || percentageFields[\"Tax\"].error;\n    }\n\n    filterBeginningState(){\n        let beginningState = {\n            selectedLenderIndex: 0,\n            selectedLenderImage: null,\n            allLenderNames:[],\n            tierMenuItems:[],\n            ...this.textfieldsBeginningState(),\n            isTierSelectEnabled:false,\n            isTextFieldsEnabled:false,\n            lenderMenuItems:[],\n            selectedTierIndex:0,\n            allTierNames:[]\n        };\n\n        beginningState.tierMenuItems.push(<MenuItem key={\"tier_please_select_item\"}value={PLEASE_SELECT_INDEX}>Please select tier</MenuItem>);\n\n        return beginningState;\n    }\n\n    componentWillReceiveProps(nextProps){\n        let lenderMenuItems = [];\n        let allLenderNames = [];\n\n        for(let i = 0; i < nextProps.lenders.length; i++){\n            let lender = nextProps.lenders[i];\n\n            lenderMenuItems.push(<MenuItem key={\"lender_name_\" + i} value={i+1}>{lender.name}</MenuItem>);\n            allLenderNames.push(lender.name);\n        }\n\n        this.setState({lenderMenuItems:lenderMenuItems, allLenderNames:allLenderNames});\n    }\n\n    textboxOnChange(event, fieldLabel){\n        let newValue = event.target.value;\n        let isError = isNaN(newValue);\n        console.log(isError);\n\n        if (fieldLabel in this.state.currencyFields){\n            let newCurrencyFields = {...this.state.currencyFields};\n            newCurrencyFields[fieldLabel] =  {\n                value:newValue,\n                error:isError\n            }\n\n            this.setState({currencyFields:newCurrencyFields});\n        }else if (fieldLabel in this.state.percentageFields){\n            let newPercentageFields = {...this.state.percentageFields};\n            newPercentageFields[fieldLabel] = {\n                value:newValue,\n                error:isError\n            }\n            this.setState({percentageFields:newPercentageFields})\n        }\n    }\n\n    selectLenderEvent(event){\n        let index = event.target.value;\n        let indexMinusOne = index - 1;\n\n        let newState = {};\n        newState.selectedLenderIndex = index;\n\n        let isPleaseSelectItemSelected = index == PLEASE_SELECT_INDEX;\n\n        // // Update lender logo\n        // if (isPleaseSelectItemSelected){\n        //     newState.selectedLenderImage = null;\n        //     newState.isTierSelectEnabled = false;\n        // }else{\n        //     newState.selectedLenderImage = this.lenders[indexMinusOne].img_url;\n        //     newState.isTierSelectEnabled = true;\n        // }\n\n        // Update tiers\n        if (!isPleaseSelectItemSelected){\n            let selectedLenderId = this.props.lenders[indexMinusOne].id;\n            let allTierOfSelectedLender = this.props.lenderPrograms.filter(lenderProgram  => lenderProgram.lender_id == selectedLenderId).map(lenderProgram => lenderProgram.name);\n            let newTierMenuItems = [];\n            newTierMenuItems.push(<MenuItem value={PLEASE_SELECT_INDEX}>Please select tier</MenuItem>);\n\n            for (let i = 0; i < allTierOfSelectedLender.length; i++) {\n                let itemValue = i + 1;\n\n                newTierMenuItems.push(<MenuItem value={itemValue}>{allTierOfSelectedLender[i]}</MenuItem>)\n            }\n\n            newState.tierMenuItems = newTierMenuItems;\n            newState.isTierSelectEnabled = true;\n            newState.allTierNames = allTierOfSelectedLender;\n        }\n\n        newState.selectedTierIndex = PLEASE_SELECT_INDEX;\n\n        this.setState(newState);\n    }\n\n    selectTierEvent(event){\n        let newState = {...this.textfieldsBeginningState()};\n\n        newState.selectedTierIndex = event.target.value;\n\n        let isPleaseSelectItemSelected = event.target.value == PLEASE_SELECT_INDEX;\n\n        if(isPleaseSelectItemSelected){\n            newState.isTextFieldsEnabled = false;\n        }else{\n            newState.isTextFieldsEnabled = true;\n        }\n\n        this.setState(newState);\n    }\n\n    reset(){\n        this.setState(this.filterBeginningState());\n    }\n\n    render(){\n        return (\n            <Grid container spacing={5}>\n                <Grid item xs={12}>\n                    <Select onChange={this.selectLenderEvent} value={this.state.selectedLenderValue} style={{width:'100%'}}>\n                        {this.state.lenderMenuItems}\n                    </Select>\n                </Grid>\n                {/*<Grid item xs={12} style={{textAlign:\"center\"}}>*/}\n                {/*    <img src={this.state.selectedLenderImage} {...this.state.selectedLenderImage == null? {style:{width:'150px', height:'150px', visibility:\"hidden\"}}:{style:{width:'150px', height:'150px'}}} />*/}\n                {/*</Grid>*/}\n                <Grid item xs={12}>\n                    <Select style={{width:'100%'}} disabled={!this.state.isTierSelectEnabled} value={this.state.selectedTierIndex} onChange={this.selectTierEvent}>\n                        {this.state.tierMenuItems}\n                    </Select>\n                </Grid>\n                {Object.keys(this.state.currencyFields).map(currencyFieldLabel => (\n                    <Grid item xs={6} sm={3} md={6} style={{padding:10}}><TextField disabled={!this.state.isTextFieldsEnabled}\n                                                         label={currencyFieldLabel}\n                                                         variant=\"outlined\"\n                                                         onChange={(event) => this.textboxOnChange(event, currencyFieldLabel)}\n                                                               error = {this.state.currencyFields[currencyFieldLabel].error}\n                                                               helperText={this.state.currencyFields[currencyFieldLabel].error?\"Invalid Value\":\"\"}\n                                                               value={this.state.currencyFields[currencyFieldLabel].value}\n                                                         InputProps={{\n                                                             startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n                                                         }\n                                                         }\n                                                         size={\"small\"}\n                    /></Grid>\n                        )\n                    )\n                }\n                {Object.keys(this.state.percentageFields).map(percentageFieldLabel => (\n                        <Grid item xs={6} sm={3} md={6} style={{padding:10}}><TextField disabled={!this.state.isTextFieldsEnabled}\n                                                             label={percentageFieldLabel}\n                                                             variant=\"outlined\"\n                                                             onChange={(event) => this.textboxOnChange(event, percentageFieldLabel)}\n                                                             error = {this.state.percentageFields[percentageFieldLabel].error}\n                                                                   helperText={this.state.percentageFields[percentageFieldLabel].error?\"Invalid Value\":\"\"}\n                                                             value={this.state.percentageFields[percentageFieldLabel].value}\n                                                             InputProps={{\n                                                                 startAdornment: <InputAdornment position=\"start\">%</InputAdornment>,\n                                                             }}\n                                                             size={\"small\"}\n                        /></Grid>\n                    )\n                )\n                }\n            </Grid>\n        )\n    }\n}","import LenderFilter from \"./LenderFilter\";\nimport * as React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport {fetchLenderPrograms, fetchLenders, fetchLenderTerms} from \"./Api\";\nimport TextField from \"@material-ui/core/TextField\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\n\nexport default class LendersFilter extends React.Component{\n    constructor() {\n        super();\n        this.clearFiltersOnClick = this.clearFiltersOnClick.bind(this);\n        this.lenderFilter1 = React.createRef();\n        this.lenderFilter2 = React.createRef();\n        this.lenderFilter3 = React.createRef();\n\n        this.state = {\n            lenders: [],\n            lenderPrograms: [],\n            lenderTerms: []\n        }\n\n        Promise.all([fetchLenders(), fetchLenderPrograms(), fetchLenderTerms()]).then(async([lenders, lenderPrograms, lenderTerms]) => {\n            const lendersJson = await lenders.json();\n            const lenderProgramsJson = await lenderPrograms.json();\n            const lenderTermsJson = await lenderTerms.json();\n\n            return [lendersJson, lenderProgramsJson, lenderTermsJson];\n        }).then(([lenders, lenderPrograms, lenderTerms]) => {\n            this.setState({lenders:lenders, lenderPrograms:lenderPrograms, lenderTerms:lenderTerms});\n        });\n    }\n\n    clearFiltersOnClick(event){\n        this.lenderFilter1.current.reset();\n        this.lenderFilter2.current.reset();\n        this.lenderFilter3.current.reset();\n    }\n\n    getFiltersInputs(){\n        return [this.lenderFilter1.current.state, this.lenderFilter2.current.state, this.lenderFilter3.current.state];\n    }\n\n    hasError(){\n        return this.lenderFilter1.current.hasError() || this.lenderFilter2.current.hasError() || this.lenderFilter3.current.hasError();\n    }\n\n    getLenderData(){\n        return [this.state.lenders, this.state.lenderPrograms, this.state.lenderTerms];\n    }\n\n    render(){\n        return (\n            <React.Fragment>\n                <Grid container direction={\"row\"} spacing={4}>\n                    <Grid item xs={12}>\n                        Customer Name: <TextField variant=\"outlined\" size={\"small\"}/>\n                    </Grid>\n                    <Grid item md={4}>\n                        <LenderFilter ref={this.lenderFilter1} lenders={this.state.lenders} lenderPrograms={this.state.lenderPrograms} lenderTerms={this.state.lenderTerms}/>\n                    </Grid>\n                    <Grid item md={4}>\n                        <LenderFilter ref={this.lenderFilter2} lenders={this.state.lenders} lenderPrograms={this.state.lenderPrograms} lenderTerms={this.state.lenderTerms}/>\n                    </Grid>\n                    <Grid item md={4}>\n                        <LenderFilter ref={this.lenderFilter3} lenders={this.state.lenders} lenderPrograms={this.state.lenderPrograms} lenderTerms={this.state.lenderTerms}/>\n                    </Grid>\n                    <Grid item xs={12} style={{textAlign:\"center\"}}>\n                        <Button variant=\"contained\" color=\"primary\" onClick={this.props.submitOnClick}>Submit</Button>\n                        <Button variant=\"contained\" color={\"secondary\"} onClick={this.clearFiltersOnClick} style={{marginLeft:10}}>Reset</Button>\n                    </Grid>\n                </Grid>\n            </React.Fragment>\n        )\n    }\n}","import * as React from \"react\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\n\nexport default class CarDescription extends React.Component {\n    getCarTitle() {\n        let year = this.getRowValue('YEAR');\n        let make = this.getRowValue('MAKE');\n        let model = this.getRowValue('MODEL');\n        let trim = this.getRowValue('TRIM');\n\n        return `${year} ${make} ${model} ${trim}`;\n    }\n\n    getRowValue(rowName){\n        let row = this.getRowWithName(rowName);\n\n        if (row != null){\n            return row.value;\n        }\n\n        return '';\n    }\n\n    getRowWithName(rowName){\n        let matches = this.props.details.filter(row => (row.name == rowName));\n\n        if (matches.length > 0){\n            return matches[0];\n        }\n\n        return null;\n    }\n    render() {\n        return (\n            <Paper style={{padding: \"20px\", backgroundColor: \"rgb(247, 248, 248)\"}}>\n                <Table>\n                    <TableRow>\n                        <TableCell colSpan={2} style={{textAlign: \"center\"}}><b\n                            style={{fontSize: \"1.2rem\"}}>{this.getCarTitle()}</b></TableCell>\n                    </TableRow>\n                    {this.props.details.map(row => (\n                        <TableRow>\n                            <TableCell style={{padding: \"0px\"}}>\n                                <b>{row.name}</b>\n                            </TableCell>\n                            <TableCell style={{padding: \"0px\"}}>\n                                {row.value}\n                            </TableCell>\n                        </TableRow>\n                    ))}\n                </Table>\n            </Paper>\n        )\n    }\n}","import * as React from \"react\";\nimport ImageGallery from 'react-image-gallery';\nimport 'react-image-gallery/styles/css/image-gallery.css';\nimport './CarImagesGallery.css';\n\nexport default class CarImagesGallery extends React.Component{\n    render(){\n        return (\n            <ImageGallery items={this.props.images} showPlayButton={false} showFullscreenButton={false}/>\n        );\n    }\n}","import * as React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\n\nexport default class CarShowElementButtons extends React.Component{\n    render(){\n        return <React.Fragment>\n            <Grid container spacing={1}>\n                <Grid item xs={6} md={2} lg={2}>\n                    <Button variant=\"contained\" color={\"primary\"} style={{width:\"100%\"}}>Save</Button>\n                </Grid>\n                <Grid item xs={6} md={2} lg={2}>\n                    <Button variant=\"contained\" color={\"primary\"} style={{width:\"100%\"}}>Pictures</Button>\n                </Grid>\n                <Grid item xs={6} md={2} lg={2}>\n                    <Button variant=\"contained\" color={\"primary\"} style={{width:\"100%\"}}>Breakdown</Button>\n                </Grid>\n                <Grid item xs={6} md={2} lg={2}>\n                    <Button variant=\"contained\" color={\"primary\"} style={{width:\"100%\"}}>Send</Button>\n                </Grid>\n            </Grid>\n        </React.Fragment>\n    }\n}","import * as React from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CarDescription from \"./CarDescription\";\nimport CarCalculation from \"./CarCalculation\";\nimport CarImagesGallery from \"./CarImagesGallery\";\nimport CarShowElementButtons from \"./CarShowElementButtons\";\nimport Grid from \"@material-ui/core/Grid\";\n\nexport default class CarShowElement extends React.Component{\n    excludeCarDetailFields(fieldName){\n        let excludedFields = ['id', 'images', 'img_url', 'x_clean', 'clean', 'average', 'rough', 'series'];\n\n        return excludedFields.includes(fieldName);\n    }\n\n    convertFieldNameToLabel(fieldName){\n        let convertDict = {\n            'total_cost': 'TOTAL COST'\n        }\n\n        if (fieldName in convertDict){\n            return convertDict[fieldName];\n        }\n\n        return fieldName\n    }\n\n    isCurrencyField(fieldName){\n        return ['total_cost'].includes(fieldName);\n    }\n    convertToCarDetails(carJson){\n        let result = [];\n        let currencySymbol = '$';\n\n        for(let key in carJson){\n            if (!this.excludeCarDetailFields(key)){\n                let name = this.convertFieldNameToLabel(key).toUpperCase();\n                let value = carJson[key];\n\n                if (this.isCurrencyField(key)){\n                    value = currencySymbol + value;\n                }\n\n                result.push({\n                    name: name,\n                    value: value\n                });\n            }\n        }\n\n        return result;\n    }\n\n    render() {\n        return (\n           <Card style={{width:\"100%\"}}>\n               <CardContent>\n                   <Grid container spacing={2}>\n                       <Grid item xs={12} lg={7}>\n                            <CarImagesGallery images={this.props.images}/>\n                       </Grid>\n                       <Grid item xs={12} lg={5}>\n                           <CarDescription details={this.convertToCarDetails(this.props.details)}/>\n                       </Grid>\n                       <Grid item xs={12}>\n                           <CarCalculation filtersInputs={this.props.filtersInputs} lenderData={this.props.lenderData} details={this.props.details}/>\n                       </Grid>\n                       <Grid item xs={12}>\n                           <CarShowElementButtons />\n                       </Grid>\n                   </Grid>\n               </CardContent>\n           </Card>\n        )\n    }\n}","import React from 'react';\nimport { Card } from '@material-ui/core';\nimport CardContent from '@material-ui/core/CardContent';\nimport Grid from \"@material-ui/core/Grid\";\nimport ImageGallery from \"react-image-gallery\";\n\nclass Car extends React.Component {\n    getCarTitle(){\n        let carYear = this.props.details['year'];\n        let carMake = this.props.details['make'];\n        let carModel = this.props.details['model'];\n        let carTrim = this.props.details['trim'];\n\n        return `${carYear} ${carMake} ${carModel} ${carTrim}`;\n    }\n\n    render(){\n        return (\n            <Card>\n                <CardContent>\n                    <Grid container>\n                        <Grid item xs={12}>\n                            <ImageGallery items={[{original:\"https://drive.google.com/uc?export=view&id=1PNPS_e8i8a_m2Owox2ncuuFWNotAbYh6\"}]} showPlayButton={false} showFullscreenButton={false} showThumbnails={false}/>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <span className={\"car_title\"}>{this.getCarTitle()}</span>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <span className={\"car_total_cost\"}>${this.props.details['total_cost']}</span>\n                        </Grid>\n                        <Grid item xs={6} align={\"right\"}>\n                            <span className={\"car_mileage\"}>{this.props.details['mileage']}</span>\n                        </Grid>\n                    </Grid>\n                </CardContent>\n            </Card>\n        )\n    }\n}\n\nexport default Car;","import * as React from \"react\";\nimport CarShowElement from \"./CarShowElement\";\nimport Grid from \"@material-ui/core/Grid\";\nimport {styled, useTheme} from \"@material-ui/core/styles\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport {css} from \"@emotion/core\";\nimport {ClipLoader} from \"react-spinners\";\nimport './CarShow.css';\nimport {fetchCars} from \"./Api\";\nimport InfiniteScroll from \"react-infinite-scroller\";\nimport {calculateProfitFirstInterest} from \"./CarCalculation\";\nimport Car from './Car.js';\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\n\nconst clipLoaderCss = css`\n    border-color:rgb(55,71,172);\n    position:absolute;\n    border-bottom-color:transparent;\n    top:50%;\n`;\n\nclass CarShow extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            sortOptionIndex:-1\n        }\n\n        this.selectSortOption = this.selectSortOption.bind(this);\n    }\n\n    filterTitleToFieldName(filterTitle){\n        let dict = {\n            \"Make\":\"make\",\n            \"Model\":\"model\",\n            \"Year\":\"year\",\n            \"Total cost\":\"total_cost\",\n            \"Mileage\":\"mileage\"\n        }\n\n        return dict[filterTitle];\n    }\n\n    reverseNumberSign(number){\n        return -number;\n    }\n\n    sortCarDetails(carDetails, sortOptionIndex){\n        switch(sortOptionIndex){\n            case 1:\n                carDetails.sort((carDetail1, carDetail2) => parseInt(carDetail1.total_cost) - parseInt(carDetail2.total_cost));\n                break;\n            case 2:\n                carDetails.sort((carDetail1, carDetail2) => this.reverseNumberSign(parseInt(carDetail1.total_cost) - parseInt(carDetail2.total_cost)));\n                break;\n            case 3:\n                carDetails.sort((carDetail1, carDetail2) => parseInt(carDetail1.mileage) - parseInt(carDetail2.mileage));\n                break;\n            case 4:\n                carDetails.sort((carDetail1, carDetail2) => this.reverseNumberSign(parseInt(carDetail1.mileage) - parseInt(carDetail2.mileage)));\n                break;\n            case 5:\n                carDetails.sort((carDetail1, carDetail2) => this.reverseNumberSign(parseInt(carDetail1.year) - parseInt(carDetail2.year)));\n                break;\n            case 6:\n                carDetails.sort((carDetail1, carDetail2) => parseInt(carDetail1.year) - parseInt(carDetail2.year));\n                break;\n        }\n\n        return carDetails;\n    }\n\n    carDetails(){\n        let filterValuesLength = Object.keys(this.props.filterValues).length;\n        let hasFilterValues = filterValuesLength > 0;\n        let carDetails = [...this.props.carDetails];\n\n        if (hasFilterValues) {\n\n\n            for(let filterTitle in this.props.filterValues){\n                let filterValue = this.props.filterValues[filterTitle];\n                let filterType = filterValue[\"type\"];\n                let filterFieldName = this.filterTitleToFieldName(filterTitle);\n\n                if (filterType == \"list\"){\n                    let selectedOptions = filterValue[\"selectedOptions\"];\n                    let selectedOptionsSet = new Set(selectedOptions);\n\n                    carDetails = carDetails.filter(carDetail => selectedOptionsSet.has(carDetail[filterFieldName]));\n                }else if(filterType == \"range\"){\n                    let minVal = filterValue[\"min\"];\n                    let maxVal = filterValue[\"max\"];\n\n                    if (minVal !== \"\" || maxVal != \"\") {\n                        if (minVal == \"\") {\n                            minVal = 0;\n                        }\n\n                        if (maxVal == \"\") {\n                            maxVal = Number.MAX_SAFE_INTEGER;\n                        }\n\n                        carDetails = carDetails.filter(carDetail => carDetail[filterFieldName] >= minVal && carDetail[filterFieldName] <= maxVal);\n                    }\n                }\n            }\n\n            // Sort\n            if (this.state.sortOptionIndex != -1){\n                carDetails = this.sortCarDetails(carDetails, this.state.sortOptionIndex);\n            }\n\n            return carDetails;\n        }else{\n            // Sort\n            if (this.state.sortOptionIndex != -1){\n                carDetails = this.sortCarDetails(carDetails, this.state.sortOptionIndex);\n            }\n\n            return carDetails;\n        }\n    }\n\n    selectSortOption(event){\n        let sortOptionIndex = event.target.value;\n\n        this.setState({sortOptionIndex:sortOptionIndex});\n    }\n\n    render() {\n        let carDetailsAfterFilterAndSort = this.carDetails();\n\n        return (<Grid container spacing={2}>\n            <Grid item xs={6}>\n                <span class={\"matches\"}>{carDetailsAfterFilterAndSort.length + \" matches\"}</span>\n            </Grid>\n            <Grid item xs={6} align={\"right\"}>\n                <span className={\"sortBy\"}>Sort by </span>\n                <Select value={this.state.sortOptionIndex} onChange={this.selectSortOption}>\n                    <MenuItem value={1}>Lowest Price</MenuItem>\n                    <MenuItem value={2}>Highest Price</MenuItem>\n                    <MenuItem value={3}>Lowest Mileage</MenuItem>\n                    <MenuItem value={4}>Highest Mileage</MenuItem>\n                    <MenuItem value={5}>Newest Year</MenuItem>\n                    <MenuItem value={6}>Oldest Year</MenuItem>\n                </Select>\n            </Grid>\n            {carDetailsAfterFilterAndSort.map(carDetail => (\n               <Grid item xs={12} md={4} lg={3}>\n                   <Car details={carDetail}/>\n               </Grid>\n            ))}\n        </Grid>);\n    }\n}\n\nexport default CarShow;","import * as React from \"react\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Select from \"@material-ui/core/Select\";\n\nclass Sort extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            selectedCriteriaIndex: 0\n        }\n\n        this.sortCriteriaList = [\"Sort by (choose)\",\n                                \"Year (Latest -> Newest)\",\n                                \"Year (Newest -> Latest)\",\n                                \"Make\",\n                                \"Model\",\n                                \"Mileage (Lowest -> Highest)\",\n                                \"Mileage (Highest -> Lowest)\",\n                                \"Cost (Lowest -> Highest)\",\n                                \"Cost (Highest -> Lowest)\",\n                                \"Profit (Lowest -> Highest)\",\n                                \"Profit (Highest -> Lowest)\"]\n    }\n\n    selectCriteriaAtIndex(index){\n        this.setState(\n            {selectedCriteriaIndex:index}\n        )\n    }\n\n    getSelectedCriteriaIndex(){\n        return this.state.selectedCriteriaIndex;\n    }\n\n    getSelectedCriteriaName(){\n        return this.sortCriteriaList[this.state.selectedCriteriaIndex];\n    }\n\n    render(){\n        return (\n            <Select onChange={this.props.onSelect} value={this.state.selectedCriteriaIndex}>\n                {\n                    this.sortCriteriaList.map((sortCriteria, index) =>\n                        <MenuItem value={index}>{sortCriteria}</MenuItem>\n                    )\n                }\n            </Select>\n        );\n    }\n}\n\nexport default Sort;","import React from 'react';\nimport {Checkbox} from '@material-ui/core';\nimport Grid from '@material-ui/core/Grid';\n\nclass ListFilter extends React.Component{\n    constructor(props) {\n        super(props);\n        let optionCheckedDict = {};\n\n        for(let option of this.props.options){\n            optionCheckedDict[option] = true;\n        }\n\n        this.state = {\n            'Select All': true,\n            ...optionCheckedDict\n        };\n\n        this.selectAll = this.selectAll.bind(this);\n        this.optionOnchange = this.optionOnchange.bind(this);\n    }\n\n    getTitle(){\n        return this.props.title;\n    }\n\n    getValues(){\n        let selectedOptions = [];\n\n        for (let option of this.props.options){\n            if (this.state[option]){\n                selectedOptions.push(option);\n            }\n        }\n\n        return {\"selectedOptions\":selectedOptions};\n    }\n\n    componentWillReceiveProps(nextProps){\n        let optionsChanged = nextProps.options.length != this.props.options.length;\n\n        if(optionsChanged) {\n            let newState = {};\n\n            newState['Select All'] = true;\n\n            for (let option of nextProps.options) {\n                newState[option] = true;\n            }\n\n            this.setState({...newState});\n        }\n    }\n\n    selectAll(event){\n        let selectAllCheckbox = event.target;\n        let selectedCheckboxState = selectAllCheckbox.checked;\n        let newState = {...this.state};\n\n        for(let option of this.props.options){\n            if (selectAllCheckbox.checked){\n                newState[option] = true;\n            }else {\n                newState[option] = false;\n            }\n        }\n\n        newState['Select All'] = selectedCheckboxState;\n        this.setState(newState, this.props.onChange);\n    }\n\n    optionOnchange(event, name){\n\n        let checkbox = event.target;\n        let newState = {...this.state};\n        newState[name] = checkbox.checked;\n\n        let selectAll = true;\n\n        for(let option of this.props.options){\n            if(!newState[option]){\n                selectAll = false;\n            }\n        }\n\n        newState['Select All'] = selectAll;\n\n        this.setState(newState, this.props.onChange);\n        console.log((checkbox.checked?'Check ':'Unchecked ') + name);\n    }\n\n    render(){\n        let sortedOptions = [...this.props.options];\n        sortedOptions.sort();\n\n        let manyOptions = sortedOptions.length > 10;\n\n        return (\n            <Grid container>\n                <Grid item xs={12}>\n                    <Checkbox checked={this.state['Select All']} color={\"primary\"} onChange={this.selectAll} />All\n                </Grid>\n                {\n                    sortedOptions.map(item => (\n                        <Grid item xs={manyOptions?6:12}>\n                            <Checkbox checked={this.state[item]} color={\"primary\"}\n                                      onChange={(event) => this.optionOnchange(event, item)}/>{item}\n                        </Grid>\n                    ))\n                }\n            </Grid>\n        )\n    }\n}\n\nexport default ListFilter;","import React from 'react';\n\nimport Grid from '@material-ui/core/Grid';\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport debounce from \"lodash/debounce\";\n\nclass RangeFilter extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            \"min\":\"\",\n            \"max\":\"\"\n        }\n\n        this.onChangeDebounced = debounce(this.onChangeDebounced, 2000);\n        this.selectRange = this.selectRange.bind(this);\n    }\n\n    textFieldOnChange(event, textFieldName){\n        let newState = {};\n\n        newState[textFieldName] = event.target.value;\n\n        this.setState(newState);\n        this.onChangeDebounced();\n    }\n\n    onChangeDebounced = () => {\n        this.props.onChange();\n    }\n\n    getValues(){\n        return {\"min\":this.state.min, \"max\":this.state.max};\n    }\n\n    getMinTitle(){\n        return this.props.minTitle == undefined?\"Min\":this.props.minTitle;\n    }\n\n    getMaxTitle(){\n        return this.props.maxTitle == undefined?\"Max\":this.props.maxTitle;\n    }\n\n    getToText(){\n        return this.props.toText == undefined?\"To\":this.props.toText;\n    }\n\n    selectRange(event, min, max){\n        this.setState({\"min\":min, \"max\":max}, this.props.onChange);\n    }\n\n    render(){\n        return (\n            <Grid container>\n                <Grid item xs={4}>\n                    <TextField value={this.state[\"min\"]} label={this.getMinTitle()}\n                               variant=\"outlined\" size={\"small\"} onChange={(event) => this.textFieldOnChange(event, \"min\")}/>\n                </Grid>\n                <Grid item xs={4} align={\"center\"}>\n                    {this.getToText()}\n                </Grid>\n                <Grid item xs={4}>\n                    <TextField value={this.state[\"max\"]} label={this.getMaxTitle()}\n                               variant=\"outlined\" size={\"small\"} onChange={(event) => this.textFieldOnChange(event, \"max\")}/>\n                </Grid>\n                {\n                    this.props.rangeList?(<ul>{this.props.rangeList.map(range => {\n                        if (range.length == 1){\n                            return (<li><a href=\"#\" onClick={(event) => this.selectRange(event, range[0], range[0])}>{range[0]}</a></li>);\n                        }else if (range.length == 2){\n                            return (<li><a href=\"#\"  onClick={(event) => this.selectRange(event, range[0], range[1])}>{range[0]} - {range[1]}</a></li>);\n                        }\n\n                        return null;\n                    })}</ul>):(null)\n                }\n            </Grid>\n        )\n    }\n}\n\nexport default RangeFilter;","import React from 'react';\nimport ListFilter from \"./ListFilter\";\nimport RangeFilter from \"./RangeFilter\";\nimport {Collapse} from \"@material-ui/core\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { IconButton } from '@material-ui/core';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport './Filter.css';\n\nclass Filter extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {filters:[]};\n        this.filterOnChange = this.filterOnChange.bind(this);\n        this.createFilter = this.createFilter.bind(this);\n        this.expandOrCollapse = this.expandOrCollapse.bind(this);\n    }\n\n    expandBtnOnClick(event, filterTitle) {\n        let stateKeyName = filterTitle + '_expand';\n        let newState = {};\n        newState[stateKeyName] = !this.state[stateKeyName];\n\n        this.setState(newState);\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.setState({filters:nextProps.filters});\n    }\n\n    filterOnChange(event, filterTitle){\n        console.log(\"filterOnChange\");\n        let newState = {...this.state};\n\n        for(let filter of newState.filters){\n            let isDependentList = filter[\"type\"] == \"list\" && \"dependent_filter\" in filter && \"dependent_list\" in filter;\n\n            if (isDependentList){\n                let dependentFilter = filter[\"dependent_filter\"];\n                let dependentList = filter[\"dependent_list\"];\n\n                let selectedOptions = this.refsDict[dependentFilter].getValues()[\"selectedOptions\"];\n                let newOptions = new Set();\n\n                for(let selectedOption of selectedOptions){\n                    dependentList[selectedOption].forEach(newOptions.add, newOptions);\n                }\n\n                filter[\"options\"] = Array.from(newOptions);\n            }\n        }\n\n        this.setState(newState, this.props.onChange);\n    }\n\n    getFilterValues(){\n        let values = {};\n\n        for(let title in this.refsDict){\n            let filterType = this.state.filters.filter(filter => filter[\"title\"]===title)[0][\"type\"];\n            values[title] = {\n                \"type\":filterType,\n                ...this.refsDict[title].getValues()\n            }\n        }\n\n        return values;\n    }\n\n    expandOrCollapse(event, filterTitle){\n        let stateName = filterTitle + '_expand';\n        let newState = {};\n\n        newState[stateName] = !this.state[stateName];\n        this.setState(newState);\n    }\n\n    createFilter(filter, filterIndex){\n        let lastFilterIndex = this.state.filters.length - 1;\n        let filterType = filter[\"type\"];\n        let filterComponent = undefined;\n\n        if (filterType == \"list\"){\n            filterComponent = <ListFilter {...filter} ref={curFilter => this.refsDict[filter[\"title\"]] = curFilter} onChange={(event) => this.filterOnChange(event, filter[\"title\"])}/>;\n        }else if (filterType == \"range\"){\n            filterComponent = <RangeFilter {...filter} ref={curFilter => this.refsDict[filter[\"title\"]] = curFilter} onChange={(event) => this.filterOnChange(event, filter[\"title\"])}/>\n        }\n\n        return (\n            <React.Fragment>\n                <Grid item xs={12} className={\"filter\"}>\n                    <Grid container className={\"expandable\"} onClick={(event) => this.expandOrCollapse(event, filter[\"title\"])}>\n                        <Grid item xs={10}>\n                            <span className={'filter_title'}>{filter[\"title\"]}</span>\n                        </Grid>\n                        <Grid item xs={2} align='right'>\n                            {this.state[filter[\"title\"] + \"_expand\"]?(<ExpandLess/>):(<ExpandMore />)}\n                        </Grid>\n                    </Grid>\n                    <Collapse in={this.state[filter[\"title\"] + \"_expand\"]}>\n                        {filterComponent}\n                    </Collapse>\n                </Grid>\n            </React.Fragment>\n        );\n    }\n\n    render(){\n        console.log('render');\n        console.log(this.state);\n        this.refsDict = {};\n\n        return (\n            <Grid container className={\"filter_main_content\"}>\n                {\n                    this.state.filters.map(this.createFilter)\n                }\n            </Grid>\n        )\n    }\n}\n\nexport default Filter;","import React from 'react';\nimport Grid from \"@material-ui/core/Grid\";\nimport { IconButton } from '@material-ui/core';\nimport Close from '@material-ui/icons/Close';\nimport { Paper } from '@material-ui/core';\n\nclass LenderInputs extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    keyToTitle(key){\n        let result = key.replace('_',' ');\n\n        return result\n            .toLowerCase()\n            .split(' ')\n            .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n            .join(' ');\n    }\n\n    render(){\n        return (\n        <Paper style={{padding:10}}>\n            <Grid container>\n                <Grid item xs={12} align={\"right\"}>\n                    <IconButton color=\"secondary\" onClick={this.props.handleDeleteBtnClick}>\n                        <Close />\n                    </IconButton>\n                </Grid>\n                {\n                    Object.keys(this.props.inputs).map(input =>\n                        <React.Fragment>\n                            <Grid item xs={6}>\n                            {this.keyToTitle(input)}\n                            </Grid>\n                            <Grid item xs={6}>\n                                {this.props.inputs[input]}\n                            </Grid>\n                        </React.Fragment>)\n                }\n        </Grid>\n        </Paper>);\n    }\n}\n\nexport default LenderInputs;","import React from 'react';\nimport Grid from \"@material-ui/core/Grid\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport TextField from \"@material-ui/core/TextField\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport Button from \"@material-ui/core/Button\";\nimport LenderInputs from \"./LenderInputs\";\nimport './Lender.css';\n\nclass Lender extends React.Component {\n    beginningState(){\n        return {\n            selectedTier:'NONE',\n            tierMenuItems:[],\n            tierSelectDisabled:true,\n\n            selectedLender:'NONE',\n            lenderSelectDisabled:false,\n\n            currencyFields:{\n                \"Payment\":{\n                    value: \"\",\n                    error: false\n                },\n                \"Down Payment\":{\n                    value: \"\",\n                    error: false\n                },\n                \"Trade Allowance\":{\n                    value: \"\",\n                    error: false\n                },\n                \"Trade Payoff\":{\n                    value: \"\",\n                    error: false\n                },\n                \"Trace a.c.v\":{\n                    value: \"\",\n                    error: false\n                }\n            },\n            percentageFields:{\n                \"Tax\":{\n                    value: \"\",\n                    error: false\n                }\n            },\n            isTextFieldsEnabled:false\n        }\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            lenderMenuItems:[],\n            ...this.beginningState(),\n            lenderInputs:[]\n        }\n\n        this.selectLender = this.selectLender.bind(this);\n        this.selectTier = this.selectTier.bind(this);\n        this.addLender = this.addLender.bind(this);\n        this.reset = this.reset.bind(this);\n        this.deleteLenderInput = this.deleteLenderInput.bind(this);\n    }\n\n    componentWillReceiveProps(nextProps) {\n        let lenderMenuItems = [];\n\n        lenderMenuItems.push(<MenuItem value={'NONE'}>Please select lender</MenuItem>);\n\n        for (let lenderName in nextProps.lenderToPrograms){\n            lenderMenuItems.push(<MenuItem value={lenderName}>{lenderName}</MenuItem>);\n        }\n\n        this.setState({lenderMenuItems:lenderMenuItems});\n    }\n\n    textboxOnChange(event, fieldLabel){\n        let newValue = event.target.value;\n        let isError = isNaN(newValue);\n        console.log(isError);\n\n        if (fieldLabel in this.state.currencyFields){\n            let newCurrencyFields = {...this.state.currencyFields};\n            newCurrencyFields[fieldLabel] =  {\n                value:newValue,\n                error:isError\n            }\n\n            this.setState({currencyFields:newCurrencyFields});\n        }else if (fieldLabel in this.state.percentageFields){\n            let newPercentageFields = {...this.state.percentageFields};\n            newPercentageFields[fieldLabel] = {\n                value:newValue,\n                error:isError\n            }\n            this.setState({percentageFields:newPercentageFields})\n        }\n    }\n\n    selectLender(event){\n        let selectLenderName = event.target.value;\n\n        let tierSelectDisabled = true;\n\n        if (selectLenderName != 'NONE'){\n            tierSelectDisabled = false;\n        }\n\n        let tierMenuItems = [];\n        tierMenuItems.push(<MenuItem value={'NONE'}>Please select tier</MenuItem>);\n\n        for(let tierName of this.props.lenderToPrograms[selectLenderName]) {\n            tierMenuItems.push(<MenuItem value={tierName}>{tierName}</MenuItem>);\n        }\n\n        this.setState({\n            selectedLender:selectLenderName,\n            selectedTier:'NONE',\n            tierSelectDisabled: tierSelectDisabled,\n            tierMenuItems:tierMenuItems\n        });\n    }\n\n    selectTier(event){\n        let selectIndex = event.target.value;\n\n        this.setState({\n            selectedTier : selectIndex,\n            isTextFieldsEnabled:true\n        })\n    }\n\n    hasAnyErrorsInLenderInput(){\n        let hasAnyErrors = false;\n\n        Object.keys(this.state.currencyFields).forEach((key) => {\n            if (this.state.currencyFields[key].error){\n                hasAnyErrors = true;\n            }\n        });\n\n        Object.keys(this.state.percentageFields).forEach((key) => {\n            if (this.state.percentageFields[key].error){\n                hasAnyErrors = true;\n            }\n        });\n\n        return hasAnyErrors;\n    }\n\n    addLender(event){\n        let lenderInput = {};\n        let hasAnyErrors = this.hasAnyErrorsInLenderInput();\n\n        if (this.state.selectedLender != 'NONE' && this.state.selectedTier != 'NONE' && !hasAnyErrors) {\n            lenderInput[\"lender\"] = this.state.selectedLender;\n            lenderInput[\"tier\"] = this.state.selectedTier;\n            lenderInput[\"payment\"] = this.state.currencyFields[\"Payment\"].value;\n            lenderInput[\"down payment\"] = this.state.currencyFields[\"Down Payment\"].value;\n            lenderInput[\"trade allowance\"] = this.state.currencyFields[\"Trade Allowance\"].value;\n            lenderInput[\"trade payoff\"] = this.state.currencyFields[\"Trade Payoff\"].value;\n            lenderInput[\"trade a.c.v\"] = this.state.currencyFields[\"Trace a.c.v\"].value;\n            lenderInput[\"tax\"] = this.state.percentageFields[\"Tax\"].value;\n\n            let newLenderInputs = this.state.lenderInputs;\n            newLenderInputs.push(lenderInput);\n\n            this.setState({lenderInputs: newLenderInputs});\n        }\n    }\n\n    reset(event){\n        this.setState({...this.beginningState()});\n    }\n\n    deleteLenderInput(event, lenderInputIndex){\n        let newLenderInputs = this.state.lenderInputs;\n\n        newLenderInputs.splice(lenderInputIndex, 1);\n\n        this.setState({lenderInputs:newLenderInputs});\n    }\n\n    render(){\n        return (\n          <Grid container className={\"lender_main_content padding10\"} spacing={2}>\n              <Grid item xs={12}>\n                  <Select onChange={this.selectLender} value={this.state.selectedLender} disabled={this.state.lenderSelectDisabled} style={{width:'100%'}}>\n                      {this.state.lenderMenuItems}\n                  </Select>\n              </Grid>\n              <Grid item xs={12}>\n                  <Select onChange={this.selectTier} value={this.state.selectedTier} disabled={this.state.tierSelectDisabled} style={{width:'100%'}}>\n                      {this.state.tierMenuItems}\n                  </Select>\n              </Grid>\n              {Object.keys(this.state.currencyFields).map(currencyFieldLabel => (\n                      <Grid item xs={6} sm={3} md={6} style={{padding:10}}><TextField disabled={!this.state.isTextFieldsEnabled}\n                                                                                      label={currencyFieldLabel}\n                                                                                      variant=\"outlined\"\n                                                                                      onChange={(event) => this.textboxOnChange(event, currencyFieldLabel)}\n                                                                                      error = {this.state.currencyFields[currencyFieldLabel].error}\n                                                                                      helperText={this.state.currencyFields[currencyFieldLabel].error?\"Invalid Value\":\"\"}\n                                                                                      value={this.state.currencyFields[currencyFieldLabel].value}\n                                                                                      InputProps={{\n                                                                                          startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n                                                                                      }\n                                                                                      }\n                                                                                      size={\"small\"}\n                      /></Grid>\n                  )\n              )\n              }\n              {Object.keys(this.state.percentageFields).map(percentageFieldLabel => (\n                      <Grid item xs={6} sm={3} md={6} style={{padding:10}}><TextField disabled={!this.state.isTextFieldsEnabled}\n                                                                                      label={percentageFieldLabel}\n                                                                                      variant=\"outlined\"\n                                                                                      onChange={(event) => this.textboxOnChange(event, percentageFieldLabel)}\n                                                                                      error = {this.state.percentageFields[percentageFieldLabel].error}\n                                                                                      helperText={this.state.percentageFields[percentageFieldLabel].error?\"Invalid Value\":\"\"}\n                                                                                      value={this.state.percentageFields[percentageFieldLabel].value}\n                                                                                      InputProps={{\n                                                                                          startAdornment: <InputAdornment position=\"start\">%</InputAdornment>,\n                                                                                      }}\n                                                                                      size={\"small\"}\n                      /></Grid>\n                  )\n              )\n              }\n              <Grid item xs={12} style={{textAlign:\"center\"}}>\n                  <Button variant=\"contained\" color={\"primary\"} onClick={this.addLender}>Add</Button>\n                  <Button variant=\"contained\" color={\"secondary\"} onClick={this.reset} style={{marginLeft:10}}>Reset</Button>\n              </Grid>\n              {\n                  this.state.lenderInputs.map((lenderInput, lenderInputIndex) =>\n                      <Grid item xs={12}>\n                          <LenderInputs inputs={lenderInput} handleDeleteBtnClick={(event) => this.deleteLenderInput(lenderInputIndex)}/>\n                      </Grid>)\n              }\n          </Grid>\n        );\n    }\n}\n\nexport default Lender;","import React from 'react';\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Filter from './Filter';\nimport './LeftPanel.css';\nimport Lender from './Lender';\n\nclass LeftPanel extends React.Component{\n    constructor(props) {\n        super(props);\n\n        this.handleChange = this.handleChange.bind(this);\n        this.filterRef = React.createRef();\n        let filter =\n        this.state = {\n            selectedTabIndex:0,\n            filters:[\n                {\n                    \"title\": \"Make\",\n                    \"type\": \"list\",\n                    \"options\":[]\n                },\n                {\n                    \"title\": \"Model\",\n                    \"type\": \"list\",\n                    \"options\": []\n                },\n                {\n                    \"title\": \"Year\",\n                    \"type\": \"range\",\n                    \"minTitle\": \"Min\",\n                    \"maxTitle\": \"Max\"\n                },\n                {\n                    \"title\": \"Mileage\",\n                    \"type\": \"range\",\n                    \"minTitle\": \"Min\",\n                    \"maxTitle\": \"Max\"\n                },\n                {\n                    \"title\": \"Total cost\",\n                    \"type\": \"range\",\n                    \"minTitle\": \"Min\",\n                    \"maxTitle\": \"Max\"\n                }\n            ],\n            lenderToPrograms:{},\n            carDetails:[]\n        }\n    }\n\n    handleChange(event, newSelectedTabIndex){\n        this.setState({selectedTabIndex:newSelectedTabIndex});\n    }\n\n    componentWillReceiveProps(nextProps){\n        let hasUpdate = this.state.carDetails.length != nextProps.carDetails.length;\n\n        if (hasUpdate) {\n            let makes = new Set();\n            let makeToModelsDict = {}\n            let models = new Set();\n            let yearSet = new Set();\n\n            for (let i = 0; i < nextProps.carDetails.length; i++) {\n                let carDetail = nextProps.carDetails[i];\n                let make = carDetail[\"make\"];\n                let model = carDetail[\"model\"];\n                let year = carDetail[\"year\"];\n\n                makes.add(make);\n                models.add(model);\n                if (!isNaN(year)){\n                    yearSet.add(year);\n                }\n\n                if (!(make in makeToModelsDict)) {\n                    makeToModelsDict[make] = new Set();\n                }\n\n                makeToModelsDict[make].add(model);\n            }\n\n            let yearRangeList = [];\n\n            // Create year range list\n            for(let year of yearSet){\n                yearRangeList.push([year]);\n            }\n\n            let filters = [\n                {\n                    \"title\": \"Make\",\n                    \"type\": \"list\",\n                    \"options\": Array.from(makes)\n                },\n                {\n                    \"title\": \"Model\",\n                    \"type\": \"list\",\n                    \"dependent_filter\": \"Make\",\n                    \"dependent_list\": makeToModelsDict,\n                    \"options\": Array.from(models)\n                },\n                {\n                    \"title\": \"Year\",\n                    \"type\": \"range\",\n                    \"minTitle\": \"Min\",\n                    \"maxTitle\": \"Max\",\n                    \"rangeList\": yearRangeList\n                },\n                {\n                    \"title\": \"Mileage\",\n                    \"type\": \"range\",\n                    \"minTitle\": \"Min\",\n                    \"maxTitle\": \"Max\",\n                    \"rangeList\": this.createRangeListContinuousValue(nextProps.carDetails.map(carDetail => parseInt(carDetail[\"mileage\"])), 10)\n                },\n                {\n                    \"title\": \"Total cost\",\n                    \"type\": \"range\",\n                    \"minTitle\": \"Min\",\n                    \"maxTitle\": \"Max\",\n                    \"rangeList\": this.createRangeListContinuousValue(nextProps.carDetails.map(carDetail => parseInt(carDetail[\"total_cost\"])), 10)\n                }\n            ];\n\n            let lenderToPrograms = {};\n            let lenderIdToLenderName = {};\n            nextProps.lenders.forEach(lender => {\n                lenderIdToLenderName[lender[\"id\"]] = lender[\"name\"];\n            });\n\n            nextProps.lenderPrograms.forEach(lenderProgram => {\n                let lenderName = lenderIdToLenderName[lenderProgram[\"lender_id\"]];\n\n                if (!(lenderName in lenderToPrograms)) {\n                    lenderToPrograms[lenderName] = [];\n                }\n\n                lenderToPrograms[lenderName].push(lenderProgram[\"name\"]);\n            });\n\n            this.setState({filters: filters, lenderToPrograms: lenderToPrograms, carDetails:nextProps.carDetails});\n        }\n    }\n\n    createRangeListContinuousValue(values, partsCount){\n        let min = Math.min(...values);\n        let max = Math.max(...values);\n        let x = (max - min)/partsCount;\n\n        return [[min, max]];\n    }\n\n    getFilterValues(){\n        return this.filterRef.current.getFilterValues();\n    }\n\n    render(){\n        return (\n        <React.Fragment>\n            <Tabs value={this.state.selectedTabIndex} onChange={this.handleChange}>\n                <Tab label={\"Filter\"} className={this.state.selectedTabIndex==0?\"tab_selected\":\"tab_deselected\"}/>\n                <Tab label={\"Lender\"} className={this.state.selectedTabIndex==1?\"tab_selected\":\"tab_deselected\"} />\n            </Tabs>\n            <div className={this.state.selectedTabIndex==0?'':'hide'}>\n                <Filter ref={this.filterRef} filters={this.state.filters}\n                        onChange={this.props.filterOnChange}\n                />\n            </div>\n            <div className={this.state.selectedTabIndex==1?'':'hide'}>\n                <Lender lenderToPrograms={this.state.lenderToPrograms} />\n            </div>\n        </React.Fragment>\n        );\n    }\n}\n\nexport default LeftPanel;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport LenderFilter from \"./LenderFilter\";\nimport LendersFilter from \"./LenderFilters\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Form from \"@material-ui/core/FormControl\"\nimport CarShow from \"./CarShow\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Paper from \"@material-ui/core/Paper\";\nimport {useTheme} from \"@material-ui/core/styles\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\nimport {FaFilter} from \"react-icons/all\";\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Menu from \"@material-ui/core/Menu\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport ScrollToTop from \"react-scroll-to-top\";\nimport \"react-scroll-to-top/lib/index.css\";\nimport Sort from \"./Sort\";\nimport LeftPanel from \"./LeftPanel\";\nimport {fetchCars, fetchLenderPrograms, fetchLenders, fetchLenderTerms} from \"./Api\";\nimport {css} from \"@emotion/core\";\nimport {ClipLoader} from \"react-spinners\";\n\nconst App = (props) => {\n    const theme = useTheme();\n    const mdUp = useMediaQuery(theme.breakpoints.up(\"md\"));\n\n    return <AppClass isBigScreen={mdUp}/>\n}\n\nconst clipLoaderCss = css`\n    border-color:rgb(55,71,172);\n    position:absolute;\n    border-bottom-color:transparent;\n    top:50%;\n`;\n\nclass AppClass extends React.Component{\n    constructor() {\n        super();\n\n        this.leftPanelRef = React.createRef();\n\n        this.state = {\n            carJson:[],\n            lendersJson:[],\n            lenderTermsJson:[],\n            lenderProgramsJson:[],\n            isLoading: true,\n            filterValues: {}\n        }\n\n        Promise.all([fetchCars(), fetchLenders(), fetchLenderTerms(), fetchLenderPrograms()]).then(responses => Promise.all(responses.map(response => response.json()))).then(jsons => {\n           let carJson = jsons[0];\n           let lendersJson = jsons[1];\n           let lenderTermsJson = jsons[2];\n           let lenderProgramsJson = jsons[3];\n\n           this.setState({carJson:carJson, lendersJson:lendersJson, lenderTermsJson:lenderTermsJson, lenderProgramsJson:lenderProgramsJson, isLoading:false});\n        });\n        this.filterOnChange = this.filterOnChange.bind(this);\n    }\n\n    filterOnChange(){\n        this.setState({filterValues:this.leftPanelRef.current.getFilterValues()});\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n            <ScrollToTop smooth />\n            <Grid container style={{backgroundColor:\"rgb(247,248,248)\"}}>\n                <Grid item xl={1} xs={0} />\n                <Grid item xl={10} xs={12}>\n                    <AppBar position=\"static\">\n                        {this.props.isBigScreen ? (\n                            <React.Fragment>\n                                <Tabs>\n                                    <Tab label=\"Home\"/>\n                                    <Tab label=\"Rate Sheet\" disabled/>\n                                    <Tab label=\"Quick Quote\" disabled/>\n                                    <Tab label=\"Lender Assist\" disabled/>\n                                </Tabs>\n                            </React.Fragment>) : (\n                                <Toolbar>\n                                    <IconButton\n                                        aria-label=\"menu\"\n                                        aria-controls=\"menu-appbar\"\n                                        aria-haspopup=\"true\"\n                                        style={{\"color\":\"white\"}}\n                                        onClick={this.menuBtnOnClick}>\n                                        <MenuIcon />\n                                    </IconButton>\n                                    <Menu\n                                        id=\"menu-appbar\"\n                                        anchorEl={this.state.anchorEl}\n                                        anchorOrigin={{\n                                            vertical: 'top',\n                                            horizontal: 'right',\n                                        }}\n                                        keepMounted\n                                        transformOrigin={{\n                                            vertical: 'top',\n                                            horizontal: 'right',\n                                        }}\n                                        open={Boolean(this.state.anchorEl)}\n                                        onClose={this.closeMenu}\n                                    >\n                                        <MenuItem>HOME</MenuItem>\n                                        <MenuItem>RATE SHEET</MenuItem>\n                                        <MenuItem>QUICK QUOTE</MenuItem>\n                                        <MenuItem>LENDER ASSIST</MenuItem>\n                                    </Menu>\n                                </Toolbar>\n                            )\n                        }\n                    </AppBar>\n                </Grid>\n                <Grid item xl={1} xs={0}/>\n                <Grid item sm={1} xs={0}/>\n                <Grid item md={2} sm={3} xs={12}>\n                   <LeftPanel ref={this.leftPanelRef} carDetails={this.state.carJson} lenders={this.state.lendersJson} lenderPrograms={this.state.lenderProgramsJson} filterOnChange={this.filterOnChange}/>\n                </Grid>\n                <Grid item md={8} sm={7} xs={12}>\n                    {\n                        this.state.isLoading?(<div style={{display:'flex', justifyContent:'center'}}><ClipLoader css={clipLoaderCss}/></div>):(<CarShow carDetails={this.state.carJson} filterValues={this.state.filterValues}/>)\n                    }\n                </Grid>\n                <Grid item sm={1} xs={0}/>\n            </Grid>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import * as React from \"react\";\nimport Table from \"@material-ui/core/Table\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { useTheme } from '@material-ui/core/styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport Grid from \"@material-ui/core/Grid\";\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\n\nconst StyledTableCell = withStyles(theme => ({\n    head: {\n        backgroundColor: theme.palette.primary.main,\n        color: theme.palette.common.white,\n    },\n    body: {\n        fontSize: 14,\n    },\n}))(TableCell);\n\nconst StyledTableRow = withStyles(theme => ({\n    root: {\n        '&:nth-of-type(odd)': {\n            backgroundColor: theme.palette.background.default,\n        },\n    },\n}))(TableRow);\n\nconst CarCalculation = (props)=>{\n    const theme = useTheme();\n    const mdUp = useMediaQuery(theme.breakpoints.up(\"md\"));\n\n    return <CarCalculationClass isBigScreen={mdUp} {...props}/>\n}\n\nfunction mileageToKms(mileage){\n    return mileage * 1.60934;\n}\n\n\n\nfunction addCurrencySymbol(value){\n    if (value < 0){\n        return `-$${Math.abs(value)}`\n    }else{\n        return `$${value}`\n    }\n}\n\nfunction pv(rate, periods, payment, future, type) {\n    // Initialize type\n    var type = (typeof type === 'undefined') ? 0 : type;\n\n    // Evaluate rate and periods (TODO: replace with secure expression evaluator)\n    rate = eval(rate);\n    periods = eval(periods);\n\n    // Return present value\n    if (rate === 0) {\n        return - payment * periods - future;\n    } else {\n        return (((1 - Math.pow(1 + rate, periods)) / rate) * payment * (1 +rate * type) - future) / Math.pow(1 + rate, periods);\n    }\n}\n\nfunction getLenderId(lenderName, lenders){\n    for(let i = 0; i < lenders.length; i++){\n        if (lenderName == lenders[i].name)\n            return lenders[i].id;\n    }\n\n    return null;\n}\n\nexport function calculateProfitFirstInterest(filterInputs, lenderData, carDetails){\n    let calculationDetails = createCalculationDetail(-1, filterInputs, lenderData, carDetails);\n    let interestColumnIndex = 3;\n    let profitColumnIndex = 8;\n    let interests = calculationDetails[interestColumnIndex].split(',');\n\n    if (interests.length > 0) {\n        // Select first interest as default\n        let firstInterest = interests[0];\n\n        let calculationDetailsForFirstInterest = createCalculationDetail(firstInterest, filterInputs, lenderData, carDetails);\n        let profit = calculationDetailsForFirstInterest[profitColumnIndex];\n\n        if (profit != 'NOT_FOUND')\n            return profit;\n    }\n\n    return null;\n}\n\nfunction createCalculationDetail(selectedInterest, filterInputs, lenderData, carDetails){\n    console.log('createCalculationDetail()');\n    console.log(selectedInterest);\n    console.log(filterInputs);\n    console.log(lenderData);\n    console.log(carDetails);\n\n    let lenders = lenderData[0];\n    let lenderPrograms = lenderData[1];\n    let lenderTerms = lenderData[2];\n\n    let lenderName = filterInputs.allLenderNames[filterInputs.selectedLenderIndex - 1];\n    let tierName = filterInputs.allTierNames[filterInputs.selectedTierIndex - 1];\n    console.log('lenderName = ' + lenderName);\n    console.log('tierName = ' + tierName);\n\n    // Advance\n    let advance = 'NOT_FOUND';\n    let interest = 'NOT_FOUND';\n    let term = 'NOT_FOUND';\n    let foundLenderTerm = null;\n    let foundLenderProgram = null;\n    let lenderId = getLenderId(lenderName, lenders);\n    console.log('lenderId = ' + lenderId);\n\n    if(lenderId != null){\n        for(let lenderProgram of lenderPrograms){\n            if (lenderProgram.lender_id == lenderId && lenderProgram.name == tierName){\n                foundLenderProgram = lenderProgram;\n\n                // Advance\n                if(!isNaN(lenderProgram.advance)){\n                    advance = parseFloat(lenderProgram.advance);\n                }\n\n                // Interest\n                let rateMin = parseFloat(lenderProgram.rate_min);\n                let rateMax = parseFloat(lenderProgram.rate_max);\n                interest = '';\n\n                for(let rate = rateMin; rate < rateMax; rate+=1){\n                    interest += rate + ',';\n                }\n\n                interest += rateMax;\n\n                break;\n            }\n        }\n\n        let carKms = mileageToKms(parseFloat(carDetails.mileage));\n        console.log('carKms = ' + carKms);\n\n        for(let lenderTerm of lenderTerms){\n            if (lenderTerm.lender_id == lenderId && lenderTerm.min_kms <= carKms && lenderTerm.max_kms >= carKms && lenderTerm.year == parseInt(carDetails.year)){\n                // Term\n                term = lenderTerm.term;\n                foundLenderTerm = lenderTerm;\n                break;\n            }\n        }\n    }\n\n    console.log('advance = ' + advance);\n    console.log('interest = ' + interest);\n    console.log('term = ' + term);\n\n    let payment = parseFloat(filterInputs.currencyFields.Payment.value);\n    let back = '0';\n\n    // Calculate max front\n    let maxFront = 'NOT_FOUND';\n\n    if (foundLenderTerm !=null && advance != \"NOT_FOUND\"){\n        let termType = foundLenderTerm.type.replace(/\\s/g, '');\n        console.log('termType = ' + termType);\n\n        switch(termType.toLowerCase()){\n            case 'x-clean':\n                maxFront = carDetails.x_clean * advance - carDetails.total_cost;\n                break;\n            case 'clean':\n                maxFront = carDetails.clean  * advance - carDetails.total_cost;\n                break;\n            case 'average':\n                maxFront = carDetails.average  * advance - carDetails.total_cost;\n                break;\n            case 'rough':\n                maxFront = carDetails.rough  * advance - carDetails.total_cost;\n                break;\n        }\n\n        maxFront = Math.round(maxFront);\n    }\n\n    console.log('maxFront = ' + maxFront);\n\n    // Calculate max profit\n    let maxProfit = 'NOT_FOUND';\n\n    if (selectedInterest != -1 && term!='NOT_FOUND') {\n        let discount = 0;\n        let tax = 0;\n        let financed = pv((selectedInterest / 100 + discount + tax) / 12, term, -payment, 0);\n        let holdBack = foundLenderProgram.hold_back;\n        let funded = financed * (1 - holdBack);\n\n        console.log('financed = ' + financed);\n        console.log('holdBack = ' + holdBack);\n        console.log('funded = ' + funded);\n\n        let lender = 0;\n        let ppsa = 0;\n\n        let tradeAllowance = 0;\n        if (filterInputs.currencyFields[\"Trade Allowance\"].value != '' && !isNaN(filterInputs.currencyFields[\"Trade Allowance\"].value)) {\n            tradeAllowance = parseFloat(filterInputs.currencyFields[\"Trade Allowance\"].value);\n        }\n\n        let tradePayOff = 0;\n        if (filterInputs.currencyFields[\"Trade Payoff\"].value != '' && !isNaN(filterInputs.currencyFields[\"Trade Payoff\"].value)) {\n            tradePayOff = parseFloat(filterInputs.currencyFields[\"Trade Payoff\"].value)\n        }\n\n        let downPayment = 0;\n        if (filterInputs.currencyFields[\"Down Payment\"].value != '' && !isNaN(filterInputs.currencyFields[\"Down Payment\"].value)) {\n            downPayment = parseFloat(filterInputs.currencyFields[\"Down Payment\"].value);\n        }\n\n        let tradeAcv = 0;\n        if (filterInputs.currencyFields[\"Trace a.c.v\"].value != '' && !isNaN(filterInputs.currencyFields[\"Trace a.c.v\"].value)) {\n            tradeAcv = parseFloat(filterInputs.currencyFields[\"Trace a.c.v\"].value)\n        }\n\n        console.log('tradeAllowance = ' + tradeAllowance);\n        console.log('tradePayOff = ' + tradePayOff);\n        console.log('downPayment = ' + downPayment);\n        console.log('tradeAcv = ' + tradeAcv);\n\n        let paidOut = funded - lender - ppsa + tradeAllowance - tradePayOff + downPayment;\n        console.log('paidOut = ' + paidOut);\n\n        let userInputTax = 0;\n\n        if (filterInputs.percentageFields.Tax.value != '' && !isNaN(filterInputs.percentageFields.Tax.value)) {\n            console.log(filterInputs.percentageFields.Tax.value);\n            userInputTax = parseFloat(filterInputs.percentageFields.Tax.value) / 100;\n        }\n\n        console.log('userInputTax = ' + userInputTax);\n\n        let netPaid = paidOut*(1-userInputTax) + tradeAcv;\n        console.log('netPaid = ' + netPaid);\n\n        if (netPaid - carDetails.total_cost < maxFront){\n            maxProfit = netPaid - carDetails.total_cost;\n        }else {\n            maxProfit = maxFront;\n        }\n\n        maxProfit = Math.round(maxProfit);\n    }\n\n    console.log('maxProfit = ' + maxProfit);\n\n    if (maxFront != 'NOT_FOUND'){\n        maxFront = addCurrencySymbol(maxFront);\n    }\n\n    if (maxProfit != 'NOT_FOUND'){\n        maxProfit = addCurrencySymbol(maxProfit);\n    }\n\n    console.log('End createCalculationDetail()');\n    return [lenderName, tierName, (advance * 100) + '%', interest, term, '$' + payment, back, maxFront, maxProfit];\n}\n\nclass CarCalculationClass extends React.Component{\n    constructor() {\n        super();\n\n        this.calculationDetailsColumnHeaders =[\n            \"Lender\",\n            \"Tier\",\n            \"Advance\",\n            \"Interest\",\n            \"Term\",\n            \"Payment\",\n            \"Back\",\n            \"Front\",\n            \"Profit\"\n        ];\n\n        this.state = {\n            calculationDetailsValues:[],\n            interests:[-1,-1,-1]\n        }\n\n        this.selectInterestEvent = this.selectInterestEvent.bind(this);\n    }\n\n    createCalculationDetails(selectedInterests, filtersInputs, lenderData, details){\n        let newCalculationDetailsValues = [];\n\n        for(let [i, filterInputs] of filtersInputs.entries()){\n            if(this.isValidFilterInputs(filterInputs)) {\n                if (selectedInterests[i] == -1){\n                    let calculationDetails = createCalculationDetail(-1, filterInputs, lenderData, details);\n                    let interestColumnIndex = 3;\n                    let interests = calculationDetails[interestColumnIndex].split(',');\n\n                    if (interests.length > 0) {\n                        // Select first interest as default\n                        let firstInterest = interests[0];\n                        this.state.interests[i] = firstInterest;\n\n                        newCalculationDetailsValues.push(createCalculationDetail(firstInterest, filterInputs, lenderData, details));\n                    }else{\n                        newCalculationDetailsValues.push(calculationDetails);\n                    }\n                }\n                else{\n                    newCalculationDetailsValues.push(createCalculationDetail(selectedInterests[i], filterInputs, lenderData, details));\n                }\n            }\n        }\n\n        return newCalculationDetailsValues;\n    }\n\n    isValidFilterInputs(filterInputs){\n        return filterInputs.selectedLenderIndex != 0 && filterInputs.selectedTierIndex != 0;\n    }\n\n    selectInterestEvent(event, lenderIndex){\n        let newInterest = event.target.value;\n        let interests = this.state.interests;\n        interests[lenderIndex] = newInterest;\n\n        this.setState({interests:interests});\n    }\n\n    renderWithOneTable(calculationDetailsValues){\n        return (\n            <React.Fragment>\n                <Paper style={{backgroundColor:\"rgb(247, 248, 248)\"}}>\n                    <Table>\n                        <TableHead>\n                                <StyledTableRow>\n                                {this.calculationDetailsColumnHeaders.map(header => (\n                                    <StyledTableCell>{header}</StyledTableCell>\n                                ))}\n                                </StyledTableRow>\n                        </TableHead>\n                        {\n                            calculationDetailsValues.map((columnValues, lenderIndex) =>(\n                                <StyledTableRow>\n                                    {\n                                        columnValues.map((columnValue, index) => {\n                                            let interestColumnIndex = 3;\n\n                                            if (index == interestColumnIndex){\n                                                let interestMenuItems = [];\n\n                                                columnValue.split(',').forEach((interest, index) => {\n                                                    interestMenuItems.push(<MenuItem value={interest}>{interest} %</MenuItem>);\n                                                });\n\n                                                return (\n                                                    <StyledTableCell>\n                                                        <Select onChange={(event) => this.selectInterestEvent(event, lenderIndex)} value={this.state.interests[lenderIndex]}>\n                                                            {interestMenuItems}\n                                                        </Select>\n                                                    </StyledTableCell>\n                                                )\n                                            }\n                                            else\n                                            return (\n                                                <StyledTableCell>\n                                                    {columnValue}\n                                                </StyledTableCell>\n                                            )\n                                        })\n                                    }\n                                </StyledTableRow>\n                            ))\n                        }\n                    </Table>\n                </Paper>\n            </React.Fragment>\n        )\n    }\n\n    createCell(value, index, lenderIndex){\n        let interestColumnIndex = 3;\n\n        if (index == interestColumnIndex){\n            let interestMenuItems = [];\n\n            value.split(',').forEach((interest, index) => {\n                interestMenuItems.push(<MenuItem value={interest}>{interest} %</MenuItem>);\n            });\n\n            return (\n                    <Select onChange={(event) => this.selectInterestEvent(event, lenderIndex)} value={this.state.interests[lenderIndex]}>\n                        {interestMenuItems}\n                    </Select>\n            )\n        }\n        else\n            return <React.Fragment>\n                {value}\n            </React.Fragment>\n    }\n\n    renderWithThreeTables(calculationDetailsValues){\n        let tables = [];\n\n        for(let [lenderIndex, lenderCalculationDetailsValues] of calculationDetailsValues.entries()){\n            tables.push(\n                <Grid item xs={12}>\n                    <Paper style={{backgroundColor:\"rgb(247, 248, 248)\"}}>\n                        <Table>\n                            <TableHead>\n                                <StyledTableRow>\n                                    <StyledTableCell>Name</StyledTableCell>\n                                    <StyledTableCell>Value</StyledTableCell>\n                                </StyledTableRow>\n                            </TableHead>\n                            {\n                                lenderCalculationDetailsValues.map((row, index) => (\n                                    <StyledTableRow>\n                                        <StyledTableCell>{this.calculationDetailsColumnHeaders[index]}</StyledTableCell>\n                                        <StyledTableCell>{this.createCell(row, index, lenderIndex)}</StyledTableCell>\n                                    </StyledTableRow>\n                                ))\n                            }\n                        </Table>\n                    </Paper>\n                </Grid>\n            )\n        }\n\n        return (\n            <React.Fragment>\n                <Grid container spacing={4}>\n                    {tables}\n                </Grid>\n            </React.Fragment>\n        )\n    }\n\n\n    render(){\n        let userInputsFilterData = this.props.filtersInputs != undefined && this.props.filtersInputs.length > 0;\n        let calculationDetailsValues = this.createCalculationDetails(this.state.interests, this.props.filtersInputs, this.props.lenderData, this.props.details);\n\n        if (userInputsFilterData){\n            if (this.props.isBigScreen){\n                return this.renderWithOneTable(calculationDetailsValues);\n            }else{\n                return this.renderWithThreeTables(calculationDetailsValues);\n            }\n        }else{\n            return null;\n        }\n    }\n}\n\nexport default CarCalculation;"],"sourceRoot":""}