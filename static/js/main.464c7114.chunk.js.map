{"version":3,"sources":["logo.svg","Api.js","LenderFilter.js","LenderFilters.js","CarDescription.js","CarImagesGallery.js","CarShowElementButtons.js","CarShowElement.js","Car.js","CarShow.js","Sort.js","ListFilter.js","RangeFilter.js","Filter.js","LenderInputs.js","Lender.js","LeftPanel.js","App.js","serviceWorker.js","index.js","CarCalculation.js"],"names":["module","exports","domain","fetchLenders","fetch","fetchLenderPrograms","fetchLenderTerms","LenderFilter","selectLenderEvent","bind","selectTierEvent","state","filterBeginningState","selectedTierIndex","currencyFields","value","error","percentageFields","this","beginningState","selectedLenderIndex","selectedLenderImage","allLenderNames","tierMenuItems","textfieldsBeginningState","isTierSelectEnabled","isTextFieldsEnabled","lenderMenuItems","allTierNames","push","MenuItem","key","nextProps","i","lenders","length","lender","name","setState","event","fieldLabel","newValue","target","isError","isNaN","console","log","newCurrencyFields","newPercentageFields","index","indexMinusOne","newState","selectedLenderId","props","id","allTierOfSelectedLender","lenderPrograms","filter","lenderProgram","lender_id","map","newTierMenuItems","itemValue","isPleaseSelectItemSelected","Grid","container","spacing","item","xs","Select","onChange","selectedLenderValue","style","width","disabled","Object","keys","currencyFieldLabel","sm","md","padding","TextField","label","variant","textboxOnChange","helperText","InputProps","startAdornment","InputAdornment","position","size","percentageFieldLabel","React","CarDescription","year","getRowValue","make","model","trim","rowName","row","getRowWithName","matches","details","Paper","backgroundColor","Table","TableRow","TableCell","colSpan","textAlign","fontSize","getCarTitle","CarImagesGallery","items","images","showPlayButton","showFullscreenButton","CarShowElementButtons","lg","Button","color","Car","carYear","carMake","carModel","carTrim","Card","CardContent","original","showThumbnails","align","Component","css","CarShow","carDetails","filterValues","carDetail","includes","ListFilter","optionCheckedDict","options","selectAll","optionOnchange","title","selectedOptions","option","selectAllCheckbox","selectedCheckboxState","checked","checkbox","sortedOptions","sort","manyOptions","Checkbox","RangeFilter","textFieldName","min","max","undefined","minTitle","maxTitle","toText","getMinTitle","textFieldOnChange","getToText","getMaxTitle","Filter","filters","filterOnChange","createFilter","filterTitle","stateKeyName","dependentFilter","dependentList","refsDict","getValues","newOptions","Set","forEach","add","Array","from","values","filterIndex","lastFilterIndex","filterType","filterComponent","ref","curFilter","Fragment","className","IconButton","onClick","expandBtnOnClick","Collapse","in","LenderInputs","replace","toLowerCase","split","word","charAt","toUpperCase","slice","join","handleDeleteBtnClick","inputs","input","keyToTitle","Lender","lenderInputs","selectLender","selectTier","addLender","reset","deleteLenderInput","selectedTier","tierSelectDisabled","selectedLender","lenderSelectDisabled","lenderName","lenderToPrograms","selectLenderName","tierName","selectIndex","hasAnyErrors","lenderInput","hasAnyErrorsInLenderInput","newLenderInputs","lenderInputIndex","splice","marginLeft","LeftPanel","handleChange","filterRef","createRef","selectedTabIndex","newSelectedTabIndex","makes","makeToModelsDict","models","lenderIdToLenderName","current","getFilterValues","Tabs","Tab","AppClass","leftPanelRef","carJson","lendersJson","lenderTermsJson","lenderProgramsJson","isLoading","Promise","all","then","responses","response","json","jsons","smooth","xl","AppBar","isBigScreen","Toolbar","aria-label","aria-controls","aria-haspopup","menuBtnOnClick","anchorEl","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","open","Boolean","onClose","closeMenu","App","theme","useTheme","mdUp","useMediaQuery","breakpoints","up","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message","StyledTableCell","withStyles","head","palette","primary","main","common","white","body","StyledTableRow","root","background","default","CarCalculation","CarCalculationClass","mileageToKms","mileage","addCurrencySymbol","Math","abs","pv","rate","periods","payment","future","type","eval","pow","getLenderId","calculateProfitFirstInterest","filterInputs","lenderData","interests","createCalculationDetail","profit","selectedInterest","lenderTerms","advance","interest","term","foundLenderTerm","foundLenderProgram","lenderId","parseFloat","rateMin","rate_min","rateMax","rate_max","carKms","lenderTerm","min_kms","max_kms","parseInt","Payment","maxFront","termType","x_clean","total_cost","clean","average","rough","round","maxProfit","financed","holdBack","hold_back","funded","tradeAllowance","tradePayOff","downPayment","tradeAcv","paidOut","userInputTax","Tax","netPaid","calculationDetailsColumnHeaders","calculationDetailsValues","selectInterestEvent","selectedInterests","filtersInputs","newCalculationDetailsValues","entries","isValidFilterInputs","calculationDetails","firstInterest","lenderIndex","newInterest","header","columnValues","columnValue","interestMenuItems","tables","lenderCalculationDetailsValues","createCell","userInputsFilterData","createCalculationDetails","renderWithOneTable","renderWithThreeTables"],"mappings":"qKAAAA,EAAOC,QAAU,IAA0B,kC,4SCAvCC,EAAS,mDAMb,SAASC,IACL,OAAOC,MAAM,GAAD,OAAIF,EAAJ,cAGhB,SAASG,IACL,OAAOD,MAAM,GAAD,OAAIF,EAAJ,uBAGhB,SAASI,IACL,OAAOF,MAAM,GAAD,OAAIF,EAAJ,oBCNhB,IAEqBK,E,kDACjB,aAAe,IAAD,8BACV,gBACKC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBACzB,EAAKC,gBAAkB,EAAKA,gBAAgBD,KAArB,gBACvB,EAAKE,MAAQ,EAAKC,uBAJR,E,uEAQV,MAAO,CACHC,kBAAkB,EAClBC,eAAe,CACX,QAAU,CACNC,MAAO,GACPC,OAAO,GAEX,eAAe,CACXD,MAAO,GACPC,OAAO,GAEX,kBAAkB,CACdD,MAAO,GACPC,OAAO,GAEX,eAAe,CACXD,MAAO,GACPC,OAAO,GAEX,cAAc,CACVD,MAAO,GACPC,OAAO,IAGfC,iBAAiB,CACb,IAAM,CACFF,MAAO,GACPC,OAAO,O,iCAOnB,IAAIF,EAAiBI,KAAKP,MAAMG,eAC5BG,EAAmBC,KAAKP,MAAMM,iBAElC,OAAOH,EAAc,QAAYE,OAASF,EAAe,gBAAgBE,OAASF,EAAe,mBAAmBE,OAASF,EAAe,gBAAgBE,OAASF,EAAe,eAAeE,OAASC,EAAgB,IAAQD,Q,6CAIpO,IAAIG,EAAc,aACdC,oBAAqB,EACrBC,oBAAqB,KACrBC,eAAe,GACfC,cAAc,IACXL,KAAKM,2BALM,CAMdC,qBAAoB,EACpBC,qBAAoB,EACpBC,gBAAgB,GAChBd,kBAAkB,EAClBe,aAAa,KAKjB,OAFAT,EAAeI,cAAcM,KAAK,gBAACC,EAAA,EAAD,CAAUC,IAAK,0BAA0BhB,MAjEvD,GAiEc,uBAE3BI,I,gDAGea,GAItB,IAHA,IAAIL,EAAkB,GAClBL,EAAiB,GAEbW,EAAI,EAAGA,EAAID,EAAUE,QAAQC,OAAQF,IAAI,CAC7C,IAAIG,EAASJ,EAAUE,QAAQD,GAE/BN,EAAgBE,KAAK,gBAACC,EAAA,EAAD,CAAUC,IAAK,eAAiBE,EAAGlB,MAAOkB,EAAE,GAAIG,EAAOC,OAC5Ef,EAAeO,KAAKO,EAAOC,MAG/BnB,KAAKoB,SAAS,CAACX,gBAAgBA,EAAiBL,eAAeA,M,sCAGnDiB,EAAOC,GACnB,IAAIC,EAAWF,EAAMG,OAAO3B,MACxB4B,EAAUC,MAAMH,GAGpB,GAFAI,QAAQC,IAAIH,GAERH,KAActB,KAAKP,MAAMG,eAAe,CACxC,IAAIiC,EAAiB,eAAO7B,KAAKP,MAAMG,gBACvCiC,EAAkBP,GAAe,CAC7BzB,MAAM0B,EACNzB,MAAM2B,GAGVzB,KAAKoB,SAAS,CAACxB,eAAeiC,SAC5B,GAAIP,KAActB,KAAKP,MAAMM,iBAAiB,CAChD,IAAI+B,EAAmB,eAAO9B,KAAKP,MAAMM,kBACzC+B,EAAoBR,GAAc,CAC9BzB,MAAM0B,EACNzB,MAAM2B,GAEVzB,KAAKoB,SAAS,CAACrB,iBAAiB+B,O,wCAItBT,GACd,IAAIU,EAAQV,EAAMG,OAAO3B,MACrBmC,EAAgBD,EAAQ,EAExBE,EAAW,GAef,GAdAA,EAAS/B,oBAAsB6B,IAhHX,GAkHaA,GAYD,CAC5B,IAAIG,EAAmBlC,KAAKmC,MAAMnB,QAAQgB,GAAeI,GACrDC,EAA0BrC,KAAKmC,MAAMG,eAAeC,QAAO,SAAAC,GAAa,OAAKA,EAAcC,WAAaP,KAAkBQ,KAAI,SAAAF,GAAa,OAAIA,EAAcrB,QAC7JwB,EAAmB,GACvBA,EAAiBhC,KAAK,gBAACC,EAAA,EAAD,CAAUf,MAlIhB,GAkIM,uBAEtB,IAAK,IAAIkB,EAAI,EAAGA,EAAIsB,EAAwBpB,OAAQF,IAAK,CACrD,IAAI6B,EAAY7B,EAAI,EAEpB4B,EAAiBhC,KAAK,gBAACC,EAAA,EAAD,CAAUf,MAAO+C,GAAYP,EAAwBtB,KAG/EkB,EAAS5B,cAAgBsC,EACzBV,EAAS1B,qBAAsB,EAC/B0B,EAASvB,aAAe2B,EAG5BJ,EAAStC,kBA/IW,EAiJpBK,KAAKoB,SAASa,K,sCAGFZ,GACZ,IAAIY,EAAQ,eAAOjC,KAAKM,4BAExB2B,EAAStC,kBAAoB0B,EAAMG,OAAO3B,MAE1C,IAAIgD,EAzJgB,GAyJaxB,EAAMG,OAAO3B,MAG1CoC,EAASzB,qBADVqC,EAMH7C,KAAKoB,SAASa,K,8BAIdjC,KAAKoB,SAASpB,KAAKN,0B,+BAGd,IAAD,OACJ,OACI,gBAACoD,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACrB,gBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,IACX,gBAACC,EAAA,EAAD,CAAQC,SAAUpD,KAAKV,kBAAmBO,MAAOG,KAAKP,MAAM4D,oBAAqBC,MAAO,CAACC,MAAM,SAC1FvD,KAAKP,MAAMgB,kBAMpB,gBAACqC,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,IACX,gBAACC,EAAA,EAAD,CAAQG,MAAO,CAACC,MAAM,QAASC,UAAWxD,KAAKP,MAAMc,oBAAqBV,MAAOG,KAAKP,MAAME,kBAAmByD,SAAUpD,KAAKR,iBACzHQ,KAAKP,MAAMY,gBAGnBoD,OAAOC,KAAK1D,KAAKP,MAAMG,gBAAgB8C,KAAI,SAAAiB,GAAkB,OAC1D,gBAACb,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGU,GAAI,EAAGC,GAAI,EAAGP,MAAO,CAACQ,QAAQ,KAAK,gBAACC,EAAA,EAAD,CAAWP,UAAW,EAAK/D,MAAMe,oBACjDwD,MAAOL,EACPM,QAAQ,WACRb,SAAU,SAAC/B,GAAD,OAAW,EAAK6C,gBAAgB7C,EAAOsC,IAC3C7D,MAAS,EAAKL,MAAMG,eAAe+D,GAAoB7D,MACvDqE,WAAY,EAAK1E,MAAMG,eAAe+D,GAAoB7D,MAAM,gBAAgB,GAChFD,MAAO,EAAKJ,MAAMG,eAAe+D,GAAoB9D,MAC3DuE,WAAY,CACRC,eAAgB,gBAACC,EAAA,EAAD,CAAgBC,SAAS,SAAzB,MAGpBC,KAAM,cAK9Cf,OAAOC,KAAK1D,KAAKP,MAAMM,kBAAkB2C,KAAI,SAAA+B,GAAoB,OAC1D,gBAAC3B,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGU,GAAI,EAAGC,GAAI,EAAGP,MAAO,CAACQ,QAAQ,KAAK,gBAACC,EAAA,EAAD,CAAWP,UAAW,EAAK/D,MAAMe,oBACjDwD,MAAOS,EACPR,QAAQ,WACRb,SAAU,SAAC/B,GAAD,OAAW,EAAK6C,gBAAgB7C,EAAOoD,IACjD3E,MAAS,EAAKL,MAAMM,iBAAiB0E,GAAsB3E,MACrDqE,WAAY,EAAK1E,MAAMM,iBAAiB0E,GAAsB3E,MAAM,gBAAgB,GAC1FD,MAAO,EAAKJ,MAAMM,iBAAiB0E,GAAsB5E,MACzDuE,WAAY,CACRC,eAAgB,gBAACC,EAAA,EAAD,CAAgBC,SAAS,SAAzB,MAEpBC,KAAM,mB,GAlNzBE,a,6CCHCA,Y,mECDtBC,E,4KAEb,IAAIC,EAAO5E,KAAK6E,YAAY,QACxBC,EAAO9E,KAAK6E,YAAY,QACxBE,EAAQ/E,KAAK6E,YAAY,SACzBG,EAAOhF,KAAK6E,YAAY,QAE5B,MAAM,GAAN,OAAUD,EAAV,YAAkBE,EAAlB,YAA0BC,EAA1B,YAAmCC,K,kCAG3BC,GACR,IAAIC,EAAMlF,KAAKmF,eAAeF,GAE9B,OAAW,MAAPC,EACOA,EAAIrF,MAGR,K,qCAGIoF,GACX,IAAIG,EAAUpF,KAAKmC,MAAMkD,QAAQ9C,QAAO,SAAA2C,GAAG,OAAKA,EAAI/D,MAAQ8D,KAE5D,OAAIG,EAAQnE,OAAS,EACVmE,EAAQ,GAGZ,O,+BAGP,OACI,gBAACE,EAAA,EAAD,CAAOhC,MAAO,CAACQ,QAAS,OAAQyB,gBAAiB,uBAC7C,gBAACC,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,CAAWC,QAAS,EAAGrC,MAAO,CAACsC,UAAW,WAAW,qBACjDtC,MAAO,CAACuC,SAAU,WAAY7F,KAAK8F,iBAE1C9F,KAAKmC,MAAMkD,QAAQ3C,KAAI,SAAAwC,GAAG,OACvB,gBAACO,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,CAAWpC,MAAO,CAACQ,QAAS,QACxB,yBAAIoB,EAAI/D,OAEZ,gBAACuE,EAAA,EAAD,CAAWpC,MAAO,CAACQ,QAAS,QACvBoB,EAAIrF,iB,GA3CO6E,a,yBCFvBqB,G,qLAEb,OACI,gBAAC,IAAD,CAAcC,MAAOhG,KAAKmC,MAAM8D,OAAQC,gBAAgB,EAAOC,sBAAsB,Q,GAHnDzB,cCDzB0B,E,uKAEb,OAAO,gBAAC,WAAD,KACH,gBAACtD,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACrB,gBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGW,GAAI,EAAGwC,GAAI,GACzB,gBAACC,EAAA,EAAD,CAAQrC,QAAQ,YAAYsC,MAAO,UAAWjD,MAAO,CAACC,MAAM,SAA5D,SAEJ,gBAACT,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGW,GAAI,EAAGwC,GAAI,GACzB,gBAACC,EAAA,EAAD,CAAQrC,QAAQ,YAAYsC,MAAO,UAAWjD,MAAO,CAACC,MAAM,SAA5D,aAEJ,gBAACT,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGW,GAAI,EAAGwC,GAAI,GACzB,gBAACC,EAAA,EAAD,CAAQrC,QAAQ,YAAYsC,MAAO,UAAWjD,MAAO,CAACC,MAAM,SAA5D,cAEJ,gBAACT,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGW,GAAI,EAAGwC,GAAI,GACzB,gBAACC,EAAA,EAAD,CAAQrC,QAAQ,YAAYsC,MAAO,UAAWjD,MAAO,CAACC,MAAM,SAA5D,e,GAd+BmB,a,GCKPA,Y,OC+B7B8B,G,iMAhCP,IAAIC,EAAUzG,KAAKmC,MAAMkD,QAAX,KACVqB,EAAU1G,KAAKmC,MAAMkD,QAAX,KACVsB,EAAW3G,KAAKmC,MAAMkD,QAAX,MACXuB,EAAU5G,KAAKmC,MAAMkD,QAAX,KAEd,MAAM,GAAN,OAAUoB,EAAV,YAAqBC,EAArB,YAAgCC,EAAhC,YAA4CC,K,+BAI5C,OACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAAChE,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,IACX,kBAAC,IAAD,CAAc8C,MAAO,CAAC,CAACe,SAAS,iFAAkFb,gBAAgB,EAAOC,sBAAsB,EAAOa,gBAAgB,KAE1L,kBAAClE,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,IACVlD,KAAK8F,eAEV,kBAAChD,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAf,IACMlD,KAAKmC,MAAMkD,QAAX,YAEN,kBAACvC,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAG+D,MAAO,SACpBjH,KAAKmC,MAAMkD,QAAX,gB,GAzBXX,IAAMwC,Y,qLCOFC,cAAH,KAAnB,IAgDeC,E,kDAxCX,WAAYjF,GAAQ,IAAD,8BACf,cAAMA,IAED1C,MAAQ,CACT4H,WAAW,IAJA,E,sEAQOvG,GACtB,GAAI,SAAUA,EAAUwG,cAAgB,UAAWxG,EAAUwG,aAAc,CACvE3F,QAAQC,IAAI,UACZ,IAFuE,EAEnEyF,EAAa,GAFsD,cAIjDvG,EAAUuG,YAJuC,IAIvE,2BAA4C,CAAC,IAApCE,EAAmC,QACpCzG,EAAUwG,aAAV,KAA+BE,SAASD,EAAS,OAC7CzG,EAAUwG,aAAV,MAAgCE,SAASD,EAAS,QAClDF,EAAW1G,KAAK4G,IAP2C,8BAWvEvH,KAAKoB,SAAS,CAACiG,WAAYA,SAE3BrH,KAAKoB,SAAS,CAACiG,WAAWvG,EAAUuG,e,+BAKxC,OAAQ,gBAACvE,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GAC7B,gBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,IACVlD,KAAKP,MAAM4H,WAAWpG,OAAS,YAEnCjB,KAAKP,MAAM4H,WAAW3E,KAAI,SAAA6E,GAAS,OACjC,gBAACzE,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIW,GAAI,EAAGwC,GAAI,GAC1B,gBAAC,EAAD,CAAKhB,QAASkC,a,GAlCX7C,a,wHChBHA,Y,iBC+GJ+C,G,kDA9GX,WAAYtF,GAAQ,IAAD,sBACf,cAAMA,GACN,IAFe,EAEXuF,EAAoB,GAFT,cAIG,EAAKvF,MAAMwF,SAJd,IAIf,IAAI,EAAJ,qBAAqC,CACjCD,EADiC,UACL,GALjB,qCAQf,EAAKjI,MAAL,aACI,cAAc,GACXiI,GAGP,EAAKE,UAAY,EAAKA,UAAUrI,KAAf,gBACjB,EAAKsI,eAAiB,EAAKA,eAAetI,KAApB,gBAdP,E,uDAkBf,OAAOS,KAAKmC,MAAM2F,Q,kCAIlB,IADO,EACHC,EAAkB,GADf,cAGY/H,KAAKmC,MAAMwF,SAHvB,IAGP,2BAAsC,CAAC,IAA9BK,EAA6B,QAC9BhI,KAAKP,MAAMuI,IACXD,EAAgBpH,KAAKqH,IALtB,8BASP,OAAOD,I,gDAGejH,GAGtB,GAFqBA,EAAU6G,QAAQ1G,QAAUjB,KAAKmC,MAAMwF,QAAQ1G,OAEjD,CACf,IADe,EACXgB,EAAW,CAEfA,cAAyB,GAHV,cAKInB,EAAU6G,SALd,IAKf,2BAAsC,CAClC1F,EADkC,UACf,GANR,8BASfjC,KAAKoB,SAAL,eAAkBa,O,gCAIhBZ,GACN,IADY,EACR4G,EAAoB5G,EAAMG,OAC1B0G,EAAwBD,EAAkBE,QAC1ClG,EAAQ,eAAOjC,KAAKP,OAHZ,cAKMO,KAAKmC,MAAMwF,SALjB,IAKZ,IAAI,EAAJ,qBAAqC,CAAC,IAA9BK,EAA6B,QAC7BC,EAAkBE,QAClBlG,EAAS+F,IAAU,EAEnB/F,EAAS+F,IAAU,GATf,8BAaZ/F,EAAS,cAAgBiG,EACzBlI,KAAKoB,SAASa,EAAUjC,KAAKmC,MAAMiB,Y,qCAGxB/B,EAAOF,GAElB,IAAIiH,EAAW/G,EAAMG,OACjBS,EAAQ,eAAOjC,KAAKP,OACxBwC,EAASd,GAAQiH,EAASD,QAE1B,IANuB,EAMnBP,GAAY,EANO,cAQL5H,KAAKmC,MAAMwF,SARN,IAQvB,IAAI,EAAJ,qBAAqC,CAC7B1F,EAD6B,WAE7B2F,GAAY,IAVG,8BAcvB3F,EAAS,cAAgB2F,EAEzB5H,KAAKoB,SAASa,EAAUjC,KAAKmC,MAAMiB,UACnCzB,QAAQC,KAAKwG,EAASD,QAAQ,SAAS,cAAgBhH,K,+BAGlD,IAAD,OACAkH,EAAa,aAAOrI,KAAKmC,MAAMwF,SACnCU,EAAcC,OAEd,IAAIC,EAAcF,EAAcpH,OAAS,GAEzC,OACI,kBAAC6B,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,IACX,kBAACsF,GAAA,EAAD,CAAUL,QAASnI,KAAKP,MAAM,cAAe8G,MAAO,UAAWnD,SAAUpD,KAAK4H,YADlF,OAIIS,EAAc3F,KAAI,SAAAO,GAAI,OAClB,kBAACH,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAIqF,EAAY,EAAE,IACzB,kBAACC,GAAA,EAAD,CAAUL,QAAS,EAAK1I,MAAMwD,GAAOsD,MAAO,UAClCnD,SAAU,SAAC/B,GAAD,OAAW,EAAKwG,eAAexG,EAAO4B,MAASA,W,GAtGtEyB,IAAMwC,WCsDhBuB,G,kDApDX,WAAYtG,GAAQ,IAAD,8BACf,cAAMA,IAED1C,MAAQ,CACT,IAAM,GACN,IAAM,IALK,E,8DASD4B,EAAOqH,GACrB,IAAIzG,EAAW,GAEfA,EAASyG,GAAiBrH,EAAMG,OAAO3B,MAEvCG,KAAKoB,SAASa,EAAUjC,KAAKmC,MAAMiB,Y,kCAInC,MAAO,CAAC,IAAMpD,KAAKP,MAAMkJ,IAAK,IAAM3I,KAAKP,MAAMmJ,O,oCAI/C,YAA8BC,GAAvB7I,KAAKmC,MAAM2G,SAAsB,MAAM9I,KAAKmC,MAAM2G,W,oCAIzD,YAA8BD,GAAvB7I,KAAKmC,MAAM4G,SAAsB,MAAM/I,KAAKmC,MAAM4G,W,kCAIzD,YAA4BF,GAArB7I,KAAKmC,MAAM6G,OAAoB,KAAKhJ,KAAKmC,MAAM6G,S,+BAGjD,IAAD,OACJ,OACI,kBAAClG,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACX,kBAACa,EAAA,EAAD,CAAWlE,MAAOG,KAAKP,MAAL,IAAmBuE,MAAOhE,KAAKiJ,cACtChF,QAAQ,WAAWO,KAAM,QAASpB,SAAU,SAAC/B,GAAD,OAAW,EAAK6H,kBAAkB7H,EAAO,WAEpG,kBAACyB,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAG+D,MAAO,UACpBjH,KAAKmJ,aAEV,kBAACrG,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACX,kBAACa,EAAA,EAAD,CAAWlE,MAAOG,KAAKP,MAAL,IAAmBuE,MAAOhE,KAAKoJ,cACtCnF,QAAQ,WAAWO,KAAM,QAASpB,SAAU,SAAC/B,GAAD,OAAW,EAAK6H,kBAAkB7H,EAAO,gB,GA9C1FqD,IAAMwC,W,kDCqHjBmC,I,yDA/GX,WAAYlH,GAAQ,IAAD,8BACf,cAAMA,IAED1C,MAAQ,CAAC6J,QAAQ,IACtB,EAAKC,eAAiB,EAAKA,eAAehK,KAApB,gBACtB,EAAKiK,aAAe,EAAKA,aAAajK,KAAlB,gBALL,E,6DASF8B,EAAOoI,GACpB,IAAIC,EAAeD,EAAc,UAC7BxH,EAAW,GACfA,EAASyH,IAAiB1J,KAAKP,MAAMiK,GAErC1J,KAAKoB,SAASa,K,gDAGQnB,GACtBd,KAAKoB,SAAS,CAACkI,QAAQxI,EAAUwI,Y,qCAGtBjI,EAAOoI,GAClB9H,QAAQC,IAAI,kBACZ,IAF8B,EAE1BK,EAAQ,eAAOjC,KAAKP,OAFM,cAIZwC,EAASqH,SAJG,IAI9B,IAAI,EAAJ,qBAAmC,CAAC,IAA5B/G,EAA2B,QAG/B,GAFwC,QAAlBA,EAAM,MAAsB,qBAAsBA,GAAU,mBAAoBA,EAElF,CAChB,IADgB,EACZoH,EAAkBpH,EAAM,iBACxBqH,EAAgBrH,EAAM,eAEtBwF,EAAkB/H,KAAK6J,SAASF,GAAiBG,YACjDC,EAAa,IAAIC,IALL,cAOUjC,GAPV,IAOhB,IAAI,EAAJ,qBAA0C,CACtC6B,EADsC,SACRK,QAAQF,EAAWG,IAAKH,IAR1C,8BAWhBxH,EAAM,QAAc4H,MAAMC,KAAKL,KAlBT,8BAsB9B/J,KAAKoB,SAASa,EAAUjC,KAAKmC,MAAMiB,Y,wCAInC,IAAIiH,EAAS,GAEb,IAAI,IAAIvC,KAAS9H,KAAK6J,SAClBQ,EAAOvC,GAAS9H,KAAK6J,SAAS/B,GAAOgC,YAGzC,OAAOO,I,mCAGE9H,EAAQ+H,GAAa,IAAD,OACzBC,EAAkBvK,KAAKP,MAAM6J,QAAQrI,OAAS,EAC9CuJ,EAAajI,EAAM,KACnBkI,OAAkB5B,EAQtB,MANkB,QAAd2B,EACAC,EAAkB,kBAAC,GAAD,iBAAgBlI,EAAhB,CAAwBmI,IAAK,SAAAC,GAAS,OAAI,EAAKd,SAAStH,EAAM,OAAaoI,GAAWvH,SAAU,SAAC/B,GAAD,OAAW,EAAKkI,eAAelI,EAAOkB,EAAM,WAC1I,SAAdiI,IACNC,EAAkB,kBAAC,GAAD,iBAAiBlI,EAAjB,CAAyBmI,IAAK,SAAAC,GAAS,OAAI,EAAKd,SAAStH,EAAM,OAAaoI,GAAWvH,SAAU,SAAC/B,GAAD,OAAW,EAAKkI,eAAelI,EAAOkB,EAAM,YAI/J,kBAAC,IAAMqI,SAAP,KACI,kBAAC9H,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAI2H,UAAW,aAC1B,kBAAC/H,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,IACX,0BAAM2H,UAAW,gBAAiBtI,EAAM,QAE5C,kBAACO,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAG+D,MAAM,SACpB,kBAAC6D,GAAA,EAAD,CAAYC,QAAS,SAAC1J,GAAD,OAAW,EAAK2J,iBAAiB3J,EAAOkB,EAAM,SAC9DvC,KAAKP,MAAM8C,EAAM,MAAY,WAAY,kBAAC,KAAD,MAAgB,kBAAC,KAAD,SAItE,kBAAC0I,GAAA,EAAD,CAAUC,GAAIlL,KAAKP,MAAM8C,EAAM,MAAY,YACtCkI,IAILH,GAAeC,EAEP,kBAACzH,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,IACX,wBAAI2H,UAAW,oBAEnB,Q,+BAWpB,OAJAlJ,QAAQC,IAAI,UACZD,QAAQC,IAAI5B,KAAKP,OACjBO,KAAK6J,SAAW,GAGZ,kBAAC/G,EAAA,EAAD,CAAMC,WAAS,EAAC8H,UAAW,uBAEnB7K,KAAKP,MAAM6J,QAAQ5G,IAAI1C,KAAKwJ,mB,GAzG3B9E,IAAMwC,Y,6BCoCZiE,G,kDAvCX,WAAYhJ,GAAQ,uCACVA,G,uDAGCtB,GAGP,OAFaA,EAAIuK,QAAQ,IAAI,KAGxBC,cACAC,MAAM,KACN5I,KAAI,SAAA6I,GAAI,OAAIA,EAAKC,OAAO,GAAGC,cAAgBF,EAAKG,MAAM,MACtDC,KAAK,O,+BAGL,IAAD,OACJ,OACA,kBAACrG,EAAA,EAAD,CAAOhC,MAAO,CAACQ,QAAQ,KACnB,kBAAChB,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAI+D,MAAO,SACtB,kBAAC6D,GAAA,EAAD,CAAYvE,MAAM,YAAYwE,QAAS/K,KAAKmC,MAAMyJ,sBAC9C,kBAAC,KAAD,QAIJnI,OAAOC,KAAK1D,KAAKmC,MAAM0J,QAAQnJ,KAAI,SAAAoJ,GAAK,OACpC,kBAAC,IAAMlB,SAAP,KACI,kBAAC9H,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACd,EAAK6I,WAAWD,IAEjB,kBAAChJ,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACV,EAAKf,MAAM0J,OAAOC,c,GA/BxBpH,IAAMwC,WCiPlB8E,G,kDApMX,WAAY7J,GAAQ,IAAD,8BACf,cAAMA,IAED1C,MAAL,aACIgB,gBAAgB,IACb,EAAKR,iBAFZ,CAGIgM,aAAa,KAGjB,EAAKC,aAAe,EAAKA,aAAa3M,KAAlB,gBACpB,EAAK4M,WAAa,EAAKA,WAAW5M,KAAhB,gBAClB,EAAK6M,UAAY,EAAKA,UAAU7M,KAAf,gBACjB,EAAK8M,MAAQ,EAAKA,MAAM9M,KAAX,gBACb,EAAK+M,kBAAoB,EAAKA,kBAAkB/M,KAAvB,gBAbV,E,6DAxCf,MAAO,CACHgN,aAAa,OACblM,cAAc,GACdmM,oBAAmB,EAEnBC,eAAe,OACfC,sBAAqB,EAErB9M,eAAe,CACX,QAAU,CACNC,MAAO,GACPC,OAAO,GAEX,eAAe,CACXD,MAAO,GACPC,OAAO,GAEX,kBAAkB,CACdD,MAAO,GACPC,OAAO,GAEX,eAAe,CACXD,MAAO,GACPC,OAAO,GAEX,cAAc,CACVD,MAAO,GACPC,OAAO,IAGfC,iBAAiB,CACb,IAAM,CACFF,MAAO,GACPC,OAAO,IAGfU,qBAAoB,O,+DAoBFM,GACtB,IAAIL,EAAkB,GAItB,IAAK,IAAIkM,KAFTlM,EAAgBE,KAAK,kBAACC,EAAA,EAAD,CAAUf,MAAO,QAAjB,yBAEEiB,EAAU8L,iBAC7BnM,EAAgBE,KAAK,kBAACC,EAAA,EAAD,CAAUf,MAAO8M,GAAaA,IAGvD3M,KAAKoB,SAAS,CAACX,gBAAgBA,M,sCAGnBY,EAAOC,GACnB,IAAIC,EAAWF,EAAMG,OAAO3B,MACxB4B,EAAUC,MAAMH,GAGpB,GAFAI,QAAQC,IAAIH,GAERH,KAActB,KAAKP,MAAMG,eAAe,CACxC,IAAIiC,EAAiB,eAAO7B,KAAKP,MAAMG,gBACvCiC,EAAkBP,GAAe,CAC7BzB,MAAM0B,EACNzB,MAAM2B,GAGVzB,KAAKoB,SAAS,CAACxB,eAAeiC,SAC5B,GAAIP,KAActB,KAAKP,MAAMM,iBAAiB,CAChD,IAAI+B,EAAmB,eAAO9B,KAAKP,MAAMM,kBACzC+B,EAAoBR,GAAc,CAC9BzB,MAAM0B,EACNzB,MAAM2B,GAEVzB,KAAKoB,SAAS,CAACrB,iBAAiB+B,O,mCAI3BT,GACT,IAAIwL,EAAmBxL,EAAMG,OAAO3B,MAEhC2M,GAAqB,EAED,QAApBK,IACAL,GAAqB,GAGzB,IAAInM,EAAgB,GACpBA,EAAcM,KAAK,kBAACC,EAAA,EAAD,CAAUf,MAAO,QAAjB,uBAVJ,oBAYKG,KAAKmC,MAAMyK,iBAAiBC,IAZjC,IAYf,IAAI,EAAJ,qBAAmE,CAAC,IAA5DC,EAA2D,QAC/DzM,EAAcM,KAAK,kBAACC,EAAA,EAAD,CAAUf,MAAOiN,GAAWA,KAbpC,8BAgBf9M,KAAKoB,SAAS,CACVqL,eAAeI,EACfN,aAAa,OACbC,mBAAoBA,EACpBnM,cAAcA,M,iCAIXgB,GACP,IAAI0L,EAAc1L,EAAMG,OAAO3B,MAE/BG,KAAKoB,SAAS,CACVmL,aAAeQ,EACfvM,qBAAoB,M,kDAIA,IAAD,OACnBwM,GAAe,EAcnB,OAZAvJ,OAAOC,KAAK1D,KAAKP,MAAMG,gBAAgBqK,SAAQ,SAACpJ,GACxC,EAAKpB,MAAMG,eAAeiB,GAAKf,QAC/BkN,GAAe,MAIvBvJ,OAAOC,KAAK1D,KAAKP,MAAMM,kBAAkBkK,SAAQ,SAACpJ,GAC1C,EAAKpB,MAAMM,iBAAiBc,GAAKf,QACjCkN,GAAe,MAIhBA,I,gCAGD3L,GACN,IAAI4L,EAAc,GAGlB,IAFmBjN,KAAKkN,4BAEL,CACfD,EAAW,OAAajN,KAAKP,MAAMgN,eACnCQ,EAAW,KAAWjN,KAAKP,MAAM8M,aACjCU,EAAW,QAAcjN,KAAKP,MAAMG,eAAX,QAAqCC,MAC9DoN,EAAY,gBAAkBjN,KAAKP,MAAMG,eAAe,gBAAgBC,MACxEoN,EAAY,mBAAqBjN,KAAKP,MAAMG,eAAe,mBAAmBC,MAC9EoN,EAAY,gBAAkBjN,KAAKP,MAAMG,eAAe,gBAAgBC,MACxEoN,EAAY,eAAiBjN,KAAKP,MAAMG,eAAe,eAAeC,MACtEoN,EAAW,IAAUjN,KAAKP,MAAMM,iBAAX,IAAmCF,MAExD,IAAIsN,EAAkBnN,KAAKP,MAAMwM,aACjCkB,EAAgBxM,KAAKsM,GAErBjN,KAAKoB,SAAS,CAAC6K,aAAckB,O,4BAI/B9L,GACFrB,KAAKoB,SAAL,eAAkBpB,KAAKC,qB,wCAGToB,EAAO+L,GACrB,IAAID,EAAkBnN,KAAKP,MAAMwM,aAEjCkB,EAAgBE,OAAOD,EAAkB,GAEzCpN,KAAKoB,SAAS,CAAC6K,aAAakB,M,+BAGvB,IAAD,OACJ,OACE,kBAACrK,EAAA,EAAD,CAAMC,WAAS,EAAC8H,UAAW,gCAAiC7H,QAAS,GACjE,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,IACX,kBAACC,EAAA,EAAD,CAAQC,SAAUpD,KAAKkM,aAAcrM,MAAOG,KAAKP,MAAMgN,eAAgBjJ,SAAUxD,KAAKP,MAAMiN,qBAAsBpJ,MAAO,CAACC,MAAM,SAC3HvD,KAAKP,MAAMgB,kBAGpB,kBAACqC,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,IACX,kBAACC,EAAA,EAAD,CAAQC,SAAUpD,KAAKmM,WAAYtM,MAAOG,KAAKP,MAAM8M,aAAc/I,SAAUxD,KAAKP,MAAM+M,mBAAoBlJ,MAAO,CAACC,MAAM,SACrHvD,KAAKP,MAAMY,gBAGnBoD,OAAOC,KAAK1D,KAAKP,MAAMG,gBAAgB8C,KAAI,SAAAiB,GAAkB,OACtD,kBAACb,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGU,GAAI,EAAGC,GAAI,EAAGP,MAAO,CAACQ,QAAQ,KAAK,kBAACC,EAAA,EAAD,CAAWP,UAAW,EAAK/D,MAAMe,oBACtBwD,MAAOL,EACPM,QAAQ,WACRb,SAAU,SAAC/B,GAAD,OAAW,EAAK6C,gBAAgB7C,EAAOsC,IACjD7D,MAAS,EAAKL,MAAMG,eAAe+D,GAAoB7D,MACvDqE,WAAY,EAAK1E,MAAMG,eAAe+D,GAAoB7D,MAAM,gBAAgB,GAChFD,MAAO,EAAKJ,MAAMG,eAAe+D,GAAoB9D,MACrDuE,WAAY,CACRC,eAAgB,kBAACC,EAAA,EAAD,CAAgBC,SAAS,SAAzB,MAGpBC,KAAM,cAK7Ef,OAAOC,KAAK1D,KAAKP,MAAMM,kBAAkB2C,KAAI,SAAA+B,GAAoB,OAC1D,kBAAC3B,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGU,GAAI,EAAGC,GAAI,EAAGP,MAAO,CAACQ,QAAQ,KAAK,kBAACC,EAAA,EAAD,CAAWP,UAAW,EAAK/D,MAAMe,oBACtBwD,MAAOS,EACPR,QAAQ,WACRb,SAAU,SAAC/B,GAAD,OAAW,EAAK6C,gBAAgB7C,EAAOoD,IACjD3E,MAAS,EAAKL,MAAMM,iBAAiB0E,GAAsB3E,MAC3DqE,WAAY,EAAK1E,MAAMM,iBAAiB0E,GAAsB3E,MAAM,gBAAgB,GACpFD,MAAO,EAAKJ,MAAMM,iBAAiB0E,GAAsB5E,MACzDuE,WAAY,CACRC,eAAgB,kBAACC,EAAA,EAAD,CAAgBC,SAAS,SAAzB,MAEpBC,KAAM,cAK9E,kBAAC1B,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAII,MAAO,CAACsC,UAAU,WACjC,kBAACU,EAAA,EAAD,CAAQrC,QAAQ,YAAYsC,MAAO,UAAWwE,QAAS/K,KAAKoM,WAA5D,OACA,kBAAC9F,EAAA,EAAD,CAAQrC,QAAQ,YAAYsC,MAAO,YAAawE,QAAS/K,KAAKqM,MAAO/I,MAAO,CAACgK,WAAW,KAAxF,UAGAtN,KAAKP,MAAMwM,aAAavJ,KAAI,SAACuK,EAAaG,GAAd,OACxB,kBAACtK,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,IACX,kBAAC,GAAD,CAAc2I,OAAQoB,EAAarB,qBAAsB,SAACvK,GAAD,OAAW,EAAKiL,kBAAkBc,e,GAtOhG1I,IAAMwC,WCmHZqG,G,kDApHX,WAAYpL,GAAQ,IAAD,uBACf,cAAMA,IAEDqL,aAAe,EAAKA,aAAajO,KAAlB,gBACpB,EAAKkO,UAAY/I,IAAMgJ,YAEvB,EAAKjO,MAAQ,CACTkO,iBAAiB,EACjBrE,QAAQ,GACRsD,iBAAiB,GACjBvF,WAAW,IAVA,S,yDAcNhG,EAAOuM,GAChB5N,KAAKoB,SAAS,CAACuM,iBAAiBC,M,gDAGV9M,GAGtB,GAFgBd,KAAKP,MAAM4H,WAAWpG,QAAUH,EAAUuG,WAAWpG,OAEtD,CAKX,IAJA,IAAI4M,EAAQ,IAAI7D,IACZ8D,EAAmB,GACnBC,EAAS,IAAI/D,IAERjJ,EAAI,EAAGA,EAAID,EAAUuG,WAAWpG,OAAQF,IAAK,CAClD,IAAIwG,EAAYzG,EAAUuG,WAAWtG,GACjC+D,EAAOyC,EAAS,KAChBxC,EAAQwC,EAAS,MAErBsG,EAAM3D,IAAIpF,GACViJ,EAAO7D,IAAInF,GACLD,KAAQgJ,IACVA,EAAiBhJ,GAAQ,IAAIkF,IAC7B8D,EAAiBhJ,GAAMoF,IAAInF,IAInC,IAAIuE,EAAU,CACV,CACI,MAAS,OACT,KAAQ,OACR,QAAWa,MAAMC,KAAKyD,IAE1B,CACI,MAAS,QACT,KAAQ,OACR,iBAAoB,OACpB,eAAkBC,EAClB,QAAW3D,MAAMC,KAAK2D,IAE1B,CACI,MAAS,OACT,KAAQ,QACR,SAAY,MACZ,SAAY,OAEhB,CACI,MAAS,UACT,KAAQ,QACR,SAAY,MACZ,SAAY,OAEhB,CACI,MAAS,aACT,KAAQ,QACR,SAAY,MACZ,SAAY,QAIhBnB,EAAmB,GACnBoB,EAAuB,GAC3BlN,EAAUE,QAAQiJ,SAAQ,SAAA/I,GACtB8M,EAAqB9M,EAAM,IAAUA,EAAM,QAG/CJ,EAAUwB,eAAe2H,SAAQ,SAAAzH,GAC7B,IAAImK,EAAaqB,EAAqBxL,EAAa,WAE7CmK,KAAcC,IAChBA,EAAiBD,GAAc,IAGnCC,EAAiBD,GAAYhM,KAAK6B,EAAa,SAGnDxC,KAAKoB,SAAS,CAACkI,QAASA,EAASsD,iBAAkBA,EAAkBvF,WAAWvG,EAAUuG,gB,wCAK9F,OAAOrH,KAAKyN,UAAUQ,QAAQC,oB,+BAI9B,OACA,kBAAC,IAAMtD,SAAP,KACI,kBAACuD,EAAA,EAAD,CAAMtO,MAAOG,KAAKP,MAAMkO,iBAAkBvK,SAAUpD,KAAKwN,cACrD,kBAACY,EAAA,EAAD,CAAKpK,MAAO,SAAU6G,UAAwC,GAA7B7K,KAAKP,MAAMkO,iBAAoB,eAAe,mBAC/E,kBAACS,EAAA,EAAD,CAAKpK,MAAO,SAAU6G,UAAwC,GAA7B7K,KAAKP,MAAMkO,iBAAoB,eAAe,oBAEnF,yBAAK9C,UAAwC,GAA7B7K,KAAKP,MAAMkO,iBAAoB,GAAG,QAC9C,kBAAC,GAAD,CAAQjD,IAAK1K,KAAKyN,UAAWnE,QAAStJ,KAAKP,MAAM6J,QACzClG,SAAUpD,KAAKmC,MAAMoH,kBAGjC,yBAAKsB,UAAwC,GAA7B7K,KAAKP,MAAMkO,iBAAoB,GAAG,QAC9C,kBAAC,GAAD,CAAQf,iBAAkB5M,KAAKP,MAAMmN,yB,GA9G7BlI,IAAMwC,WC6BxBmH,G,kDACF,aAAe,IAAD,8BACV,gBAEKC,aAAe5J,IAAMgJ,YAE1B,EAAKjO,MAAQ,CACT8O,QAAQ,GACRC,YAAY,GACZC,gBAAgB,GAChBC,mBAAmB,GACnBC,WAAW,EACXrH,aAAc,IAGlBsH,QAAQC,IAAI,ChBhDT3P,MAAM,GAAD,OAAIF,EAAJ,WgBgDkBC,IAAgBG,IAAoBD,MAAwB2P,MAAK,SAAAC,GAAS,OAAIH,QAAQC,IAAIE,EAAUrM,KAAI,SAAAsM,GAAQ,OAAIA,EAASC,cAAUH,MAAK,SAAAI,GACnK,IAAIX,EAAUW,EAAM,GAChBV,EAAcU,EAAM,GACpBT,EAAkBS,EAAM,GACxBR,EAAqBQ,EAAM,GAE/B,EAAK9N,SAAS,CAACmN,QAAQA,EAASC,YAAYA,EAAaC,gBAAgBA,EAAiBC,mBAAmBA,EAAoBC,WAAU,OAE9I,EAAKpF,eAAiB,EAAKA,eAAehK,KAApB,gBAtBZ,E,6DA0BVS,KAAKoB,SAAS,CAACkG,aAAatH,KAAKsO,aAAaL,QAAQC,sB,+BAItD,OACI,kBAAC,IAAMtD,SAAP,KACA,kBAAC,KAAD,CAAauE,QAAM,IACnB,kBAACrM,EAAA,EAAD,CAAMC,WAAS,EAACO,MAAO,CAACiC,gBAAgB,qBACpC,kBAACzC,EAAA,EAAD,CAAMG,MAAI,EAACmM,GAAI,EAAGlM,GAAI,IACtB,kBAACJ,EAAA,EAAD,CAAMG,MAAI,EAACmM,GAAI,GAAIlM,GAAI,IACnB,kBAACmM,EAAA,EAAD,CAAQ9K,SAAS,UACZvE,KAAKmC,MAAMmN,YACR,kBAAC,IAAM1E,SAAP,KACI,kBAACuD,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKpK,MAAM,SACX,kBAACoK,EAAA,EAAD,CAAKpK,MAAM,aAAaR,UAAQ,IAChC,kBAAC4K,EAAA,EAAD,CAAKpK,MAAM,cAAcR,UAAQ,IACjC,kBAAC4K,EAAA,EAAD,CAAKpK,MAAM,gBAAgBR,UAAQ,MAGvC,kBAAC+L,EAAA,EAAD,KACI,kBAACzE,GAAA,EAAD,CACI0E,aAAW,OACXC,gBAAc,cACdC,gBAAc,OACdpM,MAAO,CAAC,MAAQ,SAChByH,QAAS/K,KAAK2P,gBACd,kBAAC,IAAD,OAEJ,kBAAC,KAAD,CACIvN,GAAG,cACHwN,SAAU5P,KAAKP,MAAMmQ,SACrBC,aAAc,CACVC,SAAU,MACVC,WAAY,SAEhBC,aAAW,EACXC,gBAAiB,CACbH,SAAU,MACVC,WAAY,SAEhBG,KAAMC,QAAQnQ,KAAKP,MAAMmQ,UACzBQ,QAASpQ,KAAKqQ,WAEd,kBAACzP,EAAA,EAAD,aACA,kBAACA,EAAA,EAAD,mBACA,kBAACA,EAAA,EAAD,oBACA,kBAACA,EAAA,EAAD,0BAOxB,kBAACkC,EAAA,EAAD,CAAMG,MAAI,EAACmM,GAAI,EAAGlM,GAAI,IACtB,kBAACJ,EAAA,EAAD,CAAMG,MAAI,EAACW,GAAI,EAAGV,GAAI,IACtB,kBAACJ,EAAA,EAAD,CAAMG,MAAI,EAACY,GAAI,EAAGD,GAAI,EAAGV,GAAI,IAC1B,kBAAC,GAAD,CAAWwH,IAAK1K,KAAKsO,aAAcjH,WAAYrH,KAAKP,MAAM8O,QAASvN,QAAShB,KAAKP,MAAM+O,YAAalM,eAAgBtC,KAAKP,MAAMiP,mBAAoBnF,eAAgBvJ,KAAKuJ,kBAE3K,kBAACzG,EAAA,EAAD,CAAMG,MAAI,EAACY,GAAI,EAAGD,GAAI,EAAGV,GAAI,IACzB,kBAAC,EAAD,CAASmE,WAAYrH,KAAKP,MAAM8O,QAASjH,aAActH,KAAKP,MAAM6H,gBAEtE,kBAACxE,EAAA,EAAD,CAAMG,MAAI,EAACW,GAAI,EAAGV,GAAI,U,GAzFfwB,IAAMwC,WAgGdoJ,GAvGH,SAACnO,GACT,IAAMoO,EAAQC,cACRC,EAAOC,YAAcH,EAAMI,YAAYC,GAAG,OAEhD,OAAO,kBAAC,GAAD,CAAUtB,YAAamB,KCrBdN,QACW,cAA7BU,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1C,MAAK,SAAA2C,GACJA,EAAaC,gBAEdC,OAAM,SAAA7R,GACL6B,QAAQ7B,MAAMA,EAAM8R,a,67EE5HtBC,gBAAkBC,kEAAW,SAAAvB,GAAK,MAAK,CACzCwB,KAAM,CACFxM,gBAAiBgL,EAAMyB,QAAQC,QAAQC,KACvC3L,MAAOgK,EAAMyB,QAAQG,OAAOC,OAEhCC,KAAM,CACFxM,SAAU,OANMiM,CAQpBpM,6DAEE4M,eAAiBR,kEAAW,SAAAvB,GAAK,MAAK,CACxCgC,KAAM,CACF,qBAAsB,CAClBhN,gBAAiBgL,EAAMyB,QAAQQ,WAAWC,aAH/BX,CAMnBrM,2DAEEiN,eAAiB,SAACvQ,GACpB,IAAMoO,EAAQC,mEACRC,EAAOC,wEAAcH,EAAMI,YAAYC,GAAG,OAEhD,OAAO,iDAAC+B,oBAAD,eAAqBrD,YAAamB,GAAUtO,KAGvD,SAASyQ,aAAaC,GAClB,OAAiB,QAAVA,EAKX,SAASC,kBAAkBjT,GACvB,OAAIA,EAAQ,EACF,KAAN,OAAYkT,KAAKC,IAAInT,IAEf,IAAN,OAAWA,GAInB,SAASoT,GAAGC,KAAMC,QAASC,QAASC,OAAQC,MAExC,IAAIA,KAAwB,qBAATA,KAAwB,EAAIA,KAO/C,OAJAJ,KAAOK,KAAKL,MACZC,QAAUI,KAAKJ,SAGF,IAATD,MACSE,QAAUD,QAAUE,SAEnB,EAAIN,KAAKS,IAAI,EAAIN,KAAMC,UAAYD,KAAQE,SAAW,EAAGF,KAAOI,MAAQD,QAAUN,KAAKS,IAAI,EAAIN,KAAMC,SAIvH,SAASM,YAAY9G,EAAY3L,GAC7B,IAAI,IAAID,EAAI,EAAGA,EAAIC,EAAQC,OAAQF,IAC/B,GAAI4L,GAAc3L,EAAQD,GAAGI,KACzB,OAAOH,EAAQD,GAAGqB,GAG1B,OAAO,KAGJ,SAASsR,6BAA6BC,EAAcC,EAAYvM,GACnE,IAGIwM,EAHqBC,yBAAyB,EAAGH,EAAcC,EAAYvM,GACrD,GAE8BiE,MAAM,KAE9D,GAAIuI,EAAU5S,OAAS,EAAG,CAEtB,IAGI8S,EADqCD,wBAFrBD,EAAU,GAEkDF,EAAcC,EAAYvM,GAPtF,GAUpB,GAAc,aAAV0M,EACA,OAAOA,EAGf,OAAO,KAGX,SAASD,wBAAwBE,EAAkBL,EAAcC,EAAYvM,GACzE1F,QAAQC,IAAI,6BACZD,QAAQC,IAAIoS,GACZrS,QAAQC,IAAI+R,GACZhS,QAAQC,IAAIgS,GACZjS,QAAQC,IAAIyF,GAEZ,IAAIrG,EAAU4S,EAAW,GACrBtR,EAAiBsR,EAAW,GAC5BK,EAAcL,EAAW,GAEzBjH,EAAagH,EAAavT,eAAeuT,EAAazT,oBAAsB,GAC5E4M,EAAW6G,EAAajT,aAAaiT,EAAahU,kBAAoB,GAC1EgC,QAAQC,IAAI,gBAAkB+K,GAC9BhL,QAAQC,IAAI,cAAgBkL,GAG5B,IAAIoH,EAAU,YACVC,EAAW,YACXC,EAAO,YACPC,EAAkB,KAClBC,EAAqB,KACrBC,EAAWd,YAAY9G,EAAY3L,GAGvC,GAFAW,QAAQC,IAAI,cAAgB2S,GAEb,MAAZA,EAAiB,CAAC,IAAD,qMACSjS,GADT,IAChB,IAAI,EAAJ,qBAAwC,CAAC,IAAjCE,EAAgC,QACpC,GAAIA,EAAcC,WAAa8R,GAAY/R,EAAcrB,MAAQ2L,EAAS,CACtEwH,EAAqB9R,EAGjBd,MAAMc,EAAc0R,WACpBA,EAAUM,WAAWhS,EAAc0R,UAIvC,IAAIO,EAAUD,WAAWhS,EAAckS,UACnCC,EAAUH,WAAWhS,EAAcoS,UACvCT,EAAW,GAEX,IAAI,IAAIjB,EAAOuB,EAASvB,EAAOyB,EAASzB,GAAM,EAC1CiB,GAAYjB,EAAO,IAGvBiB,GAAYQ,EAEZ,QArBQ,8BAyBhB,IAAIE,EAASjC,aAAa4B,WAAWnN,EAAWwL,UAChDlR,QAAQC,IAAI,YAAciT,GA1BV,yMA4BMZ,GA5BN,IA4BhB,IAAI,EAAJ,qBAAkC,CAAC,IAA3Ba,EAA0B,QAC9B,GAAIA,EAAWrS,WAAa8R,GAAYO,EAAWC,SAAWF,GAAUC,EAAWE,SAAWH,GAAUC,EAAWlQ,MAAQqQ,SAAS5N,EAAWzC,MAAM,CAEjJwP,EAAOU,EAAWV,KAClBC,EAAkBS,EAClB,QAjCQ,+BAsCpBnT,QAAQC,IAAI,aAAesS,GAC3BvS,QAAQC,IAAI,cAAgBuS,GAC5BxS,QAAQC,IAAI,UAAYwS,GAExB,IAAIhB,EAAUoB,WAAWb,EAAa/T,eAAesV,QAAQrV,OAIzDsV,EAAW,YAEf,GAAsB,MAAlBd,GAAqC,aAAXH,EAAuB,CACjD,IAAIkB,EAAWf,EAAgBf,KAAKlI,QAAQ,MAAO,IAGnD,OAFAzJ,QAAQC,IAAI,cAAgBwT,GAErBA,EAAS/J,eACZ,IAAK,UACD8J,EAAW9N,EAAWgO,QAAUnB,EAAU7M,EAAWiO,WACrD,MACJ,IAAK,QACDH,EAAW9N,EAAWkO,MAASrB,EAAU7M,EAAWiO,WACpD,MACJ,IAAK,UACDH,EAAW9N,EAAWmO,QAAWtB,EAAU7M,EAAWiO,WACtD,MACJ,IAAK,QACDH,EAAW9N,EAAWoO,MAASvB,EAAU7M,EAAWiO,WAI5DH,EAAWpC,KAAK2C,MAAMP,GAG1BxT,QAAQC,IAAI,cAAgBuT,GAG5B,IAAIQ,EAAY,YAEhB,IAAyB,GAArB3B,GAAgC,aAANI,EAAmB,CAC7C,IAEIwB,EAAW3C,IAAIe,EAAmB,IAFvB,EACL,GACoD,GAAII,GAAOhB,EAAS,GAC9EyC,EAAWvB,EAAmBwB,UAC9BC,EAASH,GAAY,EAAIC,GAE7BlU,QAAQC,IAAI,cAAgBgU,GAC5BjU,QAAQC,IAAI,cAAgBiU,GAC5BlU,QAAQC,IAAI,YAAcmU,GAE1B,IAGIC,EAAiB,EACuC,IAAxDrC,EAAa/T,eAAe,mBAAmBC,OAAgB6B,MAAMiS,EAAa/T,eAAe,mBAAmBC,SACpHmW,EAAiBxB,WAAWb,EAAa/T,eAAe,mBAAmBC,QAG/E,IAAIoW,EAAc,EACuC,IAArDtC,EAAa/T,eAAe,gBAAgBC,OAAgB6B,MAAMiS,EAAa/T,eAAe,gBAAgBC,SAC9GoW,EAAczB,WAAWb,EAAa/T,eAAe,gBAAgBC,QAGzE,IAAIqW,EAAc,EACuC,IAArDvC,EAAa/T,eAAe,gBAAgBC,OAAgB6B,MAAMiS,EAAa/T,eAAe,gBAAgBC,SAC9GqW,EAAc1B,WAAWb,EAAa/T,eAAe,gBAAgBC,QAGzE,IAAIsW,EAAW,EACyC,IAApDxC,EAAa/T,eAAe,eAAeC,OAAgB6B,MAAMiS,EAAa/T,eAAe,eAAeC,SAC5GsW,EAAW3B,WAAWb,EAAa/T,eAAe,eAAeC,QAGrE8B,QAAQC,IAAI,oBAAsBoU,GAClCrU,QAAQC,IAAI,iBAAmBqU,GAC/BtU,QAAQC,IAAI,iBAAmBsU,GAC/BvU,QAAQC,IAAI,cAAgBuU,GAE5B,IAAIC,EAAUL,EA5BD,EACF,EA2B4BC,EAAiBC,EAAcC,EACtEvU,QAAQC,IAAI,aAAewU,GAE3B,IAAIC,EAAe,EAE4B,IAA3C1C,EAAa5T,iBAAiBuW,IAAIzW,OAAgB6B,MAAMiS,EAAa5T,iBAAiBuW,IAAIzW,SAC1F8B,QAAQC,IAAI+R,EAAa5T,iBAAiBuW,IAAIzW,OAC9CwW,EAAe7B,WAAWb,EAAa5T,iBAAiBuW,IAAIzW,OAAS,KAGzE8B,QAAQC,IAAI,kBAAoByU,GAEhC,IAAIE,EAAUH,GAAS,EAAEC,GAAgBF,EACzCxU,QAAQC,IAAI,aAAe2U,GAGvBZ,EADAY,EAAUlP,EAAWiO,WAAaH,EACtBoB,EAAUlP,EAAWiO,WAErBH,EAGhBQ,EAAY5C,KAAK2C,MAAMC,GAc3B,OAXAhU,QAAQC,IAAI,eAAiB+T,GAEb,aAAZR,IACAA,EAAWrC,kBAAkBqC,IAGhB,aAAbQ,IACAA,EAAY7C,kBAAkB6C,IAGlChU,QAAQC,IAAI,iCACL,CAAC+K,EAAYG,EAAqB,IAAVoH,EAAiB,IAAKC,EAAUC,EAAM,IAAMhB,EA1GhE,IA0G+E+B,EAAUQ,G,IAGlGhD,oB,6XACF,aAAe,IAAD,wMACV,gBAEK6D,gCAAiC,CAClC,SACA,OACA,UACA,WACA,OACA,UACA,OACA,QACA,UAGJ,EAAK/W,MAAQ,CACTgX,yBAAyB,GACzB5C,UAAU,EAAE,GAAG,GAAG,IAGtB,EAAK6C,oBAAsB,EAAKA,oBAAoBnX,KAAzB,iMApBjB,E,4OAuBWoX,EAAmBC,EAAehD,EAAYvO,GACnE,IAD2E,EACvEwR,EAA8B,GADyC,mMAG9CD,EAAcE,WAHgC,IAG3E,IAAI,EAAJ,qBAAqD,CAAC,IAAD,kMAA5C/V,EAA4C,KAAzC4S,EAAyC,KACjD,GAAG3T,KAAK+W,oBAAoBpD,GACxB,IAA6B,GAAzBgD,EAAkB5V,GAAS,CAC3B,IAAIiW,EAAqBlD,yBAAyB,EAAGH,EAAcC,EAAYvO,GAE3EwO,EAAYmD,EADU,GAC8B1L,MAAM,KAE9D,GAAIuI,EAAU5S,OAAS,EAAG,CAEtB,IAAIgW,EAAgBpD,EAAU,GAC9B7T,KAAKP,MAAMoU,UAAU9S,GAAKkW,EAE1BJ,EAA4BlW,KAAKmT,wBAAwBmD,EAAetD,EAAcC,EAAYvO,SAElGwR,EAA4BlW,KAAKqW,QAIrCH,EAA4BlW,KAAKmT,wBAAwB6C,EAAkB5V,GAAI4S,EAAcC,EAAYvO,KArB1C,8BA0B3E,OAAOwR,I,0CAGSlD,GAChB,OAA2C,GAApCA,EAAazT,qBAA8D,GAAlCyT,EAAahU,oB,0CAG7C0B,EAAO6V,GACvB,IAAIC,EAAc9V,EAAMG,OAAO3B,MAC3BgU,EAAY7T,KAAKP,MAAMoU,UAC3BA,EAAUqD,GAAeC,EAEzBnX,KAAKoB,SAAS,CAACyS,UAAUA,M,yCAGV4C,GAA0B,IAAD,OACxC,OACI,iDAAC,4CAAD,KACI,iDAAC,wDAAD,CAAOnT,MAAO,CAACiC,gBAAgB,uBAC3B,iDAAC,uDAAD,KACI,iDAAC,4DAAD,KACQ,iDAAC+M,eAAD,KACCtS,KAAKwW,gCAAgC9T,KAAI,SAAA0U,GAAM,OAC5C,iDAACvF,gBAAD,KAAkBuF,QAK1BX,EAAyB/T,KAAI,SAAC2U,EAAcH,GAAf,OACzB,iDAAC5E,eAAD,KAEQ+E,EAAa3U,KAAI,SAAC4U,EAAavV,GAG3B,GAF0B,GAEtBA,EAA6B,CAC7B,IAAIwV,EAAoB,GAMxB,OAJAD,EAAYhM,MAAM,KAAKrB,SAAQ,SAACkK,EAAUpS,GACtCwV,EAAkB5W,KAAK,iDAAC,2DAAD,CAAUd,MAAOsU,GAAWA,EAA5B,UAIvB,iDAACtC,gBAAD,KACI,iDAAC,yDAAD,CAAQzO,SAAU,SAAC/B,GAAD,OAAW,EAAKqV,oBAAoBrV,EAAO6V,IAAcrX,MAAO,EAAKJ,MAAMoU,UAAUqD,IAClGK,IAMjB,OACI,iDAAC1F,gBAAD,KACKyF,e,iCActCzX,EAAOkC,EAAOmV,GAAa,IAAD,OAGjC,GAF0B,GAEtBnV,EAA6B,CAC7B,IAAIwV,EAAoB,GAMxB,OAJA1X,EAAMyL,MAAM,KAAKrB,SAAQ,SAACkK,EAAUpS,GAChCwV,EAAkB5W,KAAK,iDAAC,2DAAD,CAAUd,MAAOsU,GAAWA,EAA5B,UAInB,iDAAC,yDAAD,CAAQ/Q,SAAU,SAAC/B,GAAD,OAAW,EAAKqV,oBAAoBrV,EAAO6V,IAAcrX,MAAOG,KAAKP,MAAMoU,UAAUqD,IAClGK,GAKb,OAAO,iDAAC,4CAAD,KACF1X,K,4CAIS4W,GAA0B,IAAD,SACvCe,EAAS,GAD8B,mMAGcf,EAAyBK,WAHvC,2NAGlCI,EAHkC,KAGrBO,EAHqB,KAIvCD,EAAO7W,KACH,iDAAC,uDAAD,CAAMsC,MAAI,EAACC,GAAI,IACX,iDAAC,wDAAD,CAAOI,MAAO,CAACiC,gBAAgB,uBAC3B,iDAAC,uDAAD,KACI,iDAAC,4DAAD,KACI,iDAAC+M,eAAD,KACI,iDAACT,gBAAD,aACA,iDAACA,gBAAD,gBAIJ4F,EAA+B/U,KAAI,SAACwC,EAAKnD,GAAN,OAC/B,iDAACuQ,eAAD,KACI,iDAACT,gBAAD,KAAkB,EAAK2E,gCAAgCzU,IACvD,iDAAC8P,gBAAD,KAAkB,EAAK6F,WAAWxS,EAAKnD,EAAOmV,aAf9E,IAAI,EAAJ,qBAA6F,IAHlD,8BA4B3C,OACI,iDAAC,4CAAD,KACI,iDAAC,uDAAD,CAAMnU,WAAS,EAACC,QAAS,GACpBwU,M,+BAQb,IAAIG,OAAmD9O,GAA5B7I,KAAKmC,MAAMyU,eAA8B5W,KAAKmC,MAAMyU,cAAc3V,OAAS,EAClGwV,EAA2BzW,KAAK4X,yBAAyB5X,KAAKP,MAAMoU,UAAW7T,KAAKmC,MAAMyU,cAAe5W,KAAKmC,MAAMyR,WAAY5T,KAAKmC,MAAMkD,SAE/I,OAAIsS,EACI3X,KAAKmC,MAAMmN,YACJtP,KAAK6X,mBAAmBpB,GAExBzW,KAAK8X,sBAAsBrB,GAG/B,S,GA3Le/R,8CAgMnBgO,uC","file":"static/js/main.464c7114.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","var domain = 'https://lender-filter-backend-test.herokuapp.com';\n\nfunction fetchCars(){\n    return fetch(`${domain}/cars/`);\n}\n\nfunction fetchLenders(){\n    return fetch(`${domain}/lenders/`);\n}\n\nfunction fetchLenderPrograms(){\n    return fetch(`${domain}/lenders/programs/`);\n}\n\nfunction fetchLenderTerms(){\n    return fetch(`${domain}/lenders/terms/`)\n}\n\n\nexport {fetchCars, fetchLenders, fetchLenderPrograms, fetchLenderTerms};","import * as React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Grid from \"@material-ui/core/Grid\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport {fetchCars, fetchLenders, fetchLenderPrograms, fetchLenderTerms} from \"./Api\";\n\nconst PLEASE_SELECT_INDEX = 0;\n\nexport default class LenderFilter extends React.Component{\n    constructor() {\n        super();\n        this.selectLenderEvent = this.selectLenderEvent.bind(this);\n        this.selectTierEvent = this.selectTierEvent.bind(this);\n        this.state = this.filterBeginningState();\n    }\n\n    textfieldsBeginningState(){\n        return {\n            selectedTierIndex:0,\n            currencyFields:{\n                \"Payment\":{\n                    value: \"\",\n                    error: false\n                },\n                \"Down Payment\":{\n                    value: \"\",\n                    error: false\n                },\n                \"Trade Allowance\":{\n                    value: \"\",\n                    error: false\n                },\n                \"Trade Payoff\":{\n                    value: \"\",\n                    error: false\n                },\n                \"Trace a.c.v\":{\n                    value: \"\",\n                    error: false\n                }\n            },\n            percentageFields:{\n                \"Tax\":{\n                    value: \"\",\n                    error: false\n                }\n            }\n        }\n    }\n\n    hasError(){\n        let currencyFields = this.state.currencyFields;\n        let percentageFields = this.state.percentageFields;\n\n        return currencyFields[\"Payment\"].error || currencyFields[\"Down Payment\"].error || currencyFields[\"Trade Allowance\"].error || currencyFields[\"Trade Payoff\"].error || currencyFields[\"Trace a.c.v\"].error || percentageFields[\"Tax\"].error;\n    }\n\n    filterBeginningState(){\n        let beginningState = {\n            selectedLenderIndex: 0,\n            selectedLenderImage: null,\n            allLenderNames:[],\n            tierMenuItems:[],\n            ...this.textfieldsBeginningState(),\n            isTierSelectEnabled:false,\n            isTextFieldsEnabled:false,\n            lenderMenuItems:[],\n            selectedTierIndex:0,\n            allTierNames:[]\n        };\n\n        beginningState.tierMenuItems.push(<MenuItem key={\"tier_please_select_item\"}value={PLEASE_SELECT_INDEX}>Please select tier</MenuItem>);\n\n        return beginningState;\n    }\n\n    componentWillReceiveProps(nextProps){\n        let lenderMenuItems = [];\n        let allLenderNames = [];\n\n        for(let i = 0; i < nextProps.lenders.length; i++){\n            let lender = nextProps.lenders[i];\n\n            lenderMenuItems.push(<MenuItem key={\"lender_name_\" + i} value={i+1}>{lender.name}</MenuItem>);\n            allLenderNames.push(lender.name);\n        }\n\n        this.setState({lenderMenuItems:lenderMenuItems, allLenderNames:allLenderNames});\n    }\n\n    textboxOnChange(event, fieldLabel){\n        let newValue = event.target.value;\n        let isError = isNaN(newValue);\n        console.log(isError);\n\n        if (fieldLabel in this.state.currencyFields){\n            let newCurrencyFields = {...this.state.currencyFields};\n            newCurrencyFields[fieldLabel] =  {\n                value:newValue,\n                error:isError\n            }\n\n            this.setState({currencyFields:newCurrencyFields});\n        }else if (fieldLabel in this.state.percentageFields){\n            let newPercentageFields = {...this.state.percentageFields};\n            newPercentageFields[fieldLabel] = {\n                value:newValue,\n                error:isError\n            }\n            this.setState({percentageFields:newPercentageFields})\n        }\n    }\n\n    selectLenderEvent(event){\n        let index = event.target.value;\n        let indexMinusOne = index - 1;\n\n        let newState = {};\n        newState.selectedLenderIndex = index;\n\n        let isPleaseSelectItemSelected = index == PLEASE_SELECT_INDEX;\n\n        // // Update lender logo\n        // if (isPleaseSelectItemSelected){\n        //     newState.selectedLenderImage = null;\n        //     newState.isTierSelectEnabled = false;\n        // }else{\n        //     newState.selectedLenderImage = this.lenders[indexMinusOne].img_url;\n        //     newState.isTierSelectEnabled = true;\n        // }\n\n        // Update tiers\n        if (!isPleaseSelectItemSelected){\n            let selectedLenderId = this.props.lenders[indexMinusOne].id;\n            let allTierOfSelectedLender = this.props.lenderPrograms.filter(lenderProgram  => lenderProgram.lender_id == selectedLenderId).map(lenderProgram => lenderProgram.name);\n            let newTierMenuItems = [];\n            newTierMenuItems.push(<MenuItem value={PLEASE_SELECT_INDEX}>Please select tier</MenuItem>);\n\n            for (let i = 0; i < allTierOfSelectedLender.length; i++) {\n                let itemValue = i + 1;\n\n                newTierMenuItems.push(<MenuItem value={itemValue}>{allTierOfSelectedLender[i]}</MenuItem>)\n            }\n\n            newState.tierMenuItems = newTierMenuItems;\n            newState.isTierSelectEnabled = true;\n            newState.allTierNames = allTierOfSelectedLender;\n        }\n\n        newState.selectedTierIndex = PLEASE_SELECT_INDEX;\n\n        this.setState(newState);\n    }\n\n    selectTierEvent(event){\n        let newState = {...this.textfieldsBeginningState()};\n\n        newState.selectedTierIndex = event.target.value;\n\n        let isPleaseSelectItemSelected = event.target.value == PLEASE_SELECT_INDEX;\n\n        if(isPleaseSelectItemSelected){\n            newState.isTextFieldsEnabled = false;\n        }else{\n            newState.isTextFieldsEnabled = true;\n        }\n\n        this.setState(newState);\n    }\n\n    reset(){\n        this.setState(this.filterBeginningState());\n    }\n\n    render(){\n        return (\n            <Grid container spacing={5}>\n                <Grid item xs={12}>\n                    <Select onChange={this.selectLenderEvent} value={this.state.selectedLenderValue} style={{width:'100%'}}>\n                        {this.state.lenderMenuItems}\n                    </Select>\n                </Grid>\n                {/*<Grid item xs={12} style={{textAlign:\"center\"}}>*/}\n                {/*    <img src={this.state.selectedLenderImage} {...this.state.selectedLenderImage == null? {style:{width:'150px', height:'150px', visibility:\"hidden\"}}:{style:{width:'150px', height:'150px'}}} />*/}\n                {/*</Grid>*/}\n                <Grid item xs={12}>\n                    <Select style={{width:'100%'}} disabled={!this.state.isTierSelectEnabled} value={this.state.selectedTierIndex} onChange={this.selectTierEvent}>\n                        {this.state.tierMenuItems}\n                    </Select>\n                </Grid>\n                {Object.keys(this.state.currencyFields).map(currencyFieldLabel => (\n                    <Grid item xs={6} sm={3} md={6} style={{padding:10}}><TextField disabled={!this.state.isTextFieldsEnabled}\n                                                         label={currencyFieldLabel}\n                                                         variant=\"outlined\"\n                                                         onChange={(event) => this.textboxOnChange(event, currencyFieldLabel)}\n                                                               error = {this.state.currencyFields[currencyFieldLabel].error}\n                                                               helperText={this.state.currencyFields[currencyFieldLabel].error?\"Invalid Value\":\"\"}\n                                                               value={this.state.currencyFields[currencyFieldLabel].value}\n                                                         InputProps={{\n                                                             startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n                                                         }\n                                                         }\n                                                         size={\"small\"}\n                    /></Grid>\n                        )\n                    )\n                }\n                {Object.keys(this.state.percentageFields).map(percentageFieldLabel => (\n                        <Grid item xs={6} sm={3} md={6} style={{padding:10}}><TextField disabled={!this.state.isTextFieldsEnabled}\n                                                             label={percentageFieldLabel}\n                                                             variant=\"outlined\"\n                                                             onChange={(event) => this.textboxOnChange(event, percentageFieldLabel)}\n                                                             error = {this.state.percentageFields[percentageFieldLabel].error}\n                                                                   helperText={this.state.percentageFields[percentageFieldLabel].error?\"Invalid Value\":\"\"}\n                                                             value={this.state.percentageFields[percentageFieldLabel].value}\n                                                             InputProps={{\n                                                                 startAdornment: <InputAdornment position=\"start\">%</InputAdornment>,\n                                                             }}\n                                                             size={\"small\"}\n                        /></Grid>\n                    )\n                )\n                }\n            </Grid>\n        )\n    }\n}","import LenderFilter from \"./LenderFilter\";\nimport * as React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport {fetchLenderPrograms, fetchLenders, fetchLenderTerms} from \"./Api\";\nimport TextField from \"@material-ui/core/TextField\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\n\nexport default class LendersFilter extends React.Component{\n    constructor() {\n        super();\n        this.clearFiltersOnClick = this.clearFiltersOnClick.bind(this);\n        this.lenderFilter1 = React.createRef();\n        this.lenderFilter2 = React.createRef();\n        this.lenderFilter3 = React.createRef();\n\n        this.state = {\n            lenders: [],\n            lenderPrograms: [],\n            lenderTerms: []\n        }\n\n        Promise.all([fetchLenders(), fetchLenderPrograms(), fetchLenderTerms()]).then(async([lenders, lenderPrograms, lenderTerms]) => {\n            const lendersJson = await lenders.json();\n            const lenderProgramsJson = await lenderPrograms.json();\n            const lenderTermsJson = await lenderTerms.json();\n\n            return [lendersJson, lenderProgramsJson, lenderTermsJson];\n        }).then(([lenders, lenderPrograms, lenderTerms]) => {\n            this.setState({lenders:lenders, lenderPrograms:lenderPrograms, lenderTerms:lenderTerms});\n        });\n    }\n\n    clearFiltersOnClick(event){\n        this.lenderFilter1.current.reset();\n        this.lenderFilter2.current.reset();\n        this.lenderFilter3.current.reset();\n    }\n\n    getFiltersInputs(){\n        return [this.lenderFilter1.current.state, this.lenderFilter2.current.state, this.lenderFilter3.current.state];\n    }\n\n    hasError(){\n        return this.lenderFilter1.current.hasError() || this.lenderFilter2.current.hasError() || this.lenderFilter3.current.hasError();\n    }\n\n    getLenderData(){\n        return [this.state.lenders, this.state.lenderPrograms, this.state.lenderTerms];\n    }\n\n    render(){\n        return (\n            <React.Fragment>\n                <Grid container direction={\"row\"} spacing={4}>\n                    <Grid item xs={12}>\n                        Customer Name: <TextField variant=\"outlined\" size={\"small\"}/>\n                    </Grid>\n                    <Grid item md={4}>\n                        <LenderFilter ref={this.lenderFilter1} lenders={this.state.lenders} lenderPrograms={this.state.lenderPrograms} lenderTerms={this.state.lenderTerms}/>\n                    </Grid>\n                    <Grid item md={4}>\n                        <LenderFilter ref={this.lenderFilter2} lenders={this.state.lenders} lenderPrograms={this.state.lenderPrograms} lenderTerms={this.state.lenderTerms}/>\n                    </Grid>\n                    <Grid item md={4}>\n                        <LenderFilter ref={this.lenderFilter3} lenders={this.state.lenders} lenderPrograms={this.state.lenderPrograms} lenderTerms={this.state.lenderTerms}/>\n                    </Grid>\n                    <Grid item xs={12} style={{textAlign:\"center\"}}>\n                        <Button variant=\"contained\" color=\"primary\" onClick={this.props.submitOnClick}>Submit</Button>\n                        <Button variant=\"contained\" color={\"secondary\"} onClick={this.clearFiltersOnClick} style={{marginLeft:10}}>Reset</Button>\n                    </Grid>\n                </Grid>\n            </React.Fragment>\n        )\n    }\n}","import * as React from \"react\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\n\nexport default class CarDescription extends React.Component {\n    getCarTitle() {\n        let year = this.getRowValue('YEAR');\n        let make = this.getRowValue('MAKE');\n        let model = this.getRowValue('MODEL');\n        let trim = this.getRowValue('TRIM');\n\n        return `${year} ${make} ${model} ${trim}`;\n    }\n\n    getRowValue(rowName){\n        let row = this.getRowWithName(rowName);\n\n        if (row != null){\n            return row.value;\n        }\n\n        return '';\n    }\n\n    getRowWithName(rowName){\n        let matches = this.props.details.filter(row => (row.name == rowName));\n\n        if (matches.length > 0){\n            return matches[0];\n        }\n\n        return null;\n    }\n    render() {\n        return (\n            <Paper style={{padding: \"20px\", backgroundColor: \"rgb(247, 248, 248)\"}}>\n                <Table>\n                    <TableRow>\n                        <TableCell colSpan={2} style={{textAlign: \"center\"}}><b\n                            style={{fontSize: \"1.2rem\"}}>{this.getCarTitle()}</b></TableCell>\n                    </TableRow>\n                    {this.props.details.map(row => (\n                        <TableRow>\n                            <TableCell style={{padding: \"0px\"}}>\n                                <b>{row.name}</b>\n                            </TableCell>\n                            <TableCell style={{padding: \"0px\"}}>\n                                {row.value}\n                            </TableCell>\n                        </TableRow>\n                    ))}\n                </Table>\n            </Paper>\n        )\n    }\n}","import * as React from \"react\";\nimport ImageGallery from 'react-image-gallery';\nimport 'react-image-gallery/styles/css/image-gallery.css';\nimport './CarImagesGallery.css';\n\nexport default class CarImagesGallery extends React.Component{\n    render(){\n        return (\n            <ImageGallery items={this.props.images} showPlayButton={false} showFullscreenButton={false}/>\n        );\n    }\n}","import * as React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\n\nexport default class CarShowElementButtons extends React.Component{\n    render(){\n        return <React.Fragment>\n            <Grid container spacing={1}>\n                <Grid item xs={6} md={2} lg={2}>\n                    <Button variant=\"contained\" color={\"primary\"} style={{width:\"100%\"}}>Save</Button>\n                </Grid>\n                <Grid item xs={6} md={2} lg={2}>\n                    <Button variant=\"contained\" color={\"primary\"} style={{width:\"100%\"}}>Pictures</Button>\n                </Grid>\n                <Grid item xs={6} md={2} lg={2}>\n                    <Button variant=\"contained\" color={\"primary\"} style={{width:\"100%\"}}>Breakdown</Button>\n                </Grid>\n                <Grid item xs={6} md={2} lg={2}>\n                    <Button variant=\"contained\" color={\"primary\"} style={{width:\"100%\"}}>Send</Button>\n                </Grid>\n            </Grid>\n        </React.Fragment>\n    }\n}","import * as React from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CarDescription from \"./CarDescription\";\nimport CarCalculation from \"./CarCalculation\";\nimport CarImagesGallery from \"./CarImagesGallery\";\nimport CarShowElementButtons from \"./CarShowElementButtons\";\nimport Grid from \"@material-ui/core/Grid\";\n\nexport default class CarShowElement extends React.Component{\n    excludeCarDetailFields(fieldName){\n        let excludedFields = ['id', 'images', 'img_url', 'x_clean', 'clean', 'average', 'rough', 'series'];\n\n        return excludedFields.includes(fieldName);\n    }\n\n    convertFieldNameToLabel(fieldName){\n        let convertDict = {\n            'total_cost': 'TOTAL COST'\n        }\n\n        if (fieldName in convertDict){\n            return convertDict[fieldName];\n        }\n\n        return fieldName\n    }\n\n    isCurrencyField(fieldName){\n        return ['total_cost'].includes(fieldName);\n    }\n    convertToCarDetails(carJson){\n        let result = [];\n        let currencySymbol = '$';\n\n        for(let key in carJson){\n            if (!this.excludeCarDetailFields(key)){\n                let name = this.convertFieldNameToLabel(key).toUpperCase();\n                let value = carJson[key];\n\n                if (this.isCurrencyField(key)){\n                    value = currencySymbol + value;\n                }\n\n                result.push({\n                    name: name,\n                    value: value\n                });\n            }\n        }\n\n        return result;\n    }\n\n    render() {\n        return (\n           <Card style={{width:\"100%\"}}>\n               <CardContent>\n                   <Grid container spacing={2}>\n                       <Grid item xs={12} lg={7}>\n                            <CarImagesGallery images={this.props.images}/>\n                       </Grid>\n                       <Grid item xs={12} lg={5}>\n                           <CarDescription details={this.convertToCarDetails(this.props.details)}/>\n                       </Grid>\n                       <Grid item xs={12}>\n                           <CarCalculation filtersInputs={this.props.filtersInputs} lenderData={this.props.lenderData} details={this.props.details}/>\n                       </Grid>\n                       <Grid item xs={12}>\n                           <CarShowElementButtons />\n                       </Grid>\n                   </Grid>\n               </CardContent>\n           </Card>\n        )\n    }\n}","import React from 'react';\nimport { Card } from '@material-ui/core';\nimport CardContent from '@material-ui/core/CardContent';\nimport Grid from \"@material-ui/core/Grid\";\nimport ImageGallery from \"react-image-gallery\";\n\nclass Car extends React.Component {\n    getCarTitle(){\n        let carYear = this.props.details['year'];\n        let carMake = this.props.details['make'];\n        let carModel = this.props.details['model'];\n        let carTrim = this.props.details['trim'];\n\n        return `${carYear} ${carMake} ${carModel} ${carTrim}`;\n    }\n\n    render(){\n        return (\n            <Card>\n                <CardContent>\n                    <Grid container>\n                        <Grid item xs={12}>\n                            <ImageGallery items={[{original:\"https://drive.google.com/uc?export=view&id=1PNPS_e8i8a_m2Owox2ncuuFWNotAbYh6\"}]} showPlayButton={false} showFullscreenButton={false} showThumbnails={false}/>\n                        </Grid>\n                        <Grid item xs={12}>\n                            {this.getCarTitle()}\n                        </Grid>\n                        <Grid item xs={6}>\n                            ${this.props.details['total_cost']}\n                        </Grid>\n                        <Grid item xs={6} align={\"right\"}>\n                            {this.props.details['mileage']}\n                        </Grid>\n                    </Grid>\n                </CardContent>\n            </Card>\n        )\n    }\n}\n\nexport default Car;","import * as React from \"react\";\nimport CarShowElement from \"./CarShowElement\";\nimport Grid from \"@material-ui/core/Grid\";\nimport {styled, useTheme} from \"@material-ui/core/styles\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport {css} from \"@emotion/core\";\nimport {ClipLoader} from \"react-spinners\";\nimport './CarShow.css';\nimport {fetchCars} from \"./Api\";\nimport InfiniteScroll from \"react-infinite-scroller\";\nimport {calculateProfitFirstInterest} from \"./CarCalculation\";\nimport Car from './Car.js';\n\nconst clipLoaderCss = css`\n    border-color:rgb(55,71,172);\n    position:absolute;\n    border-bottom-color:transparent;\n    top:50%;\n`;\n\nclass CarShow extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            carDetails:[]\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (\"Make\" in nextProps.filterValues && \"Model\" in nextProps.filterValues) {\n            console.log('Filter');\n            let carDetails = [];\n\n            for (let carDetail of nextProps.carDetails) {\n                if (nextProps.filterValues[\"Make\"].includes(carDetail[\"make\"])) {\n                    if (nextProps.filterValues[\"Model\"].includes(carDetail[\"model\"]))\n                        carDetails.push(carDetail);\n                }\n            }\n\n            this.setState({carDetails: carDetails});\n        }else{\n            this.setState({carDetails:nextProps.carDetails});\n        }\n    }\n\n    render() {\n        return (<Grid container spacing={2}>\n            <Grid item xs={12}>\n                {this.state.carDetails.length + \" matches\"}\n            </Grid>\n            {this.state.carDetails.map(carDetail => (\n               <Grid item xs={12} md={4} lg={3}>\n                   <Car details={carDetail}/>\n               </Grid>\n            ))}\n        </Grid>);\n    }\n}\n\nexport default CarShow;","import * as React from \"react\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Select from \"@material-ui/core/Select\";\n\nclass Sort extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            selectedCriteriaIndex: 0\n        }\n\n        this.sortCriteriaList = [\"Sort by (choose)\",\n                                \"Year (Latest -> Newest)\",\n                                \"Year (Newest -> Latest)\",\n                                \"Make\",\n                                \"Model\",\n                                \"Mileage (Lowest -> Highest)\",\n                                \"Mileage (Highest -> Lowest)\",\n                                \"Cost (Lowest -> Highest)\",\n                                \"Cost (Highest -> Lowest)\",\n                                \"Profit (Lowest -> Highest)\",\n                                \"Profit (Highest -> Lowest)\"]\n    }\n\n    selectCriteriaAtIndex(index){\n        this.setState(\n            {selectedCriteriaIndex:index}\n        )\n    }\n\n    getSelectedCriteriaIndex(){\n        return this.state.selectedCriteriaIndex;\n    }\n\n    getSelectedCriteriaName(){\n        return this.sortCriteriaList[this.state.selectedCriteriaIndex];\n    }\n\n    render(){\n        return (\n            <Select onChange={this.props.onSelect} value={this.state.selectedCriteriaIndex}>\n                {\n                    this.sortCriteriaList.map((sortCriteria, index) =>\n                        <MenuItem value={index}>{sortCriteria}</MenuItem>\n                    )\n                }\n            </Select>\n        );\n    }\n}\n\nexport default Sort;","import React from 'react';\nimport {Checkbox} from '@material-ui/core';\nimport Grid from '@material-ui/core/Grid';\n\nclass ListFilter extends React.Component{\n    constructor(props) {\n        super(props);\n        let optionCheckedDict = {};\n\n        for(let option of this.props.options){\n            optionCheckedDict[option] = true;\n        }\n\n        this.state = {\n            'Select All': true,\n            ...optionCheckedDict\n        };\n\n        this.selectAll = this.selectAll.bind(this);\n        this.optionOnchange = this.optionOnchange.bind(this);\n    }\n\n    getTitle(){\n        return this.props.title;\n    }\n\n    getValues(){\n        let selectedOptions = [];\n\n        for (let option of this.props.options){\n            if (this.state[option]){\n                selectedOptions.push(option);\n            }\n        }\n\n        return selectedOptions;\n    }\n\n    componentWillReceiveProps(nextProps){\n        let optionsChanged = nextProps.options.length != this.props.options.length;\n\n        if(optionsChanged) {\n            let newState = {};\n\n            newState['Select All'] = true;\n\n            for (let option of nextProps.options) {\n                newState[option] = true;\n            }\n\n            this.setState({...newState});\n        }\n    }\n\n    selectAll(event){\n        let selectAllCheckbox = event.target;\n        let selectedCheckboxState = selectAllCheckbox.checked;\n        let newState = {...this.state};\n\n        for(let option of this.props.options){\n            if (selectAllCheckbox.checked){\n                newState[option] = true;\n            }else {\n                newState[option] = false;\n            }\n        }\n\n        newState['Select All'] = selectedCheckboxState;\n        this.setState(newState, this.props.onChange);\n    }\n\n    optionOnchange(event, name){\n\n        let checkbox = event.target;\n        let newState = {...this.state};\n        newState[name] = checkbox.checked;\n\n        let selectAll = true;\n\n        for(let option of this.props.options){\n            if(!newState[option]){\n                selectAll = false;\n            }\n        }\n\n        newState['Select All'] = selectAll;\n\n        this.setState(newState, this.props.onChange);\n        console.log((checkbox.checked?'Check ':'Unchecked ') + name);\n    }\n\n    render(){\n        let sortedOptions = [...this.props.options];\n        sortedOptions.sort();\n\n        let manyOptions = sortedOptions.length > 10;\n\n        return (\n            <Grid container>\n                <Grid item xs={12}>\n                    <Checkbox checked={this.state['Select All']} color={\"primary\"} onChange={this.selectAll} />All\n                </Grid>\n                {\n                    sortedOptions.map(item => (\n                        <Grid item xs={manyOptions?6:12}>\n                            <Checkbox checked={this.state[item]} color={\"primary\"}\n                                      onChange={(event) => this.optionOnchange(event, item)}/>{item}\n                        </Grid>\n                    ))\n                }\n            </Grid>\n        )\n    }\n}\n\nexport default ListFilter;","import React from 'react';\n\nimport Grid from '@material-ui/core/Grid';\nimport TextField from \"@material-ui/core/TextField\";\n\nclass RangeFilter extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            \"min\":\"\",\n            \"max\":\"\"\n        }\n    }\n\n    textFieldOnChange(event, textFieldName){\n        let newState = {};\n\n        newState[textFieldName] = event.target.value;\n\n        this.setState(newState, this.props.onChange);\n    }\n\n    getValues(){\n        return {\"min\":this.state.min, \"max\":this.state.max};\n    }\n\n    getMinTitle(){\n        return this.props.minTitle == undefined?\"Min\":this.props.minTitle;\n    }\n\n    getMaxTitle(){\n        return this.props.maxTitle == undefined?\"Max\":this.props.maxTitle;\n    }\n\n    getToText(){\n        return this.props.toText == undefined?\"To\":this.props.toText;\n    }\n\n    render(){\n        return (\n            <Grid container>\n                <Grid item xs={4}>\n                    <TextField value={this.state[\"min\"]} label={this.getMinTitle()}\n                               variant=\"outlined\" size={\"small\"} onChange={(event) => this.textFieldOnChange(event, \"min\")}/>\n                </Grid>\n                <Grid item xs={4} align={\"center\"}>\n                    {this.getToText()}\n                </Grid>\n                <Grid item xs={4}>\n                    <TextField value={this.state[\"max\"]} label={this.getMaxTitle()}\n                               variant=\"outlined\" size={\"small\"} onChange={(event) => this.textFieldOnChange(event, \"max\")}/>\n                </Grid>\n            </Grid>\n        )\n    }\n}\n\nexport default RangeFilter;","import React from 'react';\nimport ListFilter from \"./ListFilter\";\nimport RangeFilter from \"./RangeFilter\";\nimport {Collapse} from \"@material-ui/core\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { IconButton } from '@material-ui/core';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport './Filter.css';\n\nclass Filter extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {filters:[]};\n        this.filterOnChange = this.filterOnChange.bind(this);\n        this.createFilter = this.createFilter.bind(this);\n\n    }\n\n    expandBtnOnClick(event, filterTitle) {\n        let stateKeyName = filterTitle + '_expand';\n        let newState = {};\n        newState[stateKeyName] = !this.state[stateKeyName];\n\n        this.setState(newState);\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.setState({filters:nextProps.filters});\n    }\n\n    filterOnChange(event, filterTitle){\n        console.log(\"filterOnChange\");\n        let newState = {...this.state};\n\n        for(let filter of newState.filters){\n            let isDependentList = filter[\"type\"] == \"list\" && \"dependent_filter\" in filter && \"dependent_list\" in filter;\n\n            if (isDependentList){\n                let dependentFilter = filter[\"dependent_filter\"];\n                let dependentList = filter[\"dependent_list\"];\n\n                let selectedOptions = this.refsDict[dependentFilter].getValues();\n                let newOptions = new Set();\n\n                for(let selectedOption of selectedOptions){\n                    dependentList[selectedOption].forEach(newOptions.add, newOptions);\n                }\n\n                filter[\"options\"] = Array.from(newOptions);\n            }\n        }\n\n        this.setState(newState, this.props.onChange);\n    }\n\n    getFilterValues(){\n        let values = {};\n\n        for(let title in this.refsDict){\n            values[title] = this.refsDict[title].getValues();\n        }\n\n        return values;\n    }\n\n    createFilter(filter, filterIndex){\n        let lastFilterIndex = this.state.filters.length - 1;\n        let filterType = filter[\"type\"];\n        let filterComponent = undefined;\n\n        if (filterType == \"list\"){\n            filterComponent = <ListFilter {...filter} ref={curFilter => this.refsDict[filter[\"title\"]] = curFilter} onChange={(event) => this.filterOnChange(event, filter[\"title\"])}/>;\n        }else if (filterType == \"range\"){\n            filterComponent = <RangeFilter {...filter} ref={curFilter => this.refsDict[filter[\"title\"]] = curFilter} onChange={(event) => this.filterOnChange(event, filter[\"title\"])}/>\n        }\n\n        return (\n            <React.Fragment>\n                <Grid item xs={12} className={\"padding10\"}>\n                    <Grid container>\n                        <Grid item xs={10}>\n                            <span className={'filter_title'}>{filter[\"title\"]}</span>\n                        </Grid>\n                        <Grid item xs={2} align='right'>\n                            <IconButton onClick={(event) => this.expandBtnOnClick(event, filter[\"title\"])}>\n                                {this.state[filter[\"title\"] + \"_expand\"]?(<ExpandLess/>):(<ExpandMore />)}\n                            </IconButton>\n                        </Grid>\n                    </Grid>\n                    <Collapse in={this.state[filter[\"title\"] + \"_expand\"]}>\n                        {filterComponent}\n                    </Collapse>\n                </Grid>\n                {\n                    filterIndex != lastFilterIndex ?\n                        (\n                            <Grid item xs={12}>\n                                <hr className={\"line_seperator\"}/>\n                            </Grid>\n                        ) : null\n                }\n            </React.Fragment>\n        );\n    }\n\n    render(){\n        console.log('render');\n        console.log(this.state);\n        this.refsDict = {};\n\n        return (\n            <Grid container className={\"filter_main_content\"}>\n                {\n                    this.state.filters.map(this.createFilter)\n                }\n            </Grid>\n        )\n    }\n}\n\nexport default Filter;","import React from 'react';\nimport Grid from \"@material-ui/core/Grid\";\nimport { IconButton } from '@material-ui/core';\nimport Close from '@material-ui/icons/Close';\nimport { Paper } from '@material-ui/core';\n\nclass LenderInputs extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    keyToTitle(key){\n        let result = key.replace('_',' ');\n\n        return result\n            .toLowerCase()\n            .split(' ')\n            .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n            .join(' ');\n    }\n\n    render(){\n        return (\n        <Paper style={{padding:10}}>\n            <Grid container>\n                <Grid item xs={12} align={\"right\"}>\n                    <IconButton color=\"secondary\" onClick={this.props.handleDeleteBtnClick}>\n                        <Close />\n                    </IconButton>\n                </Grid>\n                {\n                    Object.keys(this.props.inputs).map(input =>\n                        <React.Fragment>\n                            <Grid item xs={6}>\n                            {this.keyToTitle(input)}\n                            </Grid>\n                            <Grid item xs={6}>\n                                {this.props.inputs[input]}\n                            </Grid>\n                        </React.Fragment>)\n                }\n        </Grid>\n        </Paper>);\n    }\n}\n\nexport default LenderInputs;","import React from 'react';\nimport Grid from \"@material-ui/core/Grid\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport TextField from \"@material-ui/core/TextField\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport Button from \"@material-ui/core/Button\";\nimport LenderInputs from \"./LenderInputs\";\n\nclass Lender extends React.Component {\n    beginningState(){\n        return {\n            selectedTier:'NONE',\n            tierMenuItems:[],\n            tierSelectDisabled:true,\n\n            selectedLender:'NONE',\n            lenderSelectDisabled:false,\n\n            currencyFields:{\n                \"Payment\":{\n                    value: \"\",\n                    error: false\n                },\n                \"Down Payment\":{\n                    value: \"\",\n                    error: false\n                },\n                \"Trade Allowance\":{\n                    value: \"\",\n                    error: false\n                },\n                \"Trade Payoff\":{\n                    value: \"\",\n                    error: false\n                },\n                \"Trace a.c.v\":{\n                    value: \"\",\n                    error: false\n                }\n            },\n            percentageFields:{\n                \"Tax\":{\n                    value: \"\",\n                    error: false\n                }\n            },\n            isTextFieldsEnabled:false\n        }\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            lenderMenuItems:[],\n            ...this.beginningState(),\n            lenderInputs:[]\n        }\n\n        this.selectLender = this.selectLender.bind(this);\n        this.selectTier = this.selectTier.bind(this);\n        this.addLender = this.addLender.bind(this);\n        this.reset = this.reset.bind(this);\n        this.deleteLenderInput = this.deleteLenderInput.bind(this);\n    }\n\n    componentWillReceiveProps(nextProps) {\n        let lenderMenuItems = [];\n\n        lenderMenuItems.push(<MenuItem value={'NONE'}>Please select lender</MenuItem>);\n\n        for (let lenderName in nextProps.lenderToPrograms){\n            lenderMenuItems.push(<MenuItem value={lenderName}>{lenderName}</MenuItem>);\n        }\n\n        this.setState({lenderMenuItems:lenderMenuItems});\n    }\n\n    textboxOnChange(event, fieldLabel){\n        let newValue = event.target.value;\n        let isError = isNaN(newValue);\n        console.log(isError);\n\n        if (fieldLabel in this.state.currencyFields){\n            let newCurrencyFields = {...this.state.currencyFields};\n            newCurrencyFields[fieldLabel] =  {\n                value:newValue,\n                error:isError\n            }\n\n            this.setState({currencyFields:newCurrencyFields});\n        }else if (fieldLabel in this.state.percentageFields){\n            let newPercentageFields = {...this.state.percentageFields};\n            newPercentageFields[fieldLabel] = {\n                value:newValue,\n                error:isError\n            }\n            this.setState({percentageFields:newPercentageFields})\n        }\n    }\n\n    selectLender(event){\n        let selectLenderName = event.target.value;\n\n        let tierSelectDisabled = true;\n\n        if (selectLenderName != 'NONE'){\n            tierSelectDisabled = false;\n        }\n\n        let tierMenuItems = [];\n        tierMenuItems.push(<MenuItem value={'NONE'}>Please select tier</MenuItem>);\n\n        for(let tierName of this.props.lenderToPrograms[selectLenderName]) {\n            tierMenuItems.push(<MenuItem value={tierName}>{tierName}</MenuItem>);\n        }\n\n        this.setState({\n            selectedLender:selectLenderName,\n            selectedTier:'NONE',\n            tierSelectDisabled: tierSelectDisabled,\n            tierMenuItems:tierMenuItems\n        });\n    }\n\n    selectTier(event){\n        let selectIndex = event.target.value;\n\n        this.setState({\n            selectedTier : selectIndex,\n            isTextFieldsEnabled:true\n        })\n    }\n\n    hasAnyErrorsInLenderInput(){\n        let hasAnyErrors = false;\n\n        Object.keys(this.state.currencyFields).forEach((key) => {\n            if (this.state.currencyFields[key].error){\n                hasAnyErrors = true;\n            }\n        });\n\n        Object.keys(this.state.percentageFields).forEach((key) => {\n            if (this.state.percentageFields[key].error){\n                hasAnyErrors = true;\n            }\n        });\n\n        return hasAnyErrors;\n    }\n\n    addLender(event){\n        let lenderInput = {};\n        let hasAnyErrors = this.hasAnyErrorsInLenderInput();\n\n        if (!hasAnyErrors) {\n            lenderInput[\"lender\"] = this.state.selectedLender;\n            lenderInput[\"tier\"] = this.state.selectedTier;\n            lenderInput[\"payment\"] = this.state.currencyFields[\"Payment\"].value;\n            lenderInput[\"down payment\"] = this.state.currencyFields[\"Down Payment\"].value;\n            lenderInput[\"trade allowance\"] = this.state.currencyFields[\"Trade Allowance\"].value;\n            lenderInput[\"trade payoff\"] = this.state.currencyFields[\"Trade Payoff\"].value;\n            lenderInput[\"trade a.c.v\"] = this.state.currencyFields[\"Trace a.c.v\"].value;\n            lenderInput[\"tax\"] = this.state.percentageFields[\"Tax\"].value;\n\n            let newLenderInputs = this.state.lenderInputs;\n            newLenderInputs.push(lenderInput);\n\n            this.setState({lenderInputs: newLenderInputs});\n        }\n    }\n\n    reset(event){\n        this.setState({...this.beginningState()});\n    }\n\n    deleteLenderInput(event, lenderInputIndex){\n        let newLenderInputs = this.state.lenderInputs;\n\n        newLenderInputs.splice(lenderInputIndex, 1);\n\n        this.setState({lenderInputs:newLenderInputs});\n    }\n\n    render(){\n        return (\n          <Grid container className={\"lender_main_content padding10\"} spacing={2}>\n              <Grid item xs={12}>\n                  <Select onChange={this.selectLender} value={this.state.selectedLender} disabled={this.state.lenderSelectDisabled} style={{width:'100%'}}>\n                      {this.state.lenderMenuItems}\n                  </Select>\n              </Grid>\n              <Grid item xs={12}>\n                  <Select onChange={this.selectTier} value={this.state.selectedTier} disabled={this.state.tierSelectDisabled} style={{width:'100%'}}>\n                      {this.state.tierMenuItems}\n                  </Select>\n              </Grid>\n              {Object.keys(this.state.currencyFields).map(currencyFieldLabel => (\n                      <Grid item xs={6} sm={3} md={6} style={{padding:10}}><TextField disabled={!this.state.isTextFieldsEnabled}\n                                                                                      label={currencyFieldLabel}\n                                                                                      variant=\"outlined\"\n                                                                                      onChange={(event) => this.textboxOnChange(event, currencyFieldLabel)}\n                                                                                      error = {this.state.currencyFields[currencyFieldLabel].error}\n                                                                                      helperText={this.state.currencyFields[currencyFieldLabel].error?\"Invalid Value\":\"\"}\n                                                                                      value={this.state.currencyFields[currencyFieldLabel].value}\n                                                                                      InputProps={{\n                                                                                          startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n                                                                                      }\n                                                                                      }\n                                                                                      size={\"small\"}\n                      /></Grid>\n                  )\n              )\n              }\n              {Object.keys(this.state.percentageFields).map(percentageFieldLabel => (\n                      <Grid item xs={6} sm={3} md={6} style={{padding:10}}><TextField disabled={!this.state.isTextFieldsEnabled}\n                                                                                      label={percentageFieldLabel}\n                                                                                      variant=\"outlined\"\n                                                                                      onChange={(event) => this.textboxOnChange(event, percentageFieldLabel)}\n                                                                                      error = {this.state.percentageFields[percentageFieldLabel].error}\n                                                                                      helperText={this.state.percentageFields[percentageFieldLabel].error?\"Invalid Value\":\"\"}\n                                                                                      value={this.state.percentageFields[percentageFieldLabel].value}\n                                                                                      InputProps={{\n                                                                                          startAdornment: <InputAdornment position=\"start\">%</InputAdornment>,\n                                                                                      }}\n                                                                                      size={\"small\"}\n                      /></Grid>\n                  )\n              )\n              }\n              <Grid item xs={12} style={{textAlign:\"center\"}}>\n                  <Button variant=\"contained\" color={\"primary\"} onClick={this.addLender}>Add</Button>\n                  <Button variant=\"contained\" color={\"secondary\"} onClick={this.reset} style={{marginLeft:10}}>Reset</Button>\n              </Grid>\n              {\n                  this.state.lenderInputs.map((lenderInput, lenderInputIndex) =>\n                      <Grid item xs={12}>\n                          <LenderInputs inputs={lenderInput} handleDeleteBtnClick={(event) => this.deleteLenderInput(lenderInputIndex)}/>\n                      </Grid>)\n              }\n          </Grid>\n        );\n    }\n}\n\nexport default Lender;","import React from 'react';\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Filter from './Filter';\nimport './LeftPanel.css';\nimport Lender from './Lender';\n\nclass LeftPanel extends React.Component{\n    constructor(props) {\n        super(props);\n\n        this.handleChange = this.handleChange.bind(this);\n        this.filterRef = React.createRef();\n        let filter =\n        this.state = {\n            selectedTabIndex:0,\n            filters:[],\n            lenderToPrograms:{},\n            carDetails:[]\n        }\n    }\n\n    handleChange(event, newSelectedTabIndex){\n        this.setState({selectedTabIndex:newSelectedTabIndex});\n    }\n\n    componentWillReceiveProps(nextProps){\n        let hasUpdate = this.state.carDetails.length != nextProps.carDetails.length;\n\n        if (hasUpdate) {\n            let makes = new Set();\n            let makeToModelsDict = {}\n            let models = new Set();\n\n            for (let i = 0; i < nextProps.carDetails.length; i++) {\n                let carDetail = nextProps.carDetails[i];\n                let make = carDetail[\"make\"];\n                let model = carDetail[\"model\"];\n\n                makes.add(make);\n                models.add(model);\n                if (!(make in makeToModelsDict)) {\n                    makeToModelsDict[make] = new Set();\n                    makeToModelsDict[make].add(model);\n                }\n            }\n\n            let filters = [\n                {\n                    \"title\": \"Make\",\n                    \"type\": \"list\",\n                    \"options\": Array.from(makes)\n                },\n                {\n                    \"title\": \"Model\",\n                    \"type\": \"list\",\n                    \"dependent_filter\": \"Make\",\n                    \"dependent_list\": makeToModelsDict,\n                    \"options\": Array.from(models)\n                },\n                {\n                    \"title\": \"Year\",\n                    \"type\": \"range\",\n                    \"minTitle\": \"Min\",\n                    \"maxTitle\": \"Max\"\n                },\n                {\n                    \"title\": \"Mileage\",\n                    \"type\": \"range\",\n                    \"minTitle\": \"Min\",\n                    \"maxTitle\": \"Max\"\n                },\n                {\n                    \"title\": \"Total cost\",\n                    \"type\": \"range\",\n                    \"minTitle\": \"Min\",\n                    \"maxTitle\": \"Max\"\n                }\n            ];\n\n            let lenderToPrograms = {};\n            let lenderIdToLenderName = {};\n            nextProps.lenders.forEach(lender => {\n                lenderIdToLenderName[lender[\"id\"]] = lender[\"name\"];\n            });\n\n            nextProps.lenderPrograms.forEach(lenderProgram => {\n                let lenderName = lenderIdToLenderName[lenderProgram[\"lender_id\"]];\n\n                if (!(lenderName in lenderToPrograms)) {\n                    lenderToPrograms[lenderName] = [];\n                }\n\n                lenderToPrograms[lenderName].push(lenderProgram[\"name\"]);\n            });\n\n            this.setState({filters: filters, lenderToPrograms: lenderToPrograms, carDetails:nextProps.carDetails});\n        }\n    }\n\n    getFilterValues(){\n        return this.filterRef.current.getFilterValues();\n    }\n\n    render(){\n        return (\n        <React.Fragment>\n            <Tabs value={this.state.selectedTabIndex} onChange={this.handleChange}>\n                <Tab label={\"Filter\"} className={this.state.selectedTabIndex==0?\"tab_selected\":\"tab_deselected\"}/>\n                <Tab label={\"Lender\"} className={this.state.selectedTabIndex==1?\"tab_selected\":\"tab_deselected\"} />\n            </Tabs>\n            <div className={this.state.selectedTabIndex==0?'':'hide'}>\n                <Filter ref={this.filterRef} filters={this.state.filters}\n                        onChange={this.props.filterOnChange}\n                />\n            </div>\n            <div className={this.state.selectedTabIndex==1?'':'hide'}>\n                <Lender lenderToPrograms={this.state.lenderToPrograms} />\n            </div>\n        </React.Fragment>\n        );\n    }\n}\n\nexport default LeftPanel;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport LenderFilter from \"./LenderFilter\";\nimport LendersFilter from \"./LenderFilters\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Form from \"@material-ui/core/FormControl\"\nimport CarShow from \"./CarShow\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Paper from \"@material-ui/core/Paper\";\nimport {useTheme} from \"@material-ui/core/styles\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\nimport {FaFilter} from \"react-icons/all\";\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Menu from \"@material-ui/core/Menu\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport ScrollToTop from \"react-scroll-to-top\";\nimport \"react-scroll-to-top/lib/index.css\";\nimport Sort from \"./Sort\";\nimport LeftPanel from \"./LeftPanel\";\nimport {fetchCars, fetchLenderPrograms, fetchLenders, fetchLenderTerms} from \"./Api\";\n\nconst App = (props) => {\n    const theme = useTheme();\n    const mdUp = useMediaQuery(theme.breakpoints.up(\"md\"));\n\n    return <AppClass isBigScreen={mdUp}/>\n}\n\nclass AppClass extends React.Component{\n    constructor() {\n        super();\n\n        this.leftPanelRef = React.createRef();\n\n        this.state = {\n            carJson:[],\n            lendersJson:[],\n            lenderTermsJson:[],\n            lenderProgramsJson:[],\n            isLoading: true,\n            filterValues: {}\n        }\n\n        Promise.all([fetchCars(), fetchLenders(), fetchLenderTerms(), fetchLenderPrograms()]).then(responses => Promise.all(responses.map(response => response.json()))).then(jsons => {\n           let carJson = jsons[0];\n           let lendersJson = jsons[1];\n           let lenderTermsJson = jsons[2];\n           let lenderProgramsJson = jsons[3];\n\n           this.setState({carJson:carJson, lendersJson:lendersJson, lenderTermsJson:lenderTermsJson, lenderProgramsJson:lenderProgramsJson, isLoading:false});\n        });\n        this.filterOnChange = this.filterOnChange.bind(this);\n    }\n\n    filterOnChange(){\n        this.setState({filterValues:this.leftPanelRef.current.getFilterValues()});\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n            <ScrollToTop smooth />\n            <Grid container style={{backgroundColor:\"rgb(247,248,248)\"}}>\n                <Grid item xl={1} xs={0} />\n                <Grid item xl={10} xs={12}>\n                    <AppBar position=\"static\">\n                        {this.props.isBigScreen ? (\n                            <React.Fragment>\n                                <Tabs>\n                                    <Tab label=\"Home\"/>\n                                    <Tab label=\"Rate Sheet\" disabled/>\n                                    <Tab label=\"Quick Quote\" disabled/>\n                                    <Tab label=\"Lender Assist\" disabled/>\n                                </Tabs>\n                            </React.Fragment>) : (\n                                <Toolbar>\n                                    <IconButton\n                                        aria-label=\"menu\"\n                                        aria-controls=\"menu-appbar\"\n                                        aria-haspopup=\"true\"\n                                        style={{\"color\":\"white\"}}\n                                        onClick={this.menuBtnOnClick}>\n                                        <MenuIcon />\n                                    </IconButton>\n                                    <Menu\n                                        id=\"menu-appbar\"\n                                        anchorEl={this.state.anchorEl}\n                                        anchorOrigin={{\n                                            vertical: 'top',\n                                            horizontal: 'right',\n                                        }}\n                                        keepMounted\n                                        transformOrigin={{\n                                            vertical: 'top',\n                                            horizontal: 'right',\n                                        }}\n                                        open={Boolean(this.state.anchorEl)}\n                                        onClose={this.closeMenu}\n                                    >\n                                        <MenuItem>HOME</MenuItem>\n                                        <MenuItem>RATE SHEET</MenuItem>\n                                        <MenuItem>QUICK QUOTE</MenuItem>\n                                        <MenuItem>LENDER ASSIST</MenuItem>\n                                    </Menu>\n                                </Toolbar>\n                            )\n                        }\n                    </AppBar>\n                </Grid>\n                <Grid item xl={1} xs={0}/>\n                <Grid item sm={1} xs={0}/>\n                <Grid item md={2} sm={3} xs={12}>\n                   <LeftPanel ref={this.leftPanelRef} carDetails={this.state.carJson} lenders={this.state.lendersJson} lenderPrograms={this.state.lenderProgramsJson} filterOnChange={this.filterOnChange}/>\n                </Grid>\n                <Grid item md={8} sm={7} xs={12}>\n                    <CarShow carDetails={this.state.carJson} filterValues={this.state.filterValues}/>\n                </Grid>\n                <Grid item sm={1} xs={0}/>\n            </Grid>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import * as React from \"react\";\nimport Table from \"@material-ui/core/Table\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { useTheme } from '@material-ui/core/styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport Grid from \"@material-ui/core/Grid\";\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\n\nconst StyledTableCell = withStyles(theme => ({\n    head: {\n        backgroundColor: theme.palette.primary.main,\n        color: theme.palette.common.white,\n    },\n    body: {\n        fontSize: 14,\n    },\n}))(TableCell);\n\nconst StyledTableRow = withStyles(theme => ({\n    root: {\n        '&:nth-of-type(odd)': {\n            backgroundColor: theme.palette.background.default,\n        },\n    },\n}))(TableRow);\n\nconst CarCalculation = (props)=>{\n    const theme = useTheme();\n    const mdUp = useMediaQuery(theme.breakpoints.up(\"md\"));\n\n    return <CarCalculationClass isBigScreen={mdUp} {...props}/>\n}\n\nfunction mileageToKms(mileage){\n    return mileage * 1.60934;\n}\n\n\n\nfunction addCurrencySymbol(value){\n    if (value < 0){\n        return `-$${Math.abs(value)}`\n    }else{\n        return `$${value}`\n    }\n}\n\nfunction pv(rate, periods, payment, future, type) {\n    // Initialize type\n    var type = (typeof type === 'undefined') ? 0 : type;\n\n    // Evaluate rate and periods (TODO: replace with secure expression evaluator)\n    rate = eval(rate);\n    periods = eval(periods);\n\n    // Return present value\n    if (rate === 0) {\n        return - payment * periods - future;\n    } else {\n        return (((1 - Math.pow(1 + rate, periods)) / rate) * payment * (1 +rate * type) - future) / Math.pow(1 + rate, periods);\n    }\n}\n\nfunction getLenderId(lenderName, lenders){\n    for(let i = 0; i < lenders.length; i++){\n        if (lenderName == lenders[i].name)\n            return lenders[i].id;\n    }\n\n    return null;\n}\n\nexport function calculateProfitFirstInterest(filterInputs, lenderData, carDetails){\n    let calculationDetails = createCalculationDetail(-1, filterInputs, lenderData, carDetails);\n    let interestColumnIndex = 3;\n    let profitColumnIndex = 8;\n    let interests = calculationDetails[interestColumnIndex].split(',');\n\n    if (interests.length > 0) {\n        // Select first interest as default\n        let firstInterest = interests[0];\n\n        let calculationDetailsForFirstInterest = createCalculationDetail(firstInterest, filterInputs, lenderData, carDetails);\n        let profit = calculationDetailsForFirstInterest[profitColumnIndex];\n\n        if (profit != 'NOT_FOUND')\n            return profit;\n    }\n\n    return null;\n}\n\nfunction createCalculationDetail(selectedInterest, filterInputs, lenderData, carDetails){\n    console.log('createCalculationDetail()');\n    console.log(selectedInterest);\n    console.log(filterInputs);\n    console.log(lenderData);\n    console.log(carDetails);\n\n    let lenders = lenderData[0];\n    let lenderPrograms = lenderData[1];\n    let lenderTerms = lenderData[2];\n\n    let lenderName = filterInputs.allLenderNames[filterInputs.selectedLenderIndex - 1];\n    let tierName = filterInputs.allTierNames[filterInputs.selectedTierIndex - 1];\n    console.log('lenderName = ' + lenderName);\n    console.log('tierName = ' + tierName);\n\n    // Advance\n    let advance = 'NOT_FOUND';\n    let interest = 'NOT_FOUND';\n    let term = 'NOT_FOUND';\n    let foundLenderTerm = null;\n    let foundLenderProgram = null;\n    let lenderId = getLenderId(lenderName, lenders);\n    console.log('lenderId = ' + lenderId);\n\n    if(lenderId != null){\n        for(let lenderProgram of lenderPrograms){\n            if (lenderProgram.lender_id == lenderId && lenderProgram.name == tierName){\n                foundLenderProgram = lenderProgram;\n\n                // Advance\n                if(!isNaN(lenderProgram.advance)){\n                    advance = parseFloat(lenderProgram.advance);\n                }\n\n                // Interest\n                let rateMin = parseFloat(lenderProgram.rate_min);\n                let rateMax = parseFloat(lenderProgram.rate_max);\n                interest = '';\n\n                for(let rate = rateMin; rate < rateMax; rate+=1){\n                    interest += rate + ',';\n                }\n\n                interest += rateMax;\n\n                break;\n            }\n        }\n\n        let carKms = mileageToKms(parseFloat(carDetails.mileage));\n        console.log('carKms = ' + carKms);\n\n        for(let lenderTerm of lenderTerms){\n            if (lenderTerm.lender_id == lenderId && lenderTerm.min_kms <= carKms && lenderTerm.max_kms >= carKms && lenderTerm.year == parseInt(carDetails.year)){\n                // Term\n                term = lenderTerm.term;\n                foundLenderTerm = lenderTerm;\n                break;\n            }\n        }\n    }\n\n    console.log('advance = ' + advance);\n    console.log('interest = ' + interest);\n    console.log('term = ' + term);\n\n    let payment = parseFloat(filterInputs.currencyFields.Payment.value);\n    let back = '0';\n\n    // Calculate max front\n    let maxFront = 'NOT_FOUND';\n\n    if (foundLenderTerm !=null && advance != \"NOT_FOUND\"){\n        let termType = foundLenderTerm.type.replace(/\\s/g, '');\n        console.log('termType = ' + termType);\n\n        switch(termType.toLowerCase()){\n            case 'x-clean':\n                maxFront = carDetails.x_clean * advance - carDetails.total_cost;\n                break;\n            case 'clean':\n                maxFront = carDetails.clean  * advance - carDetails.total_cost;\n                break;\n            case 'average':\n                maxFront = carDetails.average  * advance - carDetails.total_cost;\n                break;\n            case 'rough':\n                maxFront = carDetails.rough  * advance - carDetails.total_cost;\n                break;\n        }\n\n        maxFront = Math.round(maxFront);\n    }\n\n    console.log('maxFront = ' + maxFront);\n\n    // Calculate max profit\n    let maxProfit = 'NOT_FOUND';\n\n    if (selectedInterest != -1 && term!='NOT_FOUND') {\n        let discount = 0;\n        let tax = 0;\n        let financed = pv((selectedInterest / 100 + discount + tax) / 12, term, -payment, 0);\n        let holdBack = foundLenderProgram.hold_back;\n        let funded = financed * (1 - holdBack);\n\n        console.log('financed = ' + financed);\n        console.log('holdBack = ' + holdBack);\n        console.log('funded = ' + funded);\n\n        let lender = 0;\n        let ppsa = 0;\n\n        let tradeAllowance = 0;\n        if (filterInputs.currencyFields[\"Trade Allowance\"].value != '' && !isNaN(filterInputs.currencyFields[\"Trade Allowance\"].value)) {\n            tradeAllowance = parseFloat(filterInputs.currencyFields[\"Trade Allowance\"].value);\n        }\n\n        let tradePayOff = 0;\n        if (filterInputs.currencyFields[\"Trade Payoff\"].value != '' && !isNaN(filterInputs.currencyFields[\"Trade Payoff\"].value)) {\n            tradePayOff = parseFloat(filterInputs.currencyFields[\"Trade Payoff\"].value)\n        }\n\n        let downPayment = 0;\n        if (filterInputs.currencyFields[\"Down Payment\"].value != '' && !isNaN(filterInputs.currencyFields[\"Down Payment\"].value)) {\n            downPayment = parseFloat(filterInputs.currencyFields[\"Down Payment\"].value);\n        }\n\n        let tradeAcv = 0;\n        if (filterInputs.currencyFields[\"Trace a.c.v\"].value != '' && !isNaN(filterInputs.currencyFields[\"Trace a.c.v\"].value)) {\n            tradeAcv = parseFloat(filterInputs.currencyFields[\"Trace a.c.v\"].value)\n        }\n\n        console.log('tradeAllowance = ' + tradeAllowance);\n        console.log('tradePayOff = ' + tradePayOff);\n        console.log('downPayment = ' + downPayment);\n        console.log('tradeAcv = ' + tradeAcv);\n\n        let paidOut = funded - lender - ppsa + tradeAllowance - tradePayOff + downPayment;\n        console.log('paidOut = ' + paidOut);\n\n        let userInputTax = 0;\n\n        if (filterInputs.percentageFields.Tax.value != '' && !isNaN(filterInputs.percentageFields.Tax.value)) {\n            console.log(filterInputs.percentageFields.Tax.value);\n            userInputTax = parseFloat(filterInputs.percentageFields.Tax.value) / 100;\n        }\n\n        console.log('userInputTax = ' + userInputTax);\n\n        let netPaid = paidOut*(1-userInputTax) + tradeAcv;\n        console.log('netPaid = ' + netPaid);\n\n        if (netPaid - carDetails.total_cost < maxFront){\n            maxProfit = netPaid - carDetails.total_cost;\n        }else {\n            maxProfit = maxFront;\n        }\n\n        maxProfit = Math.round(maxProfit);\n    }\n\n    console.log('maxProfit = ' + maxProfit);\n\n    if (maxFront != 'NOT_FOUND'){\n        maxFront = addCurrencySymbol(maxFront);\n    }\n\n    if (maxProfit != 'NOT_FOUND'){\n        maxProfit = addCurrencySymbol(maxProfit);\n    }\n\n    console.log('End createCalculationDetail()');\n    return [lenderName, tierName, (advance * 100) + '%', interest, term, '$' + payment, back, maxFront, maxProfit];\n}\n\nclass CarCalculationClass extends React.Component{\n    constructor() {\n        super();\n\n        this.calculationDetailsColumnHeaders =[\n            \"Lender\",\n            \"Tier\",\n            \"Advance\",\n            \"Interest\",\n            \"Term\",\n            \"Payment\",\n            \"Back\",\n            \"Front\",\n            \"Profit\"\n        ];\n\n        this.state = {\n            calculationDetailsValues:[],\n            interests:[-1,-1,-1]\n        }\n\n        this.selectInterestEvent = this.selectInterestEvent.bind(this);\n    }\n\n    createCalculationDetails(selectedInterests, filtersInputs, lenderData, details){\n        let newCalculationDetailsValues = [];\n\n        for(let [i, filterInputs] of filtersInputs.entries()){\n            if(this.isValidFilterInputs(filterInputs)) {\n                if (selectedInterests[i] == -1){\n                    let calculationDetails = createCalculationDetail(-1, filterInputs, lenderData, details);\n                    let interestColumnIndex = 3;\n                    let interests = calculationDetails[interestColumnIndex].split(',');\n\n                    if (interests.length > 0) {\n                        // Select first interest as default\n                        let firstInterest = interests[0];\n                        this.state.interests[i] = firstInterest;\n\n                        newCalculationDetailsValues.push(createCalculationDetail(firstInterest, filterInputs, lenderData, details));\n                    }else{\n                        newCalculationDetailsValues.push(calculationDetails);\n                    }\n                }\n                else{\n                    newCalculationDetailsValues.push(createCalculationDetail(selectedInterests[i], filterInputs, lenderData, details));\n                }\n            }\n        }\n\n        return newCalculationDetailsValues;\n    }\n\n    isValidFilterInputs(filterInputs){\n        return filterInputs.selectedLenderIndex != 0 && filterInputs.selectedTierIndex != 0;\n    }\n\n    selectInterestEvent(event, lenderIndex){\n        let newInterest = event.target.value;\n        let interests = this.state.interests;\n        interests[lenderIndex] = newInterest;\n\n        this.setState({interests:interests});\n    }\n\n    renderWithOneTable(calculationDetailsValues){\n        return (\n            <React.Fragment>\n                <Paper style={{backgroundColor:\"rgb(247, 248, 248)\"}}>\n                    <Table>\n                        <TableHead>\n                                <StyledTableRow>\n                                {this.calculationDetailsColumnHeaders.map(header => (\n                                    <StyledTableCell>{header}</StyledTableCell>\n                                ))}\n                                </StyledTableRow>\n                        </TableHead>\n                        {\n                            calculationDetailsValues.map((columnValues, lenderIndex) =>(\n                                <StyledTableRow>\n                                    {\n                                        columnValues.map((columnValue, index) => {\n                                            let interestColumnIndex = 3;\n\n                                            if (index == interestColumnIndex){\n                                                let interestMenuItems = [];\n\n                                                columnValue.split(',').forEach((interest, index) => {\n                                                    interestMenuItems.push(<MenuItem value={interest}>{interest} %</MenuItem>);\n                                                });\n\n                                                return (\n                                                    <StyledTableCell>\n                                                        <Select onChange={(event) => this.selectInterestEvent(event, lenderIndex)} value={this.state.interests[lenderIndex]}>\n                                                            {interestMenuItems}\n                                                        </Select>\n                                                    </StyledTableCell>\n                                                )\n                                            }\n                                            else\n                                            return (\n                                                <StyledTableCell>\n                                                    {columnValue}\n                                                </StyledTableCell>\n                                            )\n                                        })\n                                    }\n                                </StyledTableRow>\n                            ))\n                        }\n                    </Table>\n                </Paper>\n            </React.Fragment>\n        )\n    }\n\n    createCell(value, index, lenderIndex){\n        let interestColumnIndex = 3;\n\n        if (index == interestColumnIndex){\n            let interestMenuItems = [];\n\n            value.split(',').forEach((interest, index) => {\n                interestMenuItems.push(<MenuItem value={interest}>{interest} %</MenuItem>);\n            });\n\n            return (\n                    <Select onChange={(event) => this.selectInterestEvent(event, lenderIndex)} value={this.state.interests[lenderIndex]}>\n                        {interestMenuItems}\n                    </Select>\n            )\n        }\n        else\n            return <React.Fragment>\n                {value}\n            </React.Fragment>\n    }\n\n    renderWithThreeTables(calculationDetailsValues){\n        let tables = [];\n\n        for(let [lenderIndex, lenderCalculationDetailsValues] of calculationDetailsValues.entries()){\n            tables.push(\n                <Grid item xs={12}>\n                    <Paper style={{backgroundColor:\"rgb(247, 248, 248)\"}}>\n                        <Table>\n                            <TableHead>\n                                <StyledTableRow>\n                                    <StyledTableCell>Name</StyledTableCell>\n                                    <StyledTableCell>Value</StyledTableCell>\n                                </StyledTableRow>\n                            </TableHead>\n                            {\n                                lenderCalculationDetailsValues.map((row, index) => (\n                                    <StyledTableRow>\n                                        <StyledTableCell>{this.calculationDetailsColumnHeaders[index]}</StyledTableCell>\n                                        <StyledTableCell>{this.createCell(row, index, lenderIndex)}</StyledTableCell>\n                                    </StyledTableRow>\n                                ))\n                            }\n                        </Table>\n                    </Paper>\n                </Grid>\n            )\n        }\n\n        return (\n            <React.Fragment>\n                <Grid container spacing={4}>\n                    {tables}\n                </Grid>\n            </React.Fragment>\n        )\n    }\n\n\n    render(){\n        let userInputsFilterData = this.props.filtersInputs != undefined && this.props.filtersInputs.length > 0;\n        let calculationDetailsValues = this.createCalculationDetails(this.state.interests, this.props.filtersInputs, this.props.lenderData, this.props.details);\n\n        if (userInputsFilterData){\n            if (this.props.isBigScreen){\n                return this.renderWithOneTable(calculationDetailsValues);\n            }else{\n                return this.renderWithThreeTables(calculationDetailsValues);\n            }\n        }else{\n            return null;\n        }\n    }\n}\n\nexport default CarCalculation;"],"sourceRoot":""}