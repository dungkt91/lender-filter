{"version":3,"sources":["logo.svg","Api.js","LenderFilter.js","LenderFilters.js","CarDescription.js","CarImagesGallery.js","CarShowElementButtons.js","CarShowElement.js","CarDescriptionNew.js","CarImagesNew.js","CarNew.js","CarShow.js","Sort.js","ListFilter.js","RangeFilter.js","Filter.js","Lender.js","LeftPanel.js","App.js","serviceWorker.js","index.js","CarCalculation.js"],"names":["module","exports","domain","LenderFilter","selectLenderEvent","bind","selectTierEvent","state","filterBeginningState","selectedTierIndex","currencyFields","value","error","percentageFields","this","beginningState","selectedLenderIndex","selectedLenderImage","allLenderNames","tierMenuItems","textfieldsBeginningState","isTierSelectEnabled","isTextFieldsEnabled","lenderMenuItems","allTierNames","push","MenuItem","key","nextProps","i","lenders","length","lender","name","setState","event","fieldLabel","newValue","target","isError","isNaN","console","log","newCurrencyFields","newPercentageFields","index","indexMinusOne","newState","selectedLenderId","props","id","allTierOfSelectedLender","lenderPrograms","filter","lenderProgram","lender_id","map","newTierMenuItems","itemValue","isPleaseSelectItemSelected","Grid","container","spacing","item","xs","Select","onChange","selectedLenderValue","style","width","disabled","Object","keys","currencyFieldLabel","sm","md","padding","TextField","label","variant","textboxOnChange","helperText","InputProps","startAdornment","InputAdornment","position","size","percentageFieldLabel","React","CarDescription","year","getRowValue","make","model","trim","rowName","row","getRowWithName","matches","details","Paper","backgroundColor","Table","TableRow","TableCell","colSpan","textAlign","fontSize","getCarTitle","CarImagesGallery","items","images","showPlayButton","showFullscreenButton","CarShowElementButtons","lg","Button","color","CarDescriptionNew","carYear","carMake","carModel","carTrim","replace","toLowerCase","split","word","charAt","toUpperCase","slice","join","Fragment","className","marginTop","listStyle","columnCount","includes","keyToTitle","Component","CarImagesNew","showBullets","showThumbnails","CarNew","image","original","createImages","clipLoaderCss","css","ListFilter","optionCheckedDict","options","selectAll","optionOnchange","title","selectedOptions","option","selectAllCheckbox","selectedCheckboxState","checked","checkbox","Checkbox","RangeFilter","textFieldName","min","max","undefined","minTitle","maxTitle","toText","getMinTitle","textFieldOnChange","align","getToText","getMaxTitle","Filter","filterTitle","stateKeyName","lastFilterIndex","filters","filterIndex","filterType","filterComponent","IconButton","onClick","expandBtnOnClick","Collapse","in","Lender","lenderName","lenderSelectDisabled","lenderSelectedIndex","tierSelectDisabled","tierSelectedIndex","selectLender","selectTier","selectIndex","marginLeft","LeftPanel","handleChange","selectedTabIndex","newSelectedTabIndex","Tabs","Tab","AppClass","carshowRef","createRef","lendersFilter","sortRef","filterOnClick","submitOnclick","menuBtnOnClick","closeMenu","sortSelect","displayFilters","displayCarShow","anchorEl","filtersInputs","sort","carJson","fetch","then","res","json","current","hasError","getFiltersInputs","lenderData","getLenderData","window","scrollTo","currentTarget","criteriaIndex","selectCriteriaAtIndex","smooth","xl","AppBar","isBigScreen","Toolbar","aria-label","aria-controls","aria-haspopup","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","open","Boolean","onClose","App","theme","useTheme","mdUp","useMediaQuery","breakpoints","up","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message","StyledTableCell","withStyles","head","palette","primary","main","common","white","body","StyledTableRow","root","background","default","CarCalculation","CarCalculationClass","mileageToKms","mileage","addCurrencySymbol","Math","abs","pv","rate","periods","payment","future","type","eval","pow","getLenderId","calculateProfitFirstInterest","filterInputs","carDetails","interests","createCalculationDetail","profit","selectedInterest","lenderTerms","tierName","advance","interest","term","foundLenderTerm","foundLenderProgram","lenderId","parseFloat","rateMin","rate_min","rateMax","rate_max","carKms","lenderTerm","min_kms","max_kms","parseInt","Payment","maxFront","termType","x_clean","total_cost","clean","average","rough","round","maxProfit","financed","holdBack","hold_back","funded","tradeAllowance","tradePayOff","downPayment","tradeAcv","paidOut","userInputTax","Tax","netPaid","calculationDetailsColumnHeaders","calculationDetailsValues","selectInterestEvent","selectedInterests","newCalculationDetailsValues","entries","isValidFilterInputs","calculationDetails","firstInterest","lenderIndex","newInterest","header","columnValues","columnValue","interestMenuItems","forEach","tables","lenderCalculationDetailsValues","createCell","userInputsFilterData","createCalculationDetails","renderWithOneTable","renderWithThreeTables"],"mappings":"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","file":"static/js/main.8ac9a686.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","var domain = 'https://lender-filter-backend-test.herokuapp.com';\n\nfunction fetchCars(){\n    return fetch(`${domain}/cars/`);\n}\n\nfunction fetchLenders(){\n    return fetch(`${domain}/lenders/`);\n}\n\nfunction fetchLenderPrograms(){\n    return fetch(`${domain}/lenders/programs/`);\n}\n\nfunction fetchLenderTerms(){\n    return fetch(`${domain}/lenders/terms/`)\n}\n\n\nexport {fetchCars, fetchLenders, fetchLenderPrograms, fetchLenderTerms};","import * as React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Grid from \"@material-ui/core/Grid\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport {fetchCars, fetchLenders, fetchLenderPrograms, fetchLenderTerms} from \"./Api\";\n\nconst PLEASE_SELECT_INDEX = 0;\n\nexport default class LenderFilter extends React.Component{\n    constructor() {\n        super();\n        this.selectLenderEvent = this.selectLenderEvent.bind(this);\n        this.selectTierEvent = this.selectTierEvent.bind(this);\n        this.state = this.filterBeginningState();\n    }\n\n    textfieldsBeginningState(){\n        return {\n            selectedTierIndex:0,\n            currencyFields:{\n                \"Payment\":{\n                    value: \"\",\n                    error: false\n                },\n                \"Down Payment\":{\n                    value: \"\",\n                    error: false\n                },\n                \"Trade Allowance\":{\n                    value: \"\",\n                    error: false\n                },\n                \"Trade Payoff\":{\n                    value: \"\",\n                    error: false\n                },\n                \"Trace a.c.v\":{\n                    value: \"\",\n                    error: false\n                }\n            },\n            percentageFields:{\n                \"Tax\":{\n                    value: \"\",\n                    error: false\n                }\n            }\n        }\n    }\n\n    hasError(){\n        let currencyFields = this.state.currencyFields;\n        let percentageFields = this.state.percentageFields;\n\n        return currencyFields[\"Payment\"].error || currencyFields[\"Down Payment\"].error || currencyFields[\"Trade Allowance\"].error || currencyFields[\"Trade Payoff\"].error || currencyFields[\"Trace a.c.v\"].error || percentageFields[\"Tax\"].error;\n    }\n\n    filterBeginningState(){\n        let beginningState = {\n            selectedLenderIndex: 0,\n            selectedLenderImage: null,\n            allLenderNames:[],\n            tierMenuItems:[],\n            ...this.textfieldsBeginningState(),\n            isTierSelectEnabled:false,\n            isTextFieldsEnabled:false,\n            lenderMenuItems:[],\n            selectedTierIndex:0,\n            allTierNames:[]\n        };\n\n        beginningState.tierMenuItems.push(<MenuItem key={\"tier_please_select_item\"}value={PLEASE_SELECT_INDEX}>Please select tier</MenuItem>);\n\n        return beginningState;\n    }\n\n    componentWillReceiveProps(nextProps){\n        let lenderMenuItems = [];\n        let allLenderNames = [];\n\n        for(let i = 0; i < nextProps.lenders.length; i++){\n            let lender = nextProps.lenders[i];\n\n            lenderMenuItems.push(<MenuItem key={\"lender_name_\" + i} value={i+1}>{lender.name}</MenuItem>);\n            allLenderNames.push(lender.name);\n        }\n\n        this.setState({lenderMenuItems:lenderMenuItems, allLenderNames:allLenderNames});\n    }\n\n    textboxOnChange(event, fieldLabel){\n        let newValue = event.target.value;\n        let isError = isNaN(newValue);\n        console.log(isError);\n\n        if (fieldLabel in this.state.currencyFields){\n            let newCurrencyFields = {...this.state.currencyFields};\n            newCurrencyFields[fieldLabel] =  {\n                value:newValue,\n                error:isError\n            }\n\n            this.setState({currencyFields:newCurrencyFields});\n        }else if (fieldLabel in this.state.percentageFields){\n            let newPercentageFields = {...this.state.percentageFields};\n            newPercentageFields[fieldLabel] = {\n                value:newValue,\n                error:isError\n            }\n            this.setState({percentageFields:newPercentageFields})\n        }\n    }\n\n    selectLenderEvent(event){\n        let index = event.target.value;\n        let indexMinusOne = index - 1;\n\n        let newState = {};\n        newState.selectedLenderIndex = index;\n\n        let isPleaseSelectItemSelected = index == PLEASE_SELECT_INDEX;\n\n        // // Update lender logo\n        // if (isPleaseSelectItemSelected){\n        //     newState.selectedLenderImage = null;\n        //     newState.isTierSelectEnabled = false;\n        // }else{\n        //     newState.selectedLenderImage = this.lenders[indexMinusOne].img_url;\n        //     newState.isTierSelectEnabled = true;\n        // }\n\n        // Update tiers\n        if (!isPleaseSelectItemSelected){\n            let selectedLenderId = this.props.lenders[indexMinusOne].id;\n            let allTierOfSelectedLender = this.props.lenderPrograms.filter(lenderProgram  => lenderProgram.lender_id == selectedLenderId).map(lenderProgram => lenderProgram.name);\n            let newTierMenuItems = [];\n            newTierMenuItems.push(<MenuItem value={PLEASE_SELECT_INDEX}>Please select tier</MenuItem>);\n\n            for (let i = 0; i < allTierOfSelectedLender.length; i++) {\n                let itemValue = i + 1;\n\n                newTierMenuItems.push(<MenuItem value={itemValue}>{allTierOfSelectedLender[i]}</MenuItem>)\n            }\n\n            newState.tierMenuItems = newTierMenuItems;\n            newState.isTierSelectEnabled = true;\n            newState.allTierNames = allTierOfSelectedLender;\n        }\n\n        newState.selectedTierIndex = PLEASE_SELECT_INDEX;\n\n        this.setState(newState);\n    }\n\n    selectTierEvent(event){\n        let newState = {...this.textfieldsBeginningState()};\n\n        newState.selectedTierIndex = event.target.value;\n\n        let isPleaseSelectItemSelected = event.target.value == PLEASE_SELECT_INDEX;\n\n        if(isPleaseSelectItemSelected){\n            newState.isTextFieldsEnabled = false;\n        }else{\n            newState.isTextFieldsEnabled = true;\n        }\n\n        this.setState(newState);\n    }\n\n    reset(){\n        this.setState(this.filterBeginningState());\n    }\n\n    render(){\n        return (\n            <Grid container spacing={5}>\n                <Grid item xs={12}>\n                    <Select onChange={this.selectLenderEvent} value={this.state.selectedLenderValue} style={{width:'100%'}}>\n                        {this.state.lenderMenuItems}\n                    </Select>\n                </Grid>\n                {/*<Grid item xs={12} style={{textAlign:\"center\"}}>*/}\n                {/*    <img src={this.state.selectedLenderImage} {...this.state.selectedLenderImage == null? {style:{width:'150px', height:'150px', visibility:\"hidden\"}}:{style:{width:'150px', height:'150px'}}} />*/}\n                {/*</Grid>*/}\n                <Grid item xs={12}>\n                    <Select style={{width:'100%'}} disabled={!this.state.isTierSelectEnabled} value={this.state.selectedTierIndex} onChange={this.selectTierEvent}>\n                        {this.state.tierMenuItems}\n                    </Select>\n                </Grid>\n                {Object.keys(this.state.currencyFields).map(currencyFieldLabel => (\n                    <Grid item xs={6} sm={3} md={6} style={{padding:10}}><TextField disabled={!this.state.isTextFieldsEnabled}\n                                                         label={currencyFieldLabel}\n                                                         variant=\"outlined\"\n                                                         onChange={(event) => this.textboxOnChange(event, currencyFieldLabel)}\n                                                               error = {this.state.currencyFields[currencyFieldLabel].error}\n                                                               helperText={this.state.currencyFields[currencyFieldLabel].error?\"Invalid Value\":\"\"}\n                                                               value={this.state.currencyFields[currencyFieldLabel].value}\n                                                         InputProps={{\n                                                             startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n                                                         }\n                                                         }\n                                                         size={\"small\"}\n                    /></Grid>\n                        )\n                    )\n                }\n                {Object.keys(this.state.percentageFields).map(percentageFieldLabel => (\n                        <Grid item xs={6} sm={3} md={6} style={{padding:10}}><TextField disabled={!this.state.isTextFieldsEnabled}\n                                                             label={percentageFieldLabel}\n                                                             variant=\"outlined\"\n                                                             onChange={(event) => this.textboxOnChange(event, percentageFieldLabel)}\n                                                             error = {this.state.percentageFields[percentageFieldLabel].error}\n                                                                   helperText={this.state.percentageFields[percentageFieldLabel].error?\"Invalid Value\":\"\"}\n                                                             value={this.state.percentageFields[percentageFieldLabel].value}\n                                                             InputProps={{\n                                                                 startAdornment: <InputAdornment position=\"start\">%</InputAdornment>,\n                                                             }}\n                                                             size={\"small\"}\n                        /></Grid>\n                    )\n                )\n                }\n            </Grid>\n        )\n    }\n}","import LenderFilter from \"./LenderFilter\";\nimport * as React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport {fetchLenderPrograms, fetchLenders, fetchLenderTerms} from \"./Api\";\nimport TextField from \"@material-ui/core/TextField\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\n\nexport default class LendersFilter extends React.Component{\n    constructor() {\n        super();\n        this.clearFiltersOnClick = this.clearFiltersOnClick.bind(this);\n        this.lenderFilter1 = React.createRef();\n        this.lenderFilter2 = React.createRef();\n        this.lenderFilter3 = React.createRef();\n\n        this.state = {\n            lenders: [],\n            lenderPrograms: [],\n            lenderTerms: []\n        }\n\n        Promise.all([fetchLenders(), fetchLenderPrograms(), fetchLenderTerms()]).then(async([lenders, lenderPrograms, lenderTerms]) => {\n            const lendersJson = await lenders.json();\n            const lenderProgramsJson = await lenderPrograms.json();\n            const lenderTermsJson = await lenderTerms.json();\n\n            return [lendersJson, lenderProgramsJson, lenderTermsJson];\n        }).then(([lenders, lenderPrograms, lenderTerms]) => {\n            this.setState({lenders:lenders, lenderPrograms:lenderPrograms, lenderTerms:lenderTerms});\n        });\n    }\n\n    clearFiltersOnClick(event){\n        this.lenderFilter1.current.reset();\n        this.lenderFilter2.current.reset();\n        this.lenderFilter3.current.reset();\n    }\n\n    getFiltersInputs(){\n        return [this.lenderFilter1.current.state, this.lenderFilter2.current.state, this.lenderFilter3.current.state];\n    }\n\n    hasError(){\n        return this.lenderFilter1.current.hasError() || this.lenderFilter2.current.hasError() || this.lenderFilter3.current.hasError();\n    }\n\n    getLenderData(){\n        return [this.state.lenders, this.state.lenderPrograms, this.state.lenderTerms];\n    }\n\n    render(){\n        return (\n            <React.Fragment>\n                <Grid container direction={\"row\"} spacing={4}>\n                    <Grid item xs={12}>\n                        Customer Name: <TextField variant=\"outlined\" size={\"small\"}/>\n                    </Grid>\n                    <Grid item md={4}>\n                        <LenderFilter ref={this.lenderFilter1} lenders={this.state.lenders} lenderPrograms={this.state.lenderPrograms} lenderTerms={this.state.lenderTerms}/>\n                    </Grid>\n                    <Grid item md={4}>\n                        <LenderFilter ref={this.lenderFilter2} lenders={this.state.lenders} lenderPrograms={this.state.lenderPrograms} lenderTerms={this.state.lenderTerms}/>\n                    </Grid>\n                    <Grid item md={4}>\n                        <LenderFilter ref={this.lenderFilter3} lenders={this.state.lenders} lenderPrograms={this.state.lenderPrograms} lenderTerms={this.state.lenderTerms}/>\n                    </Grid>\n                    <Grid item xs={12} style={{textAlign:\"center\"}}>\n                        <Button variant=\"contained\" color=\"primary\" onClick={this.props.submitOnClick}>Submit</Button>\n                        <Button variant=\"contained\" color={\"secondary\"} onClick={this.clearFiltersOnClick} style={{marginLeft:10}}>Reset</Button>\n                    </Grid>\n                </Grid>\n            </React.Fragment>\n        )\n    }\n}","import * as React from \"react\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\n\nexport default class CarDescription extends React.Component {\n    getCarTitle() {\n        let year = this.getRowValue('YEAR');\n        let make = this.getRowValue('MAKE');\n        let model = this.getRowValue('MODEL');\n        let trim = this.getRowValue('TRIM');\n\n        return `${year} ${make} ${model} ${trim}`;\n    }\n\n    getRowValue(rowName){\n        let row = this.getRowWithName(rowName);\n\n        if (row != null){\n            return row.value;\n        }\n\n        return '';\n    }\n\n    getRowWithName(rowName){\n        let matches = this.props.details.filter(row => (row.name == rowName));\n\n        if (matches.length > 0){\n            return matches[0];\n        }\n\n        return null;\n    }\n    render() {\n        return (\n            <Paper style={{padding: \"20px\", backgroundColor: \"rgb(247, 248, 248)\"}}>\n                <Table>\n                    <TableRow>\n                        <TableCell colSpan={2} style={{textAlign: \"center\"}}><b\n                            style={{fontSize: \"1.2rem\"}}>{this.getCarTitle()}</b></TableCell>\n                    </TableRow>\n                    {this.props.details.map(row => (\n                        <TableRow>\n                            <TableCell style={{padding: \"0px\"}}>\n                                <b>{row.name}</b>\n                            </TableCell>\n                            <TableCell style={{padding: \"0px\"}}>\n                                {row.value}\n                            </TableCell>\n                        </TableRow>\n                    ))}\n                </Table>\n            </Paper>\n        )\n    }\n}","import * as React from \"react\";\nimport ImageGallery from 'react-image-gallery';\nimport 'react-image-gallery/styles/css/image-gallery.css';\nimport './CarImagesGallery.css';\n\nexport default class CarImagesGallery extends React.Component{\n    render(){\n        return (\n            <ImageGallery items={this.props.images} showPlayButton={false} showFullscreenButton={false}/>\n        );\n    }\n}","import * as React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\n\nexport default class CarShowElementButtons extends React.Component{\n    render(){\n        return <React.Fragment>\n            <Grid container spacing={1}>\n                <Grid item xs={6} md={2} lg={2}>\n                    <Button variant=\"contained\" color={\"primary\"} style={{width:\"100%\"}}>Save</Button>\n                </Grid>\n                <Grid item xs={6} md={2} lg={2}>\n                    <Button variant=\"contained\" color={\"primary\"} style={{width:\"100%\"}}>Pictures</Button>\n                </Grid>\n                <Grid item xs={6} md={2} lg={2}>\n                    <Button variant=\"contained\" color={\"primary\"} style={{width:\"100%\"}}>Breakdown</Button>\n                </Grid>\n                <Grid item xs={6} md={2} lg={2}>\n                    <Button variant=\"contained\" color={\"primary\"} style={{width:\"100%\"}}>Send</Button>\n                </Grid>\n            </Grid>\n        </React.Fragment>\n    }\n}","import * as React from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CarDescription from \"./CarDescription\";\nimport CarCalculation from \"./CarCalculation\";\nimport CarImagesGallery from \"./CarImagesGallery\";\nimport CarShowElementButtons from \"./CarShowElementButtons\";\nimport Grid from \"@material-ui/core/Grid\";\n\nexport default class CarShowElement extends React.Component{\n    excludeCarDetailFields(fieldName){\n        let excludedFields = ['id', 'images', 'img_url', 'x_clean', 'clean', 'average', 'rough', 'series'];\n\n        return excludedFields.includes(fieldName);\n    }\n\n    convertFieldNameToLabel(fieldName){\n        let convertDict = {\n            'total_cost': 'TOTAL COST'\n        }\n\n        if (fieldName in convertDict){\n            return convertDict[fieldName];\n        }\n\n        return fieldName\n    }\n\n    isCurrencyField(fieldName){\n        return ['total_cost'].includes(fieldName);\n    }\n    convertToCarDetails(carJson){\n        let result = [];\n        let currencySymbol = '$';\n\n        for(let key in carJson){\n            if (!this.excludeCarDetailFields(key)){\n                let name = this.convertFieldNameToLabel(key).toUpperCase();\n                let value = carJson[key];\n\n                if (this.isCurrencyField(key)){\n                    value = currencySymbol + value;\n                }\n\n                result.push({\n                    name: name,\n                    value: value\n                });\n            }\n        }\n\n        return result;\n    }\n\n    render() {\n        return (\n           <Card style={{width:\"100%\"}}>\n               <CardContent>\n                   <Grid container spacing={2}>\n                       <Grid item xs={12} lg={7}>\n                            <CarImagesGallery images={this.props.images}/>\n                       </Grid>\n                       <Grid item xs={12} lg={5}>\n                           <CarDescription details={this.convertToCarDetails(this.props.details)}/>\n                       </Grid>\n                       <Grid item xs={12}>\n                           <CarCalculation filtersInputs={this.props.filtersInputs} lenderData={this.props.lenderData} details={this.props.details}/>\n                       </Grid>\n                       <Grid item xs={12}>\n                           <CarShowElementButtons />\n                       </Grid>\n                   </Grid>\n               </CardContent>\n           </Card>\n        )\n    }\n}","import React from 'react';\nimport './CarDescriptionNew.css';\n\nclass CarDescriptionNew extends React.Component{\n    getCarTitle(){\n        let carYear = this.props.details['year'];\n        let carMake = this.props.details['make'];\n        let carModel = this.props.details['model'];\n        let carTrim = this.props.details['trim'];\n\n        return `${carYear} ${carMake} ${carModel} ${carTrim}`;\n    }\n\n    keyToTitle(key){\n        let result = key.replace('_',' ');\n\n        return result\n            .toLowerCase()\n            .split(' ')\n            .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n            .join(' ');\n    }\n\n    render(){\n        return (\n            <React.Fragment>\n                <div className={\"car_title\"}><span>{this.getCarTitle()}</span></div>\n                <div>\n                    <span className={\"car_price\"}>${this.props.details['total_cost']}</span>\n                    <span className={\"car_mileage\"}> | {this.props.details['mileage']} mil.</span>\n                </div>\n                <ul style={{marginTop: '2rem', listStyle: 'none', padding: 0, columnCount: 2}}>\n                    {Object.keys(this.props.details).map((key, index) => {\n                        let ignoreKeys = ['total_cost', 'id', 'images', 'img_url', 'x_clean', 'clean', 'average', 'rough', 'series'];\n\n                        if (ignoreKeys.includes(key))\n                            return null;\n\n                        return (<li><strong>{this.keyToTitle(key)}</strong>: {this.props.details[key]}</li>);\n                    })}\n                </ul>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default CarDescriptionNew;","import * as React from \"react\";\nimport ImageGallery from 'react-image-gallery';\nimport 'react-image-gallery/styles/css/image-gallery.css';\n\nclass CarImagesNew extends React.Component {\n    render(){\n        return (\n            <ImageGallery items={this.props.images} showPlayButton={false} showFullscreenButton={false} showBullets={true} showThumbnails={false}/>\n        )\n    }\n}\n\nexport default CarImagesNew;\n\n","import React from 'react';\nimport Grid from \"@material-ui/core/Grid\";\nimport CarDescriptionNew from \"./CarDescriptionNew\";\nimport CarImagesNew from \"./CarImagesNew\";\nimport './CarNew.css';\n\nclass CarNew extends React.Component {\n    createImages(images){\n        return images.map(image => {\n            return {original:image};\n        });\n    }\n\n    render() {\n        return (\n                <Grid container className={\"car_container\"}>\n                    <Grid item xs={12} sm={6}>\n                        <CarImagesNew images={this.createImages(this.props.images)} />\n                    </Grid>\n                    <Grid item xs={12} sm={6} style={{padding:15}}>\n                        <CarDescriptionNew details={this.props.details}/>\n                    </Grid>\n                </Grid>\n        );\n    }\n}\n\nexport default CarNew;","import * as React from \"react\";\nimport CarShowElement from \"./CarShowElement\";\nimport Grid from \"@material-ui/core/Grid\";\nimport {styled, useTheme} from \"@material-ui/core/styles\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport {css} from \"@emotion/core\";\nimport {ClipLoader} from \"react-spinners\";\nimport './CarShow.css';\nimport {fetchCars} from \"./Api\";\nimport InfiniteScroll from \"react-infinite-scroller\";\nimport {calculateProfitFirstInterest} from \"./CarCalculation\";\nimport CarNew from \"./CarNew\";\n\nconst clipLoaderCss = css`\n    border-color:rgb(55,71,172);\n    position:absolute;\n    border-bottom-color:transparent;\n    top:50%;\n`;\n\nclass CarShow extends React.Component {\n    constructor() {\n        super();\n\n        this.state = {\n            carShowElements: [],\n            carDetailsList: [],\n            carImagesList: [],\n            isLoading: false,\n            hasMoreItems: false,\n            filtersInputs: null,\n            lenderData: null\n        }\n    }\n\n    componentDidMount() {\n        this.updateCars(this.props.carJson, this.props.filtersInputs, null, 0);\n    }\n\n    updateCars(carJson, filtersInputs, lenderData, sortBy) {\n        this.setState({isLoading: true, carDetailsList: [], carImagesList: [], carShowElements: [], filtersInputs: filtersInputs, lenderData: lenderData});\n\n        if(carJson != ''){\n            let json = carJson;\n            let carDetailsList = []\n            let carImagesDict = {}\n\n            for (let i = 0; i < json.length; i++) {\n                let car_details = json[i]\n                let car_images = this.getCarImages(json[i]);\n\n                carDetailsList.push(car_details);\n                carImagesDict[car_details['id']] = car_images;\n            }\n\n            if (sortBy != 0){\n                switch(sortBy){\n                    case 1:\n                        // Year\n                        carDetailsList.sort((carDetail1, carDetail2) => parseInt(carDetail1.year) - parseInt(carDetail2.year));\n                        break;\n                    case 2:\n                        // Year\n                        carDetailsList.sort((carDetail1, carDetail2) => this.reverseNumberSign(parseInt(carDetail1.year) - parseInt(carDetail2.year)));\n                        break;\n                    case 3:\n                        // Make\n                        carDetailsList.sort((carDetail1, carDetail2) => carDetail1.make.localeCompare(carDetail2.make));\n                        break;\n                    case 4:\n                        // Model\n                        carDetailsList.sort((carDetail1, carDetail2) => carDetail1.model.localeCompare(carDetail2.model));\n                        break;\n                    case 5:\n                        // Mileage\n                        carDetailsList.sort((carDetail1, carDetail2) => parseInt(carDetail1.mileage) - parseInt(carDetail2.mileage));\n                        break;\n                    case 6:\n                        // Mileage\n                        carDetailsList.sort((carDetail1, carDetail2) => this.reverseNumberSign(parseInt(carDetail1.mileage) - parseInt(carDetail2.mileage)));\n                        break;\n                    case 7:\n                        // Cost\n                        carDetailsList.sort((carDetail1, carDetail2) => parseInt(carDetail1.total_cost) - parseInt(carDetail2.total_cost));\n                        break;\n                    case 8:\n                        // Cost\n                        carDetailsList.sort((carDetail1, carDetail2) => this.reverseNumberSign(parseInt(carDetail1.total_cost) - parseInt(carDetail2.total_cost)));\n                        break;\n                    case 9:\n                        // Profit\n                        //carDetailsList.sort((carDetail1, carDetail2) => parseFloat(calculateProfitFirstInterest(filtersInputs, lenderData, carDetail1)) - parseFloat(calculateProfitFirstInterest(filtersInputs, lenderData, carDetail2)));\n                        break;\n                    case 8:\n                        // Profit\n                        //carDetailsList.sort((carDetail1, carDetail2) => this.reverseNumberSign(parseFloat(calculateProfitFirstInterest(filtersInputs, lenderData, carDetail1)) - parseFloat(calculateProfitFirstInterest(filtersInputs, lenderData, carDetail2))));\n                        break;\n                }\n            }\n\n            let carImagesList = [];\n\n            for (let i = 0; i < carDetailsList.length;i++){\n                carImagesList.push(carImagesDict[carDetailsList[i]['id']]);\n            }\n\n            let carShowElements = [];\n\n            for (let i = 0; i < 10 && i < carDetailsList.length; i++) {\n                let carDetails = carDetailsList[i];\n                let carImages = carImagesList[i];\n\n                carShowElements.push(\n                    <Grid item xs={12} xl={6}>\n                        {/*<CarShowElement details={carDetails} images={carImages} filtersInputs={filtersInputs}*/}\n                        {/*                lenderData={lenderData}/>*/}\n                        <CarNew details={carDetails} images={carImages} filtersInputs={filtersInputs} lenderData={lenderData}/>\n                    </Grid>\n                )\n            }\n\n            this.setState({\n                carDetailsList: carDetailsList,\n                carImagesList: carImagesList,\n                isLoading: false,\n                carShowElements: carShowElements,\n                hasMoreItems: carDetailsList.length > 10\n            });\n        }\n    }\n\n    reverseNumberSign(number){\n        return -number;\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.updateCars(nextProps.carJson, nextProps.filtersInputs, nextProps.lenderData, nextProps.sortCriteria);\n    }\n\n    getCarImages(carJson) {\n        let dict = [];\n        let imageNames = [];\n\n        for (let i = 0; i < carJson[\"images\"].length; i++) {\n            let image = carJson[\"images\"][i];\n\n            let imageSrc = image.src;\n            let imageName = image.name;\n            // console.log(imageSrc);\n\n            imageNames.push(imageName);\n            if (imageName in imageNames){\n                console.warn(imageName + ' is already in dicationary');\n            }\n\n            dict[imageName] = imageSrc;\n        }\n\n        // Sort image names\n        imageNames.sort();\n        let result = [];\n\n        for (let i = 0; i < imageNames.length;i++){\n            result.push(dict[imageNames[i]]);\n        }\n\n        return result;\n    }\n\n    loadItems(page) {\n        let numLoadItems = 10;\n        let newCarShowElements = this.state.carShowElements;\n        let originalLength = this.state.carShowElements.length;\n\n        if (this.state.carShowElements.length < this.state.carDetailsList.length){\n            while(newCarShowElements.length < originalLength + numLoadItems && newCarShowElements.length < this.state.carDetailsList.length){\n                newCarShowElements.push(\n                    <Grid item xs={12} xl={6}>\n                        {/*<CarShowElement details={this.state.carDetailsList[newCarShowElements.length]} images={this.state.carImagesList[newCarShowElements.length]} filtersInputs={this.state.filtersInputs} lenderData={this.state.lenderData}/>*/}\n                        <CarNew details={this.state.carDetailsList[newCarShowElements.length]} images={this.state.carImagesList[newCarShowElements.length]} filtersInputs={this.state.filtersInputs} lenderData={this.state.lenderData}/>\n                    </Grid>\n                )\n            }\n        }\n\n        let hasMoreItems = (newCarShowElements.length + numLoadItems) < this.state.carDetailsList.length;\n\n        this.setState({hasMoreItems:hasMoreItems, carShowElements:newCarShowElements});\n    }\n\n    render() {\n        const loader = <div className=\"loader\">Loading ...</div>;\n\n        return (\n            <InfiniteScroll\n                pageStart={0}\n                loadMore={this.loadItems.bind(this)}\n                hasMore={this.state.hasMoreItems}\n                loader={loader}>\n                <Grid container spacing={4} className={`car-show-grid ${this.state.isLoading ? \"loading\" : \"\"}`}>\n                    {this.state.isLoading ?\n                        <div className={\"spinner\"}><ClipLoader css={clipLoaderCss}/></div> : this.state.carShowElements}\n                </Grid>\n            </InfiniteScroll>\n        );\n    }\n}\n\nexport default CarShow;","import * as React from \"react\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Select from \"@material-ui/core/Select\";\n\nclass Sort extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            selectedCriteriaIndex: 0\n        }\n\n        this.sortCriteriaList = [\"Sort by (choose)\",\n                                \"Year (Latest -> Newest)\",\n                                \"Year (Newest -> Latest)\",\n                                \"Make\",\n                                \"Model\",\n                                \"Mileage (Lowest -> Highest)\",\n                                \"Mileage (Highest -> Lowest)\",\n                                \"Cost (Lowest -> Highest)\",\n                                \"Cost (Highest -> Lowest)\",\n                                \"Profit (Lowest -> Highest)\",\n                                \"Profit (Highest -> Lowest)\"]\n    }\n\n    selectCriteriaAtIndex(index){\n        this.setState(\n            {selectedCriteriaIndex:index}\n        )\n    }\n\n    getSelectedCriteriaIndex(){\n        return this.state.selectedCriteriaIndex;\n    }\n\n    getSelectedCriteriaName(){\n        return this.sortCriteriaList[this.state.selectedCriteriaIndex];\n    }\n\n    render(){\n        return (\n            <Select onChange={this.props.onSelect} value={this.state.selectedCriteriaIndex}>\n                {\n                    this.sortCriteriaList.map((sortCriteria, index) =>\n                        <MenuItem value={index}>{sortCriteria}</MenuItem>\n                    )\n                }\n            </Select>\n        );\n    }\n}\n\nexport default Sort;","import React from 'react';\nimport {Checkbox} from '@material-ui/core';\nimport Grid from '@material-ui/core/Grid';\n\nclass ListFilter extends React.Component{\n    constructor(props) {\n        super(props)\n\n        let optionCheckedDict = {};\n\n        for(let option of this.props.options){\n            optionCheckedDict[option] = true;\n        }\n\n        this.state = {\n            'Select All': true,\n            ...optionCheckedDict\n        };\n\n        this.selectAll = this.selectAll.bind(this);\n        this.optionOnchange = this.optionOnchange.bind(this);\n    }\n\n    getTitle(){\n        return this.props.title;\n    }\n\n    getSelectedOptions(){\n        let selectedOptions = [];\n\n        for (let option of this.props.options){\n            if (this.state[option]){\n                selectedOptions.push(option);\n            }\n        }\n\n        return selectedOptions;\n    }\n\n\n    selectAll(event){\n        console.log('Select all');\n        let selectAllCheckbox = event.target;\n        let selectedCheckboxState = selectAllCheckbox.checked;\n        let newState = {...this.state};\n\n        for(let option of this.props.options){\n            if (selectAllCheckbox.checked){\n                newState[option] = true;\n            }else {\n                newState[option] = false;\n            }\n        }\n\n        newState['Select All'] = selectedCheckboxState;\n        this.setState({...newState});\n    }\n\n    optionOnchange(event, name){\n        let checkbox = event.target;\n        let newState = {...this.state};\n        newState[name] = checkbox.checked;\n\n        let selectAll = true;\n\n        for(let option of this.props.options){\n            if(!newState[option]){\n                selectAll = false;\n            }\n        }\n\n        newState['Select All'] = selectAll;\n\n        this.setState(newState);\n        console.log((checkbox.checked?'Check ':'Unchecked ') + name);\n    }\n\n    render(){\n        return (\n            <Grid container>\n                <Grid item xs={12}>\n                    <Checkbox checked={this.state['Select All']} color={\"primary\"} onChange={this.selectAll} />All\n                </Grid>\n                {\n                    this.props.options.map(item => (\n                        <Grid item xs={12}>\n                            <Checkbox checked={this.state[item]} color={\"primary\"} onChange={(event) => this.optionOnchange(event,item)}/>{item}\n                        </Grid>\n                    ))\n                }\n            </Grid>\n        )\n    }\n}\n\nexport default ListFilter;","import React from 'react';\n\nimport Grid from '@material-ui/core/Grid';\nimport TextField from \"@material-ui/core/TextField\";\n\nclass RangeFilter extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            \"min\":\"\",\n            \"max\":\"\"\n        }\n    }\n\n    textFieldOnChange(event, textFieldName){\n        let newState = {};\n\n        newState[textFieldName] = event.target.value;\n\n        this.setState(newState);\n    }\n\n    getMin(){\n        return this.state.min;\n    }\n\n    getMax(){\n        return this.state.max;\n    }\n\n    getMinTitle(){\n        return this.props.minTitle == undefined?\"Min\":this.props.minTitle;\n    }\n\n    getMaxTitle(){\n        return this.props.maxTitle == undefined?\"Max\":this.props.maxTitle;\n    }\n\n    getToText(){\n        return this.props.toText == undefined?\"To\":this.props.toText;\n    }\n\n    render(){\n        return (\n            <Grid container>\n                <Grid item xs={4}>\n                    <TextField value={this.state[\"min\"]} label={this.getMinTitle()}\n                               variant=\"outlined\" size={\"small\"} onChange={(event) => this.textFieldOnChange(event, \"min\")}/>\n                </Grid>\n                <Grid item xs={4} align={\"center\"}>\n                    {this.getToText()}\n                </Grid>\n                <Grid item xs={4}>\n                    <TextField value={this.state[\"max\"]} label={this.getMaxTitle()}\n                               variant=\"outlined\" size={\"small\"} onChange={(event) => this.textFieldOnChange(event, \"max\")}/>\n                </Grid>\n            </Grid>\n        )\n    }\n}\n\nexport default RangeFilter;","import React from 'react';\nimport ListFilter from \"./ListFilter\";\nimport RangeFilter from \"./RangeFilter\";\nimport {Collapse} from \"@material-ui/core\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { IconButton } from '@material-ui/core';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport './Filter.css';\n\nclass Filter extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {};\n    }\n\n    expandBtnOnClick(event, filterTitle) {\n        let stateKeyName = filterTitle + '_expand';\n        let newState = {};\n        newState[stateKeyName] = !this.state[stateKeyName];\n\n        this.setState(newState);\n    }\n\n\n    render(){\n        let lastFilterIndex = this.props.filters.length - 1;\n\n        return (\n            <Grid container className={\"filter_main_content\"}>\n                {\n                    this.props.filters.map((filter, filterIndex) => {\n                        let filterType = filter[\"type\"];\n                        let filterComponent = undefined;\n\n                        if (filterType == \"list\"){\n                            filterComponent = <ListFilter {...filter} />;\n                        }else if (filterType == \"range\"){\n                            filterComponent = <RangeFilter {...filter} />\n                        }\n\n                        return (\n                            <React.Fragment>\n                                <Grid item xs={12} className={\"padding10\"}>\n                                    <Grid container>\n                                        <Grid item xs={10}>\n                                            <span className={'filter_title'}>{filter[\"title\"]}</span>\n                                        </Grid>\n                                        <Grid item xs={2} align='right'>\n                                            <IconButton onClick={(event) => this.expandBtnOnClick(event, filter[\"title\"])}>\n                                                {this.state[filter[\"title\"] + \"_expand\"]?(<ExpandLess/>):(<ExpandMore />)}\n                                            </IconButton>\n                                        </Grid>\n                                    </Grid>\n                                    <Collapse in={this.state[filter[\"title\"] + \"_expand\"]}>\n                                    {filterComponent}\n                                    </Collapse>\n                                </Grid>\n                                {\n                                    filterIndex != lastFilterIndex ?\n                                    (\n                                        <Grid item xs={12}>\n                                            <hr className={\"line_seperator\"}/>\n                                        </Grid>\n                                    ) : null\n                                }\n                            </React.Fragment>\n                        );\n                    })\n                }\n            </Grid>\n        )\n    }\n}\n\nexport default Filter;","import React from 'react';\nimport Grid from \"@material-ui/core/Grid\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport TextField from \"@material-ui/core/TextField\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport Button from \"@material-ui/core/Button\";\n\nclass Lender extends React.Component {\n    constructor(props) {\n        super(props);\n\n        let lenderMenuItems = [];\n\n        lenderMenuItems.push(<MenuItem value={0}>Please select lender</MenuItem>);\n        for (let i = 0; i < this.props.lenders.length; i++){\n            let lenderName = this.props.lenders[i];\n\n            lenderMenuItems.push(<MenuItem value={i + 1}>{lenderName}</MenuItem>);\n        }\n\n        this.state = {\n            // Lender\n            lenderSelectDisabled:false,\n            lenderMenuItems:lenderMenuItems,\n            lenderSelectedIndex:0,\n\n            // Tier\n            tierSelectDisabled:true,\n            tierMenuItems:[],\n            tierSelectedIndex:0,\n\n            currencyFields:{\n                \"Payment\":{\n                    value: \"\",\n                    error: false\n                },\n                \"Down Payment\":{\n                    value: \"\",\n                    error: false\n                },\n                \"Trade Allowance\":{\n                    value: \"\",\n                    error: false\n                },\n                \"Trade Payoff\":{\n                    value: \"\",\n                    error: false\n                },\n                \"Trace a.c.v\":{\n                    value: \"\",\n                    error: false\n                }\n            },\n            percentageFields:{\n                \"Tax\":{\n                    value: \"\",\n                    error: false\n                }\n            },\n            isTextFieldsEnabled:false\n        }\n\n        this.selectLender = this.selectLender.bind(this);\n        this.selectTier = this.selectTier.bind(this);\n    }\n\n    textboxOnChange(event, fieldLabel){\n        let newValue = event.target.value;\n        let isError = isNaN(newValue);\n        console.log(isError);\n\n        if (fieldLabel in this.state.currencyFields){\n            let newCurrencyFields = {...this.state.currencyFields};\n            newCurrencyFields[fieldLabel] =  {\n                value:newValue,\n                error:isError\n            }\n\n            this.setState({currencyFields:newCurrencyFields});\n        }else if (fieldLabel in this.state.percentageFields){\n            let newPercentageFields = {...this.state.percentageFields};\n            newPercentageFields[fieldLabel] = {\n                value:newValue,\n                error:isError\n            }\n            this.setState({percentageFields:newPercentageFields})\n        }\n    }\n\n    selectLender(event){\n        let selectIndex = event.target.value;\n        let tierSelectDisabled = true;\n\n        if (selectIndex != 0){\n            tierSelectDisabled = false;\n        }\n\n        let tierMenuItems = [];\n        tierMenuItems.push(<MenuItem value={0}>Please select tier</MenuItem>);\n\n        this.setState({\n            lenderSelectedIndex:selectIndex,\n            tierSelectDisabled: tierSelectDisabled,\n            tierMenuItems:tierMenuItems\n        });\n    }\n\n    selectTier(event){\n        let selectIndex = event.target.value;\n\n        this.setState({\n            tierSelectedIndex : selectIndex,\n            isTextFieldsEnabled:true\n        })\n    }\n\n    render(){\n        return (\n          <Grid container className={\"lender_main_content padding10\"}>\n              <Grid item xs={12}>\n                  <Select onChange={this.selectLender} value={this.state.lenderSelectedIndex} disabled={this.state.lenderSelectDisabled} style={{width:'100%'}}>\n                      {this.state.lenderMenuItems}\n                  </Select>\n              </Grid>\n              <Grid item xs={12}>\n                  <Select onChange={this.selectTier} value={this.state.tierSelectedIndex} disabled={this.state.tierSelectDisabled} style={{width:'100%'}}>\n                      {this.state.tierMenuItems}\n                  </Select>\n              </Grid>\n              {Object.keys(this.state.currencyFields).map(currencyFieldLabel => (\n                      <Grid item xs={6} sm={3} md={6} style={{padding:10}}><TextField disabled={!this.state.isTextFieldsEnabled}\n                                                                                      label={currencyFieldLabel}\n                                                                                      variant=\"outlined\"\n                                                                                      onChange={(event) => this.textboxOnChange(event, currencyFieldLabel)}\n                                                                                      error = {this.state.currencyFields[currencyFieldLabel].error}\n                                                                                      helperText={this.state.currencyFields[currencyFieldLabel].error?\"Invalid Value\":\"\"}\n                                                                                      value={this.state.currencyFields[currencyFieldLabel].value}\n                                                                                      InputProps={{\n                                                                                          startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n                                                                                      }\n                                                                                      }\n                                                                                      size={\"small\"}\n                      /></Grid>\n                  )\n              )\n              }\n              {Object.keys(this.state.percentageFields).map(percentageFieldLabel => (\n                      <Grid item xs={6} sm={3} md={6} style={{padding:10}}><TextField disabled={!this.state.isTextFieldsEnabled}\n                                                                                      label={percentageFieldLabel}\n                                                                                      variant=\"outlined\"\n                                                                                      onChange={(event) => this.textboxOnChange(event, percentageFieldLabel)}\n                                                                                      error = {this.state.percentageFields[percentageFieldLabel].error}\n                                                                                      helperText={this.state.percentageFields[percentageFieldLabel].error?\"Invalid Value\":\"\"}\n                                                                                      value={this.state.percentageFields[percentageFieldLabel].value}\n                                                                                      InputProps={{\n                                                                                          startAdornment: <InputAdornment position=\"start\">%</InputAdornment>,\n                                                                                      }}\n                                                                                      size={\"small\"}\n                      /></Grid>\n                  )\n              )\n              }\n              <Grid item xs={12} style={{textAlign:\"center\"}}>\n                  <Button variant=\"contained\" color={\"primary\"}>Add</Button>\n                  <Button variant=\"contained\" color={\"secondary\"} style={{marginLeft:10}}>Reset</Button>\n              </Grid>\n          </Grid>\n        );\n    }\n}\n\nexport default Lender;","import React from 'react';\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Filter from './Filter';\nimport './LeftPanel.css';\nimport Lender from './Lender';\n\nclass LeftPanel extends React.Component{\n    constructor(props) {\n        super(props);\n\n        this.handleChange = this.handleChange.bind(this);\n        this.state = {\n            selectedTabIndex:0\n        }\n    }\n\n    handleChange(event, newSelectedTabIndex){\n        this.setState({selectedTabIndex:newSelectedTabIndex});\n    }\n\n    render(){\n        return (\n        <React.Fragment>\n            <Tabs value={this.state.selectedTabIndex} onChange={this.handleChange}>\n                <Tab label={\"Filter\"} className={this.state.selectedTabIndex==0?\"tab_selected\":\"tab_deselected\"}/>\n                <Tab label={\"Lender\"} className={this.state.selectedTabIndex==1?\"tab_selected\":\"tab_deselected\"} />\n            </Tabs>\n            {this.state.selectedTabIndex == 0?\n                <Filter\n                filters={[\n                    {\n                        \"title\":\"Make\",\n                        \"type\":\"list\",\n                        \"options\":[\"Make 1\", \"Make 2\"]\n                    },\n                    {\n                        \"title\":\"Model\",\n                        \"type\":\"list\",\n                        \"options\":[\"Model 1\", \"Model 2\"]\n                    },\n                    {\n                        \"title\":\"Year\",\n                        \"type\":\"range\",\n                        \"minTitle\":\"Min\",\n                        \"maxTitle\":\"Max\"\n                    },\n                    {\n                        \"title\":\"Mileage\",\n                        \"type\":\"range\",\n                        \"minTitle\":\"Min\",\n                        \"maxTitle\":\"Max\"\n                    },\n                    {\n                        \"title\":\"Total cost\",\n                        \"type\":\"range\",\n                        \"minTitle\":\"Min\",\n                        \"maxTitle\":\"Max\"\n                    }\n            ]} />:null}\n            {this.state.selectedTabIndex == 1?<Lender lenders={['Lender 1', 'Lender 2']} />:null}\n        </React.Fragment>\n        );\n    }\n}\n\nexport default LeftPanel;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport LenderFilter from \"./LenderFilter\";\nimport LendersFilter from \"./LenderFilters\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Form from \"@material-ui/core/FormControl\"\nimport CarShow from \"./CarShow\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Paper from \"@material-ui/core/Paper\";\nimport {useTheme} from \"@material-ui/core/styles\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\nimport {FaFilter} from \"react-icons/all\";\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Menu from \"@material-ui/core/Menu\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport ScrollToTop from \"react-scroll-to-top\";\nimport \"react-scroll-to-top/lib/index.css\";\nimport Sort from \"./Sort\";\nimport LeftPanel from \"./LeftPanel\";\nimport {fetchCars} from \"./Api\";\n\nconst App = (props) => {\n    const theme = useTheme();\n    const mdUp = useMediaQuery(theme.breakpoints.up(\"md\"));\n\n    return <AppClass isBigScreen={mdUp}/>\n}\n\nclass AppClass extends React.Component{\n    constructor() {\n        super();\n\n        this.carshowRef= React.createRef();\n        this.lendersFilter = React.createRef();\n        this.sortRef = React.createRef();\n        // this.sortRef1 = React.createRef();\n        // this.sortRef2 = React.createRef();\n        this.filterOnClick = this.filterOnClick.bind(this);\n        this.submitOnclick = this.submitOnclick.bind(this);\n        this.menuBtnOnClick = this.menuBtnOnClick.bind(this);\n        this.closeMenu = this.closeMenu.bind(this);\n        this.sortSelect = this.sortSelect.bind(this);\n        // this.sortSelect1 = this.sortSelect1.bind(this);\n        // this.sortSelect2 = this.sortSelect2.bind(this);\n\n        this.state = {\n            displayFilters: false,\n            displayCarShow: true,\n            anchorEl: null,\n            filtersInputs: [],\n            sort:0,\n            carJson:'',\n        }\n\n        fetchCars()\n            .then(res => res.json())\n            .then(json => {\n                this.setState(\n                    { carJson:json }\n                )\n            });\n    }\n\n\n    filterOnClick(event){\n        console.log('Filter')\n        this.setState({displayFilters:!this.state.displayFilters});\n    }\n\n    submitOnclick(){\n        if(!this.lendersFilter.current.hasError()) {\n            this.setState({\n                displayFilters: false,\n                displayCarShow: true,\n                filtersInputs: this.lendersFilter.current.getFiltersInputs(),\n                lenderData: this.lendersFilter.current.getLenderData()\n            })\n            window.scrollTo(0, 0);\n        }\n    }\n\n    menuBtnOnClick(event){\n        this.setState({anchorEl:event.currentTarget})    ;\n    }\n\n    closeMenu(){\n        this.setState({anchorEl:null});\n    }\n\n    sortSelect(event){\n        let criteriaIndex = event.target.value;\n        this.sortRef.current.selectCriteriaAtIndex(criteriaIndex);\n\n        this.setState({sort:criteriaIndex});\n    }\n\n    // sortSelect1(event){\n    //     let criteriaIndex = event.target.value;\n    //     this.sortRef1.current.selectCriteriaAtIndex(criteriaIndex);\n    //     let newSort = this.state.sort;\n    //     newSort[1] = criteriaIndex;\n    //\n    //     this.setState({sort:newSort});\n    // }\n    //\n    // sortSelect2(event){\n    //     let criteriaIndex = event.target.value;\n    //     this.sortRef2.current.selectCriteriaAtIndex(criteriaIndex);\n    //     let newSort = this.state.sort;\n    //     newSort[2] = criteriaIndex;\n    //\n    //     this.setState({sort:newSort});\n    // }\n\n    render() {\n        return (\n            <React.Fragment>\n            <ScrollToTop smooth />\n            <Grid container style={{backgroundColor:\"rgb(247,248,248)\"}}>\n                <Grid item xl={1} xs={0} />\n                <Grid item xl={10} xs={12}>\n                    <AppBar position=\"static\">\n                        {this.props.isBigScreen ? (\n                            <React.Fragment>\n                                <Tabs>\n                                    <Tab label=\"Home\"/>\n                                    <Tab label=\"Rate Sheet\" disabled/>\n                                    <Tab label=\"Quick Quote\" disabled/>\n                                    <Tab label=\"Lender Assist\" disabled/>\n                                </Tabs>\n                            </React.Fragment>) : (\n                                <Toolbar>\n                                    <IconButton\n                                        aria-label=\"menu\"\n                                        aria-controls=\"menu-appbar\"\n                                        aria-haspopup=\"true\"\n                                        style={{\"color\":\"white\"}}\n                                        onClick={this.menuBtnOnClick}>\n                                        <MenuIcon />\n                                    </IconButton>\n                                    <Menu\n                                        id=\"menu-appbar\"\n                                        anchorEl={this.state.anchorEl}\n                                        anchorOrigin={{\n                                            vertical: 'top',\n                                            horizontal: 'right',\n                                        }}\n                                        keepMounted\n                                        transformOrigin={{\n                                            vertical: 'top',\n                                            horizontal: 'right',\n                                        }}\n                                        open={Boolean(this.state.anchorEl)}\n                                        onClose={this.closeMenu}\n                                    >\n                                        <MenuItem>HOME</MenuItem>\n                                        <MenuItem>RATE SHEET</MenuItem>\n                                        <MenuItem>QUICK QUOTE</MenuItem>\n                                        <MenuItem>LENDER ASSIST</MenuItem>\n                                    </Menu>\n                                </Toolbar>\n                            )\n                        }\n                    </AppBar>\n                </Grid>\n                <Grid item xl={1} xs={0}/>\n                <Grid item sm={1} xs={0}/>\n                <Grid item sm={2} xs={12}>\n                   <LeftPanel />\n                </Grid>\n                <Grid item sm={8} xs={12}>\n\n                </Grid>\n                <Grid item sm={1} xs={0}/>\n            </Grid>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import * as React from \"react\";\nimport Table from \"@material-ui/core/Table\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { useTheme } from '@material-ui/core/styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport Grid from \"@material-ui/core/Grid\";\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\n\nconst StyledTableCell = withStyles(theme => ({\n    head: {\n        backgroundColor: theme.palette.primary.main,\n        color: theme.palette.common.white,\n    },\n    body: {\n        fontSize: 14,\n    },\n}))(TableCell);\n\nconst StyledTableRow = withStyles(theme => ({\n    root: {\n        '&:nth-of-type(odd)': {\n            backgroundColor: theme.palette.background.default,\n        },\n    },\n}))(TableRow);\n\nconst CarCalculation = (props)=>{\n    const theme = useTheme();\n    const mdUp = useMediaQuery(theme.breakpoints.up(\"md\"));\n\n    return <CarCalculationClass isBigScreen={mdUp} {...props}/>\n}\n\nfunction mileageToKms(mileage){\n    return mileage * 1.60934;\n}\n\n\n\nfunction addCurrencySymbol(value){\n    if (value < 0){\n        return `-$${Math.abs(value)}`\n    }else{\n        return `$${value}`\n    }\n}\n\nfunction pv(rate, periods, payment, future, type) {\n    // Initialize type\n    var type = (typeof type === 'undefined') ? 0 : type;\n\n    // Evaluate rate and periods (TODO: replace with secure expression evaluator)\n    rate = eval(rate);\n    periods = eval(periods);\n\n    // Return present value\n    if (rate === 0) {\n        return - payment * periods - future;\n    } else {\n        return (((1 - Math.pow(1 + rate, periods)) / rate) * payment * (1 +rate * type) - future) / Math.pow(1 + rate, periods);\n    }\n}\n\nfunction getLenderId(lenderName, lenders){\n    for(let i = 0; i < lenders.length; i++){\n        if (lenderName == lenders[i].name)\n            return lenders[i].id;\n    }\n\n    return null;\n}\n\nexport function calculateProfitFirstInterest(filterInputs, lenderData, carDetails){\n    let calculationDetails = createCalculationDetail(-1, filterInputs, lenderData, carDetails);\n    let interestColumnIndex = 3;\n    let profitColumnIndex = 8;\n    let interests = calculationDetails[interestColumnIndex].split(',');\n\n    if (interests.length > 0) {\n        // Select first interest as default\n        let firstInterest = interests[0];\n\n        let calculationDetailsForFirstInterest = createCalculationDetail(firstInterest, filterInputs, lenderData, carDetails);\n        let profit = calculationDetailsForFirstInterest[profitColumnIndex];\n\n        if (profit != 'NOT_FOUND')\n            return profit;\n    }\n\n    return null;\n}\n\nfunction createCalculationDetail(selectedInterest, filterInputs, lenderData, carDetails){\n    console.log('createCalculationDetail()');\n    console.log(selectedInterest);\n    console.log(filterInputs);\n    console.log(lenderData);\n    console.log(carDetails);\n\n    let lenders = lenderData[0];\n    let lenderPrograms = lenderData[1];\n    let lenderTerms = lenderData[2];\n\n    let lenderName = filterInputs.allLenderNames[filterInputs.selectedLenderIndex - 1];\n    let tierName = filterInputs.allTierNames[filterInputs.selectedTierIndex - 1];\n    console.log('lenderName = ' + lenderName);\n    console.log('tierName = ' + tierName);\n\n    // Advance\n    let advance = 'NOT_FOUND';\n    let interest = 'NOT_FOUND';\n    let term = 'NOT_FOUND';\n    let foundLenderTerm = null;\n    let foundLenderProgram = null;\n    let lenderId = getLenderId(lenderName, lenders);\n    console.log('lenderId = ' + lenderId);\n\n    if(lenderId != null){\n        for(let lenderProgram of lenderPrograms){\n            if (lenderProgram.lender_id == lenderId && lenderProgram.name == tierName){\n                foundLenderProgram = lenderProgram;\n\n                // Advance\n                if(!isNaN(lenderProgram.advance)){\n                    advance = parseFloat(lenderProgram.advance);\n                }\n\n                // Interest\n                let rateMin = parseFloat(lenderProgram.rate_min);\n                let rateMax = parseFloat(lenderProgram.rate_max);\n                interest = '';\n\n                for(let rate = rateMin; rate < rateMax; rate+=1){\n                    interest += rate + ',';\n                }\n\n                interest += rateMax;\n\n                break;\n            }\n        }\n\n        let carKms = mileageToKms(parseFloat(carDetails.mileage));\n        console.log('carKms = ' + carKms);\n\n        for(let lenderTerm of lenderTerms){\n            if (lenderTerm.lender_id == lenderId && lenderTerm.min_kms <= carKms && lenderTerm.max_kms >= carKms && lenderTerm.year == parseInt(carDetails.year)){\n                // Term\n                term = lenderTerm.term;\n                foundLenderTerm = lenderTerm;\n                break;\n            }\n        }\n    }\n\n    console.log('advance = ' + advance);\n    console.log('interest = ' + interest);\n    console.log('term = ' + term);\n\n    let payment = parseFloat(filterInputs.currencyFields.Payment.value);\n    let back = '0';\n\n    // Calculate max front\n    let maxFront = 'NOT_FOUND';\n\n    if (foundLenderTerm !=null && advance != \"NOT_FOUND\"){\n        let termType = foundLenderTerm.type.replace(/\\s/g, '');\n        console.log('termType = ' + termType);\n\n        switch(termType.toLowerCase()){\n            case 'x-clean':\n                maxFront = carDetails.x_clean * advance - carDetails.total_cost;\n                break;\n            case 'clean':\n                maxFront = carDetails.clean  * advance - carDetails.total_cost;\n                break;\n            case 'average':\n                maxFront = carDetails.average  * advance - carDetails.total_cost;\n                break;\n            case 'rough':\n                maxFront = carDetails.rough  * advance - carDetails.total_cost;\n                break;\n        }\n\n        maxFront = Math.round(maxFront);\n    }\n\n    console.log('maxFront = ' + maxFront);\n\n    // Calculate max profit\n    let maxProfit = 'NOT_FOUND';\n\n    if (selectedInterest != -1 && term!='NOT_FOUND') {\n        let discount = 0;\n        let tax = 0;\n        let financed = pv((selectedInterest / 100 + discount + tax) / 12, term, -payment, 0);\n        let holdBack = foundLenderProgram.hold_back;\n        let funded = financed * (1 - holdBack);\n\n        console.log('financed = ' + financed);\n        console.log('holdBack = ' + holdBack);\n        console.log('funded = ' + funded);\n\n        let lender = 0;\n        let ppsa = 0;\n\n        let tradeAllowance = 0;\n        if (filterInputs.currencyFields[\"Trade Allowance\"].value != '' && !isNaN(filterInputs.currencyFields[\"Trade Allowance\"].value)) {\n            tradeAllowance = parseFloat(filterInputs.currencyFields[\"Trade Allowance\"].value);\n        }\n\n        let tradePayOff = 0;\n        if (filterInputs.currencyFields[\"Trade Payoff\"].value != '' && !isNaN(filterInputs.currencyFields[\"Trade Payoff\"].value)) {\n            tradePayOff = parseFloat(filterInputs.currencyFields[\"Trade Payoff\"].value)\n        }\n\n        let downPayment = 0;\n        if (filterInputs.currencyFields[\"Down Payment\"].value != '' && !isNaN(filterInputs.currencyFields[\"Down Payment\"].value)) {\n            downPayment = parseFloat(filterInputs.currencyFields[\"Down Payment\"].value);\n        }\n\n        let tradeAcv = 0;\n        if (filterInputs.currencyFields[\"Trace a.c.v\"].value != '' && !isNaN(filterInputs.currencyFields[\"Trace a.c.v\"].value)) {\n            tradeAcv = parseFloat(filterInputs.currencyFields[\"Trace a.c.v\"].value)\n        }\n\n        console.log('tradeAllowance = ' + tradeAllowance);\n        console.log('tradePayOff = ' + tradePayOff);\n        console.log('downPayment = ' + downPayment);\n        console.log('tradeAcv = ' + tradeAcv);\n\n        let paidOut = funded - lender - ppsa + tradeAllowance - tradePayOff + downPayment;\n        console.log('paidOut = ' + paidOut);\n\n        let userInputTax = 0;\n\n        if (filterInputs.percentageFields.Tax.value != '' && !isNaN(filterInputs.percentageFields.Tax.value)) {\n            console.log(filterInputs.percentageFields.Tax.value);\n            userInputTax = parseFloat(filterInputs.percentageFields.Tax.value) / 100;\n        }\n\n        console.log('userInputTax = ' + userInputTax);\n\n        let netPaid = paidOut*(1-userInputTax) + tradeAcv;\n        console.log('netPaid = ' + netPaid);\n\n        if (netPaid - carDetails.total_cost < maxFront){\n            maxProfit = netPaid - carDetails.total_cost;\n        }else {\n            maxProfit = maxFront;\n        }\n\n        maxProfit = Math.round(maxProfit);\n    }\n\n    console.log('maxProfit = ' + maxProfit);\n\n    if (maxFront != 'NOT_FOUND'){\n        maxFront = addCurrencySymbol(maxFront);\n    }\n\n    if (maxProfit != 'NOT_FOUND'){\n        maxProfit = addCurrencySymbol(maxProfit);\n    }\n\n    console.log('End createCalculationDetail()');\n    return [lenderName, tierName, (advance * 100) + '%', interest, term, '$' + payment, back, maxFront, maxProfit];\n}\n\nclass CarCalculationClass extends React.Component{\n    constructor() {\n        super();\n\n        this.calculationDetailsColumnHeaders =[\n            \"Lender\",\n            \"Tier\",\n            \"Advance\",\n            \"Interest\",\n            \"Term\",\n            \"Payment\",\n            \"Back\",\n            \"Front\",\n            \"Profit\"\n        ];\n\n        this.state = {\n            calculationDetailsValues:[],\n            interests:[-1,-1,-1]\n        }\n\n        this.selectInterestEvent = this.selectInterestEvent.bind(this);\n    }\n\n    createCalculationDetails(selectedInterests, filtersInputs, lenderData, details){\n        let newCalculationDetailsValues = [];\n\n        for(let [i, filterInputs] of filtersInputs.entries()){\n            if(this.isValidFilterInputs(filterInputs)) {\n                if (selectedInterests[i] == -1){\n                    let calculationDetails = createCalculationDetail(-1, filterInputs, lenderData, details);\n                    let interestColumnIndex = 3;\n                    let interests = calculationDetails[interestColumnIndex].split(',');\n\n                    if (interests.length > 0) {\n                        // Select first interest as default\n                        let firstInterest = interests[0];\n                        this.state.interests[i] = firstInterest;\n\n                        newCalculationDetailsValues.push(createCalculationDetail(firstInterest, filterInputs, lenderData, details));\n                    }else{\n                        newCalculationDetailsValues.push(calculationDetails);\n                    }\n                }\n                else{\n                    newCalculationDetailsValues.push(createCalculationDetail(selectedInterests[i], filterInputs, lenderData, details));\n                }\n            }\n        }\n\n        return newCalculationDetailsValues;\n    }\n\n    isValidFilterInputs(filterInputs){\n        return filterInputs.selectedLenderIndex != 0 && filterInputs.selectedTierIndex != 0;\n    }\n\n    selectInterestEvent(event, lenderIndex){\n        let newInterest = event.target.value;\n        let interests = this.state.interests;\n        interests[lenderIndex] = newInterest;\n\n        this.setState({interests:interests});\n    }\n\n    renderWithOneTable(calculationDetailsValues){\n        return (\n            <React.Fragment>\n                <Paper style={{backgroundColor:\"rgb(247, 248, 248)\"}}>\n                    <Table>\n                        <TableHead>\n                                <StyledTableRow>\n                                {this.calculationDetailsColumnHeaders.map(header => (\n                                    <StyledTableCell>{header}</StyledTableCell>\n                                ))}\n                                </StyledTableRow>\n                        </TableHead>\n                        {\n                            calculationDetailsValues.map((columnValues, lenderIndex) =>(\n                                <StyledTableRow>\n                                    {\n                                        columnValues.map((columnValue, index) => {\n                                            let interestColumnIndex = 3;\n\n                                            if (index == interestColumnIndex){\n                                                let interestMenuItems = [];\n\n                                                columnValue.split(',').forEach((interest, index) => {\n                                                    interestMenuItems.push(<MenuItem value={interest}>{interest} %</MenuItem>);\n                                                });\n\n                                                return (\n                                                    <StyledTableCell>\n                                                        <Select onChange={(event) => this.selectInterestEvent(event, lenderIndex)} value={this.state.interests[lenderIndex]}>\n                                                            {interestMenuItems}\n                                                        </Select>\n                                                    </StyledTableCell>\n                                                )\n                                            }\n                                            else\n                                            return (\n                                                <StyledTableCell>\n                                                    {columnValue}\n                                                </StyledTableCell>\n                                            )\n                                        })\n                                    }\n                                </StyledTableRow>\n                            ))\n                        }\n                    </Table>\n                </Paper>\n            </React.Fragment>\n        )\n    }\n\n    createCell(value, index, lenderIndex){\n        let interestColumnIndex = 3;\n\n        if (index == interestColumnIndex){\n            let interestMenuItems = [];\n\n            value.split(',').forEach((interest, index) => {\n                interestMenuItems.push(<MenuItem value={interest}>{interest} %</MenuItem>);\n            });\n\n            return (\n                    <Select onChange={(event) => this.selectInterestEvent(event, lenderIndex)} value={this.state.interests[lenderIndex]}>\n                        {interestMenuItems}\n                    </Select>\n            )\n        }\n        else\n            return <React.Fragment>\n                {value}\n            </React.Fragment>\n    }\n\n    renderWithThreeTables(calculationDetailsValues){\n        let tables = [];\n\n        for(let [lenderIndex, lenderCalculationDetailsValues] of calculationDetailsValues.entries()){\n            tables.push(\n                <Grid item xs={12}>\n                    <Paper style={{backgroundColor:\"rgb(247, 248, 248)\"}}>\n                        <Table>\n                            <TableHead>\n                                <StyledTableRow>\n                                    <StyledTableCell>Name</StyledTableCell>\n                                    <StyledTableCell>Value</StyledTableCell>\n                                </StyledTableRow>\n                            </TableHead>\n                            {\n                                lenderCalculationDetailsValues.map((row, index) => (\n                                    <StyledTableRow>\n                                        <StyledTableCell>{this.calculationDetailsColumnHeaders[index]}</StyledTableCell>\n                                        <StyledTableCell>{this.createCell(row, index, lenderIndex)}</StyledTableCell>\n                                    </StyledTableRow>\n                                ))\n                            }\n                        </Table>\n                    </Paper>\n                </Grid>\n            )\n        }\n\n        return (\n            <React.Fragment>\n                <Grid container spacing={4}>\n                    {tables}\n                </Grid>\n            </React.Fragment>\n        )\n    }\n\n\n    render(){\n        let userInputsFilterData = this.props.filtersInputs != undefined && this.props.filtersInputs.length > 0;\n        let calculationDetailsValues = this.createCalculationDetails(this.state.interests, this.props.filtersInputs, this.props.lenderData, this.props.details);\n\n        if (userInputsFilterData){\n            if (this.props.isBigScreen){\n                return this.renderWithOneTable(calculationDetailsValues);\n            }else{\n                return this.renderWithThreeTables(calculationDetailsValues);\n            }\n        }else{\n            return null;\n        }\n    }\n}\n\nexport default CarCalculation;"],"sourceRoot":""}