{"version":3,"sources":["logo.svg","Api.js","LenderFilter.js","LenderFilters.js","CarDescription.js","CarImagesGallery.js","CarShowElementButtons.js","CarShowElement.js","CarShow.js","Sort.js","App.js","serviceWorker.js","index.js","CarCalculation.js"],"names":["module","exports","domain","LenderFilter","selectLenderEvent","bind","selectTierEvent","state","filterBeginningState","selectedTierIndex","currencyFields","value","error","percentageFields","this","beginningState","selectedLenderIndex","selectedLenderImage","allLenderNames","tierMenuItems","textfieldsBeginningState","isTierSelectEnabled","isTextFieldsEnabled","lenderMenuItems","allTierNames","push","MenuItem","key","nextProps","i","lenders","length","lender","name","setState","event","fieldLabel","newValue","target","isError","isNaN","console","log","newCurrencyFields","newPercentageFields","index","indexMinusOne","newState","selectedLenderId","props","id","allTierOfSelectedLender","lenderPrograms","filter","lenderProgram","lender_id","map","newTierMenuItems","itemValue","isPleaseSelectItemSelected","Grid","container","spacing","item","xs","Select","onChange","selectedLenderValue","style","width","disabled","Object","keys","currencyFieldLabel","sm","md","TextField","label","variant","textboxOnChange","helperText","InputProps","startAdornment","InputAdornment","position","size","percentageFieldLabel","React","LendersFilter","clearFiltersOnClick","lenderFilter1","lenderFilter2","lenderFilter3","lenderTerms","Promise","all","fetch","then","a","json","lendersJson","lenderProgramsJson","lenderTermsJson","current","reset","hasError","direction","textAlign","Button","color","onClick","xl","ref","submitOnClick","CarDescription","year","getRowValue","make","model","trim","rowName","row","getRowWithName","matches","details","Paper","padding","backgroundColor","Table","TableRow","TableCell","colSpan","fontSize","getCarTitle","CarImagesGallery","items","images","showPlayButton","showFullscreenButton","CarShowElementButtons","lg","CarShowElement","fieldName","includes","convertDict","carJson","result","excludeCarDetailFields","convertFieldNameToLabel","toUpperCase","Card","CardContent","convertToCarDetails","CarCalculation","filtersInputs","lenderData","clipLoaderCss","css","CarShow","carShowElements","carDetailsList","carImagesList","isLoading","hasMoreItems","updateCars","sortBy","carImagesDict","car_details","car_images","getCarImages","sort","carDetail1","carDetail2","parseInt","reverseNumberSign","localeCompare","mileage","total_cost","carDetails","carImages","number","sortCriteria","dict","imageNames","image","imageSrc","src","imageName","warn","original","thumbnail","page","newCarShowElements","originalLength","loader","className","pageStart","loadMore","loadItems","hasMore","Sort","selectedCriteriaIndex","sortCriteriaList","onSelect","AppClass","carshowRef","createRef","lendersFilter","sortRef","filterOnClick","submitOnclick","menuBtnOnClick","closeMenu","sortSelect","displayFilters","displayCarShow","anchorEl","res","getFiltersInputs","getLenderData","window","scrollTo","currentTarget","criteriaIndex","selectCriteriaAtIndex","Fragment","smooth","AppBar","isBigScreen","Tabs","Tab","Toolbar","IconButton","aria-label","aria-controls","aria-haspopup","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","open","Boolean","onClose","ToggleButton","selected","marginTop","marginBottom","display","Component","App","theme","useTheme","mdUp","useMediaQuery","breakpoints","up","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message","StyledTableCell","withStyles","head","palette","primary","main","common","white","body","StyledTableRow","root","background","default","CarCalculationClass","calculationDetailsColumnHeaders","calculationDetailsValues","interests","selectInterestEvent","selectedInterests","newCalculationDetailsValues","entries","filterInputs","isValidFilterInputs","calculationDetails","createCalculationDetail","split","firstInterest","selectedInterest","lenderName","tierName","advance","interest","term","foundLenderTerm","foundLenderProgram","lenderId","getLenderId","parseFloat","rateMin","rate_min","rateMax","rate_max","rate","carKms","mileageToKms","lenderTerm","min_kms","max_kms","payment","Payment","maxFront","termType","type","replace","toLowerCase","x_clean","clean","average","rough","Math","round","maxProfit","financed","pv","holdBack","hold_back","funded","tradeAllowance","tradePayOff","downPayment","tradeAcv","paidOut","userInputTax","Tax","netPaid","addCurrencySymbol","abs","periods","future","eval","pow","lenderIndex","newInterest","header","columnValues","columnValue","interestMenuItems","forEach","tables","lenderCalculationDetailsValues","createCell","userInputsFilterData","undefined","createCalculationDetails","renderWithOneTable","renderWithThreeTables"],"mappings":"+HAAAA,EAAOC,QAAU,IAA0B,kC,kQCAvCC,EAAS,mDCSb,IAEqBC,E,kDACjB,aAAe,IAAD,8BACV,gBACKC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBACzB,EAAKC,gBAAkB,EAAKA,gBAAgBD,KAArB,gBACvB,EAAKE,MAAQ,EAAKC,uBAJR,E,uEAQV,MAAO,CACHC,kBAAkB,EAClBC,eAAe,CACX,QAAU,CACNC,MAAO,GACPC,OAAO,GAEX,eAAe,CACXD,MAAO,GACPC,OAAO,GAEX,kBAAkB,CACdD,MAAO,GACPC,OAAO,GAEX,eAAe,CACXD,MAAO,GACPC,OAAO,GAEX,cAAc,CACVD,MAAO,GACPC,OAAO,IAGfC,iBAAiB,CACb,IAAM,CACFF,MAAO,GACPC,OAAO,O,iCAOnB,IAAIF,EAAiBI,KAAKP,MAAMG,eAC5BG,EAAmBC,KAAKP,MAAMM,iBAElC,OAAOH,EAAc,QAAYE,OAASF,EAAe,gBAAgBE,OAASF,EAAe,mBAAmBE,OAASF,EAAe,gBAAgBE,OAASF,EAAe,eAAeE,OAASC,EAAgB,IAAQD,Q,6CAIpO,IAAIG,EAAc,aACdC,oBAAqB,EACrBC,oBAAqB,KACrBC,eAAe,GACfC,cAAc,IACXL,KAAKM,2BALM,CAMdC,qBAAoB,EACpBC,qBAAoB,EACpBC,gBAAgB,GAChBd,kBAAkB,EAClBe,aAAa,KAKjB,OAFAT,EAAeI,cAAcM,KAAK,gBAACC,EAAA,EAAD,CAAUC,IAAK,0BAA0BhB,MAjEvD,GAiEc,uBAE3BI,I,gDAGea,GAItB,IAHA,IAAIL,EAAkB,GAClBL,EAAiB,GAEbW,EAAI,EAAGA,EAAID,EAAUE,QAAQC,OAAQF,IAAI,CAC7C,IAAIG,EAASJ,EAAUE,QAAQD,GAE/BN,EAAgBE,KAAK,gBAACC,EAAA,EAAD,CAAUC,IAAK,eAAiBE,EAAGlB,MAAOkB,EAAE,GAAIG,EAAOC,OAC5Ef,EAAeO,KAAKO,EAAOC,MAG/BnB,KAAKoB,SAAS,CAACX,gBAAgBA,EAAiBL,eAAeA,M,sCAGnDiB,EAAOC,GACnB,IAAIC,EAAWF,EAAMG,OAAO3B,MACxB4B,EAAUC,MAAMH,GAGpB,GAFAI,QAAQC,IAAIH,GAERH,KAActB,KAAKP,MAAMG,eAAe,CACxC,IAAIiC,EAAiB,eAAO7B,KAAKP,MAAMG,gBACvCiC,EAAkBP,GAAe,CAC7BzB,MAAM0B,EACNzB,MAAM2B,GAGVzB,KAAKoB,SAAS,CAACxB,eAAeiC,SAC5B,GAAIP,KAActB,KAAKP,MAAMM,iBAAiB,CAChD,IAAI+B,EAAmB,eAAO9B,KAAKP,MAAMM,kBACzC+B,EAAoBR,GAAc,CAC9BzB,MAAM0B,EACNzB,MAAM2B,GAEVzB,KAAKoB,SAAS,CAACrB,iBAAiB+B,O,wCAItBT,GACd,IAAIU,EAAQV,EAAMG,OAAO3B,MACrBmC,EAAgBD,EAAQ,EAExBE,EAAW,GAef,GAdAA,EAAS/B,oBAAsB6B,IAhHX,GAkHaA,GAYD,CAC5B,IAAIG,EAAmBlC,KAAKmC,MAAMnB,QAAQgB,GAAeI,GACrDC,EAA0BrC,KAAKmC,MAAMG,eAAeC,QAAO,SAAAC,GAAa,OAAKA,EAAcC,WAAaP,KAAkBQ,KAAI,SAAAF,GAAa,OAAIA,EAAcrB,QAC7JwB,EAAmB,GACvBA,EAAiBhC,KAAK,gBAACC,EAAA,EAAD,CAAUf,MAlIhB,GAkIM,uBAEtB,IAAK,IAAIkB,EAAI,EAAGA,EAAIsB,EAAwBpB,OAAQF,IAAK,CACrD,IAAI6B,EAAY7B,EAAI,EAEpB4B,EAAiBhC,KAAK,gBAACC,EAAA,EAAD,CAAUf,MAAO+C,GAAYP,EAAwBtB,KAG/EkB,EAAS5B,cAAgBsC,EACzBV,EAAS1B,qBAAsB,EAC/B0B,EAASvB,aAAe2B,EAG5BJ,EAAStC,kBA/IW,EAiJpBK,KAAKoB,SAASa,K,sCAGFZ,GACZ,IAAIY,EAAQ,eAAOjC,KAAKM,4BAExB2B,EAAStC,kBAAoB0B,EAAMG,OAAO3B,MAE1C,IAAIgD,EAzJgB,GAyJaxB,EAAMG,OAAO3B,MAG1CoC,EAASzB,qBADVqC,EAMH7C,KAAKoB,SAASa,K,8BAIdjC,KAAKoB,SAASpB,KAAKN,0B,+BAGd,IAAD,OACJ,OACI,gBAACoD,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACrB,gBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,IACX,gBAACC,EAAA,EAAD,CAAQC,SAAUpD,KAAKV,kBAAmBO,MAAOG,KAAKP,MAAM4D,oBAAqBC,MAAO,CAACC,MAAM,SAC1FvD,KAAKP,MAAMgB,kBAMpB,gBAACqC,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,IACX,gBAACC,EAAA,EAAD,CAAQG,MAAO,CAACC,MAAM,QAASC,UAAWxD,KAAKP,MAAMc,oBAAqBV,MAAOG,KAAKP,MAAME,kBAAmByD,SAAUpD,KAAKR,iBACzHQ,KAAKP,MAAMY,gBAGnBoD,OAAOC,KAAK1D,KAAKP,MAAMG,gBAAgB8C,KAAI,SAAAiB,GAAkB,OAC1D,gBAACb,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGU,GAAI,EAAGC,GAAI,GAAG,gBAACC,EAAA,EAAD,CAAWN,UAAW,EAAK/D,MAAMe,oBAC5BuD,MAAOJ,EACPK,QAAQ,WACRZ,SAAU,SAAC/B,GAAD,OAAW,EAAK4C,gBAAgB5C,EAAOsC,IAC3C7D,MAAS,EAAKL,MAAMG,eAAe+D,GAAoB7D,MACvDoE,WAAY,EAAKzE,MAAMG,eAAe+D,GAAoB7D,MAAM,gBAAgB,GAChFD,MAAO,EAAKJ,MAAMG,eAAe+D,GAAoB9D,MAC3DsE,WAAY,CACRC,eAAgB,gBAACC,EAAA,EAAD,CAAgBC,SAAS,SAAzB,MAGpBC,KAAM,cAK9Cd,OAAOC,KAAK1D,KAAKP,MAAMM,kBAAkB2C,KAAI,SAAA8B,GAAoB,OAC1D,gBAAC1B,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGU,GAAI,EAAGC,GAAI,GAAG,gBAACC,EAAA,EAAD,CAAWN,UAAW,EAAK/D,MAAMe,oBAC5BuD,MAAOS,EACPR,QAAQ,WACRZ,SAAU,SAAC/B,GAAD,OAAW,EAAK4C,gBAAgB5C,EAAOmD,IACjD1E,MAAS,EAAKL,MAAMM,iBAAiByE,GAAsB1E,MACrDoE,WAAY,EAAKzE,MAAMM,iBAAiByE,GAAsB1E,MAAM,gBAAgB,GAC1FD,MAAO,EAAKJ,MAAMM,iBAAiByE,GAAsB3E,MACzDsE,WAAY,CACRC,eAAgB,gBAACC,EAAA,EAAD,CAAgBC,SAAS,SAAzB,MAEpBC,KAAM,mB,GAlNzBE,a,0CCHrBC,E,kDACjB,aAAe,IAAD,8BACV,gBACKC,oBAAsB,EAAKA,oBAAoBpF,KAAzB,gBAC3B,EAAKqF,cAAgBH,cACrB,EAAKI,cAAgBJ,cACrB,EAAKK,cAAgBL,cAErB,EAAKhF,MAAQ,CACTuB,QAAS,GACTsB,eAAgB,GAChByC,YAAa,IAGjBC,QAAQC,IAAI,CFfTC,MAAM,GAAD,OAAI9F,EAAJ,cAIL8F,MAAM,GAAD,OAAI9F,EAAJ,uBAIL8F,MAAM,GAAD,OAAI9F,EAAJ,sBEOiE+F,KAAzE,uCAA8E,yCAAAC,EAAA,gFAAOpE,EAAP,KAAgBsB,EAAhB,KAAgCyC,EAAhC,cAChD/D,EAAQqE,OADwC,cACpEC,EADoE,gBAEzChD,EAAe+C,OAF0B,cAEpEE,EAFoE,gBAG5CR,EAAYM,OAHgC,cAGpEG,EAHoE,yBAKnE,CAACF,EAAaC,EAAoBC,IALiC,4CAA9E,uDAMGL,MAAK,YAA6C,IAAD,mBAA1CnE,EAA0C,KAAjCsB,EAAiC,KAAjByC,EAAiB,KAChD,EAAK3D,SAAS,CAACJ,QAAQA,EAASsB,eAAeA,EAAgByC,YAAYA,OApBrE,E,gEAwBM1D,GAChBrB,KAAK4E,cAAca,QAAQC,QAC3B1F,KAAK6E,cAAcY,QAAQC,QAC3B1F,KAAK8E,cAAcW,QAAQC,U,yCAI3B,MAAO,CAAC1F,KAAK4E,cAAca,QAAQhG,MAAOO,KAAK6E,cAAcY,QAAQhG,MAAOO,KAAK8E,cAAcW,QAAQhG,S,iCAIvG,OAAOO,KAAK4E,cAAca,QAAQE,YAAc3F,KAAK6E,cAAcY,QAAQE,YAAc3F,KAAK8E,cAAcW,QAAQE,a,sCAIpH,MAAO,CAAC3F,KAAKP,MAAMuB,QAAShB,KAAKP,MAAM6C,eAAgBtC,KAAKP,MAAMsF,e,+BAIlE,OACI,gBAAC,WAAD,KACI,gBAACjC,EAAA,EAAD,CAAMC,WAAS,EAAC6C,UAAW,MAAO5C,QAAS,GACvC,gBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAII,MAAO,CAACuC,UAAU,WACjC,gBAACC,EAAA,EAAD,CAAQ9B,QAAQ,YAAY+B,MAAO,YAAaC,QAAShG,KAAK2E,qBAA9D,kBAEJ,gBAAC7B,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,IAAf,kBACmB,gBAACY,EAAA,EAAD,CAAWE,QAAQ,WAAWO,KAAM,WAEvD,gBAACzB,EAAA,EAAD,CAAMG,MAAI,EAACgD,GAAI,GACX,gBAAC,EAAD,CAAcC,IAAKlG,KAAK4E,cAAe5D,QAAShB,KAAKP,MAAMuB,QAASsB,eAAgBtC,KAAKP,MAAM6C,eAAgByC,YAAa/E,KAAKP,MAAMsF,eAE3I,gBAACjC,EAAA,EAAD,CAAMG,MAAI,EAACgD,GAAI,GACX,gBAAC,EAAD,CAAcC,IAAKlG,KAAK6E,cAAe7D,QAAShB,KAAKP,MAAMuB,QAASsB,eAAgBtC,KAAKP,MAAM6C,eAAgByC,YAAa/E,KAAKP,MAAMsF,eAE3I,gBAACjC,EAAA,EAAD,CAAMG,MAAI,EAACgD,GAAI,GACX,gBAAC,EAAD,CAAcC,IAAKlG,KAAK8E,cAAe9D,QAAShB,KAAKP,MAAMuB,QAASsB,eAAgBtC,KAAKP,MAAM6C,eAAgByC,YAAa/E,KAAKP,MAAMsF,eAE3I,gBAACjC,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAII,MAAO,CAACuC,UAAU,WACjC,gBAACC,EAAA,EAAD,CAAQ9B,QAAQ,YAAY+B,MAAM,UAAUC,QAAShG,KAAKmC,MAAMgE,eAAhE,iB,GA/DmB1B,a,4DCDtB2B,E,4KAEb,IAAIC,EAAOrG,KAAKsG,YAAY,QACxBC,EAAOvG,KAAKsG,YAAY,QACxBE,EAAQxG,KAAKsG,YAAY,SACzBG,EAAOzG,KAAKsG,YAAY,QAE5B,MAAM,GAAN,OAAUD,EAAV,YAAkBE,EAAlB,YAA0BC,EAA1B,YAAmCC,K,kCAG3BC,GACR,IAAIC,EAAM3G,KAAK4G,eAAeF,GAE9B,OAAW,MAAPC,EACOA,EAAI9G,MAGR,K,qCAGI6G,GACX,IAAIG,EAAU7G,KAAKmC,MAAM2E,QAAQvE,QAAO,SAAAoE,GAAG,OAAKA,EAAIxF,MAAQuF,KAE5D,OAAIG,EAAQ5F,OAAS,EACV4F,EAAQ,GAGZ,O,+BAGP,OACI,gBAACE,EAAA,EAAD,CAAOzD,MAAO,CAAC0D,QAAS,OAAQC,gBAAiB,uBAC7C,gBAACC,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,CAAWC,QAAS,EAAG/D,MAAO,CAACuC,UAAW,WAAW,qBACjDvC,MAAO,CAACgE,SAAU,WAAYtH,KAAKuH,iBAE1CvH,KAAKmC,MAAM2E,QAAQpE,KAAI,SAAAiE,GAAG,OACvB,gBAACQ,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,CAAW9D,MAAO,CAAC0D,QAAS,QACxB,yBAAIL,EAAIxF,OAEZ,gBAACiG,EAAA,EAAD,CAAW9D,MAAO,CAAC0D,QAAS,QACvBL,EAAI9G,iB,GA3CO4E,a,yBCFvB+C,G,qLAEb,OACI,gBAAC,IAAD,CAAcC,MAAOzH,KAAKmC,MAAMuF,OAAQC,gBAAgB,EAAOC,sBAAsB,Q,GAHnDnD,cCDzBoD,E,uKAEb,OAAO,gBAAC,WAAD,KACH,gBAAC/E,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACrB,gBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGW,GAAI,EAAGiE,GAAI,GACzB,gBAAChC,EAAA,EAAD,CAAQ9B,QAAQ,YAAY+B,MAAO,UAAWzC,MAAO,CAACC,MAAM,SAA5D,SAEJ,gBAACT,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGW,GAAI,EAAGiE,GAAI,GACzB,gBAAChC,EAAA,EAAD,CAAQ9B,QAAQ,YAAY+B,MAAO,UAAWzC,MAAO,CAACC,MAAM,SAA5D,aAEJ,gBAACT,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGW,GAAI,EAAGiE,GAAI,GACzB,gBAAChC,EAAA,EAAD,CAAQ9B,QAAQ,YAAY+B,MAAO,UAAWzC,MAAO,CAACC,MAAM,SAA5D,cAEJ,gBAACT,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGW,GAAI,EAAGiE,GAAI,GACzB,gBAAChC,EAAA,EAAD,CAAQ9B,QAAQ,YAAY+B,MAAO,UAAWzC,MAAO,CAACC,MAAM,SAA5D,e,GAd+BkB,aCK9BsD,E,qLACMC,GAGnB,MAFqB,CAAC,KAAM,SAAU,UAAW,UAAW,QAAS,UAAW,QAAS,UAEnEC,SAASD,K,8CAGXA,GACpB,IAAIE,EAAc,CACd,WAAc,cAGlB,OAAIF,KAAaE,EACNA,EAAYF,GAGhBA,I,0CAGSG,GAChB,IAAIC,EAAS,GAEb,IAAI,IAAIvH,KAAOsH,EACNnI,KAAKqI,uBAAuBxH,IAC7BuH,EAAOzH,KAAK,CACRQ,KAAKnB,KAAKsI,wBAAwBzH,GAAK0H,cACvC1I,MAAMsI,EAAQtH,KAK1B,OAAOuH,I,+BAIP,OACG,gBAACI,EAAA,EAAD,CAAMlF,MAAO,CAACC,MAAM,SAChB,gBAACkF,EAAA,EAAD,KACI,gBAAC3F,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACrB,gBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAI4E,GAAI,GAClB,gBAAC,EAAD,CAAkBJ,OAAQ1H,KAAKmC,MAAMuF,UAE1C,gBAAC5E,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAI4E,GAAI,GACnB,gBAAC,EAAD,CAAgBhB,QAAS9G,KAAK0I,oBAAoB1I,KAAKmC,MAAM2E,YAEjE,gBAAChE,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,IACX,gBAACyF,EAAA,EAAD,CAAgBC,cAAe5I,KAAKmC,MAAMyG,cAAeC,WAAY7I,KAAKmC,MAAM0G,WAAY/B,QAAS9G,KAAKmC,MAAM2E,WAEpH,gBAAChE,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,IACX,gBAAC,EAAD,c,GAjDiBuB,a,8NCE5C,IAAMqE,EAAgBC,cAAH,KAgMJC,E,kDAxLX,aAAe,IAAD,8BACV,gBAEKvJ,MAAQ,CACTwJ,gBAAiB,GACjBC,eAAgB,GAChBC,cAAe,GACfC,WAAW,EACXC,cAAc,EACdT,cAAe,KACfC,WAAY,MAVN,E,gEAeV7I,KAAKsJ,WAAWtJ,KAAKmC,MAAMgG,QAASnI,KAAKmC,MAAMyG,cAAe,KAAM,K,iCAG7DT,EAASS,EAAeC,EAAYU,GAAS,IAAD,OAGnD,GAFAvJ,KAAKoB,SAAS,CAACgI,WAAW,EAAMF,eAAgB,GAAIC,cAAe,GAAIF,gBAAiB,GAAIL,cAAeA,EAAeC,WAAYA,IAExH,IAAXV,EAAc,CAKb,IAJA,IAAI9C,EAAO8C,EACPe,EAAiB,GACjBM,EAAgB,GAEXzI,EAAI,EAAGA,EAAIsE,EAAKpE,OAAQF,IAAK,CAClC,IAAI0I,EAAcpE,EAAKtE,GACnB2I,EAAa1J,KAAK2J,aAAatE,EAAKtE,IAExCmI,EAAevI,KAAK8I,GACpBD,EAAcC,EAAW,IAAUC,EAGvC,GAAc,GAAVH,EAEA,OADA5H,QAAQC,IAAI,QACL2H,GACH,KAAK,EAEDL,EAAeU,MAAK,SAACC,EAAYC,GAAb,OAA4BC,SAASF,EAAWxD,MAAQ0D,SAASD,EAAWzD,SAChG,MACJ,KAAK,EAED6C,EAAeU,MAAK,SAACC,EAAYC,GAAb,OAA4B,EAAKE,kBAAkBD,SAASF,EAAWxD,MAAQ0D,SAASD,EAAWzD,UACvH,MACJ,KAAK,EAED6C,EAAeU,MAAK,SAACC,EAAYC,GAAb,OAA4BD,EAAWtD,KAAK0D,cAAcH,EAAWvD,SACzF,MACJ,KAAK,EAED2C,EAAeU,MAAK,SAACC,EAAYC,GAAb,OAA4B,EAAKE,kBAAkBH,EAAWrD,MAAMyD,cAAcH,EAAWtD,WACjH,MACJ,KAAK,EAED0C,EAAeU,MAAK,SAACC,EAAYC,GAAb,OAA4BC,SAASF,EAAWK,SAAWH,SAASD,EAAWI,YACnG,MACJ,KAAK,EAEDhB,EAAeU,MAAK,SAACC,EAAYC,GAAb,OAA4B,EAAKE,kBAAkBD,SAASF,EAAWK,SAAWH,SAASD,EAAWI,aAC1H,MACJ,KAAK,EAEDhB,EAAeU,MAAK,SAACC,EAAYC,GAAb,OAA4BC,SAASF,EAAWM,YAAcJ,SAASD,EAAWK,eACtG,MACJ,KAAK,EAEDjB,EAAeU,MAAK,SAACC,EAAYC,GAAb,OAA4B,EAAKE,kBAAkBD,SAASF,EAAWM,YAAcJ,SAASD,EAAWK,gBAUzI,IAFA,IAAIhB,EAAgB,GAEXpI,EAAI,EAAGA,EAAImI,EAAejI,OAAOF,IACtCoI,EAAcxI,KAAK6I,EAAcN,EAAenI,GAAf,KAKrC,IAFA,IAAIkI,EAAkB,GAEblI,EAAI,EAAGA,EAAI,IAAMA,EAAImI,EAAejI,OAAQF,IAAK,CACtD,IAAIqJ,EAAalB,EAAenI,GAC5BsJ,EAAYlB,EAAcpI,GAE9BkI,EAAgBtI,KACZ,gBAACmC,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAI+C,GAAI,GACnB,gBAAC,EAAD,CAAgBa,QAASsD,EAAY1C,OAAQ2C,EAAWzB,cAAeA,EACvDC,WAAYA,MAKxC7I,KAAKoB,SAAS,CACV8H,eAAgBA,EAChBC,cAAeA,EACfC,WAAW,EACXH,gBAAiBA,EACjBI,aAAcH,EAAejI,OAAS,Q,wCAKhCqJ,GACd,OAAQA,I,gDAGcxJ,GACtBd,KAAKsJ,WAAWxI,EAAUqH,QAASrH,EAAU8H,cAAe9H,EAAU+H,WAAY/H,EAAUyJ,gB,mCAGnFpC,GAIT,IAHA,IAAIqC,EAAO,GACPC,EAAa,GAER1J,EAAI,EAAGA,EAAIoH,EAAO,OAAWlH,OAAQF,IAAK,CAC/C,IAAI2J,EAAQvC,EAAO,OAAWpH,GAE1B4J,EAAWD,EAAME,IACjBC,EAAYH,EAAMvJ,KAGtBsJ,EAAW9J,KAAKkK,GACZA,KAAaJ,GACb9I,QAAQmJ,KAAKD,EAAY,8BAG7BL,EAAKK,GAAa,CACdE,SAAUJ,EACVK,UAAWL,GAKnBF,EAAWb,OAGX,IAFA,IAAIxB,EAAS,GAEJrH,EAAI,EAAGA,EAAI0J,EAAWxJ,OAAOF,IAClCqH,EAAOzH,KAAK6J,EAAKC,EAAW1J,KAGhC,OAAOqH,I,gCAGD6C,GACN,IACIC,EAAqBlL,KAAKP,MAAMwJ,gBAChCkC,EAAiBnL,KAAKP,MAAMwJ,gBAAgBhI,OAEhD,GAAIjB,KAAKP,MAAMwJ,gBAAgBhI,OAASjB,KAAKP,MAAMyJ,eAAejI,OAC9D,KAAMiK,EAAmBjK,OAASkK,EALnB,IAKoDD,EAAmBjK,OAASjB,KAAKP,MAAMyJ,eAAejI,QACrHiK,EAAmBvK,KACf,gBAACmC,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAI+C,GAAI,GACnB,gBAAC,EAAD,CAAgBa,QAAS9G,KAAKP,MAAMyJ,eAAegC,EAAmBjK,QAASyG,OAAQ1H,KAAKP,MAAM0J,cAAc+B,EAAmBjK,QAAS2H,cAAe5I,KAAKP,MAAMmJ,cAAeC,WAAY7I,KAAKP,MAAMoJ,eAM5N,IAAIQ,EAAgB6B,EAAmBjK,OAdpB,GAc6CjB,KAAKP,MAAMyJ,eAAejI,OAE1FjB,KAAKoB,SAAS,CAACiI,aAAaA,EAAcJ,gBAAgBiC,M,+BAI1D,IAAME,EAAS,uBAAKC,UAAU,UAAf,eAEf,OACI,gBAAC,IAAD,CACIC,UAAW,EACXC,SAAUvL,KAAKwL,UAAUjM,KAAKS,MAC9ByL,QAASzL,KAAKP,MAAM4J,aACpB+B,OAAQA,GACR,gBAACtI,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGqI,UAAS,wBAAmBrL,KAAKP,MAAM2J,UAAY,UAAY,KACtFpJ,KAAKP,MAAM2J,UACR,uBAAKiC,UAAW,WAAW,gBAAC,aAAD,CAAYtC,IAAKD,KAAyB9I,KAAKP,MAAMwJ,sB,GAlLlFxE,a,mICkCPiH,I,yDA/CX,WAAYvJ,GAAQ,IAAD,8BACf,cAAMA,IAED1C,MAAQ,CACTkM,sBAAuB,GAG3B,EAAKC,iBAAmB,CAAC,mBACD,0BACA,0BACA,OACA,QACA,8BACA,8BACA,2BACA,2BACA,6BACA,8BAjBT,E,kEAoBG7J,GAClB/B,KAAKoB,SACD,CAACuK,sBAAsB5J,M,iDAK3B,OAAO/B,KAAKP,MAAMkM,wB,gDAIlB,OAAO3L,KAAK4L,iBAAiB5L,KAAKP,MAAMkM,yB,+BAIxC,OACI,gBAACxI,EAAA,EAAD,CAAQC,SAAUpD,KAAKmC,MAAM0J,SAAUhM,MAAOG,KAAKP,MAAMkM,uBAEjD3L,KAAK4L,iBAAiBlJ,KAAI,SAAC6H,EAAcxI,GAAf,OACtB,gBAACnB,EAAA,EAAD,CAAUf,MAAOkC,GAAQwI,W,GAxC9B9F,cC+BbqH,G,kDACF,aAAe,IAAD,8BACV,gBAEKC,WAAYtH,IAAMuH,YACvB,EAAKC,cAAgBxH,IAAMuH,YAC3B,EAAKE,QAAUzH,IAAMuH,YAGrB,EAAKG,cAAgB,EAAKA,cAAc5M,KAAnB,gBACrB,EAAK6M,cAAgB,EAAKA,cAAc7M,KAAnB,gBACrB,EAAK8M,eAAiB,EAAKA,eAAe9M,KAApB,gBACtB,EAAK+M,UAAY,EAAKA,UAAU/M,KAAf,gBACjB,EAAKgN,WAAa,EAAKA,WAAWhN,KAAhB,gBAIlB,EAAKE,MAAQ,CACT+M,gBAAgB,EAChBC,gBAAgB,EAChBC,SAAU,KACV9D,cAAe,GACfgB,KAAK,EACLzB,QAAQ,ITvDTjD,MAAM,GAAD,OAAI9F,EAAJ,WS2DH+F,MAAK,SAAAwH,GAAG,OAAIA,EAAItH,UAChBF,MAAK,SAAAE,GACF,EAAKjE,SACD,CAAE+G,QAAQ9C,OA7BZ,E,0DAmCAhE,GACVM,QAAQC,IAAI,UACZ5B,KAAKoB,SAAS,CAACoL,gBAAgBxM,KAAKP,MAAM+M,mB,sCAItCxM,KAAKiM,cAAcxG,QAAQE,aAC3B3F,KAAKoB,SAAS,CACVoL,gBAAgB,EAChBC,gBAAgB,EAChB7D,cAAe5I,KAAKiM,cAAcxG,QAAQmH,mBAC1C/D,WAAY7I,KAAKiM,cAAcxG,QAAQoH,kBAE3CC,OAAOC,SAAS,EAAG,M,qCAIZ1L,GACXrB,KAAKoB,SAAS,CAACsL,SAASrL,EAAM2L,kB,kCAI9BhN,KAAKoB,SAAS,CAACsL,SAAS,S,iCAGjBrL,GACP,IAAI4L,EAAgB5L,EAAMG,OAAO3B,MACjCG,KAAKkM,QAAQzG,QAAQyH,sBAAsBD,GAE3CjN,KAAKoB,SAAS,CAACwI,KAAKqD,M,+BAsBpB,OACI,kBAAC,IAAME,SAAP,KACA,kBAAC,KAAD,CAAaC,QAAM,IACnB,kBAACtK,EAAA,EAAD,CAAMC,WAAS,EAACO,MAAO,CAAC2D,gBAAgB,qBACpC,kBAACnE,EAAA,EAAD,CAAMG,MAAI,EAACgD,GAAI,EAAG/C,GAAI,IACtB,kBAACJ,EAAA,EAAD,CAAMG,MAAI,EAACgD,GAAI,GAAI/C,GAAI,IACnB,kBAACmK,EAAA,EAAD,CAAQ/I,SAAS,UACZtE,KAAKmC,MAAMmL,YACR,kBAAC,IAAMH,SAAP,KACI,kBAACI,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKzJ,MAAM,SACX,kBAACyJ,EAAA,EAAD,CAAKzJ,MAAM,aAAaP,UAAQ,IAChC,kBAACgK,EAAA,EAAD,CAAKzJ,MAAM,cAAcP,UAAQ,IACjC,kBAACgK,EAAA,EAAD,CAAKzJ,MAAM,gBAAgBP,UAAQ,MAGvC,kBAACiK,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CACIC,aAAW,OACXC,gBAAc,cACdC,gBAAc,OACdvK,MAAO,CAAC,MAAQ,SAChB0C,QAAShG,KAAKqM,gBACd,kBAAC,KAAD,OAEJ,kBAAC,KAAD,CACIjK,GAAG,cACHsK,SAAU1M,KAAKP,MAAMiN,SACrBoB,aAAc,CACVC,SAAU,MACVC,WAAY,SAEhBC,aAAW,EACXC,gBAAiB,CACbH,SAAU,MACVC,WAAY,SAEhBG,KAAMC,QAAQpO,KAAKP,MAAMiN,UACzB2B,QAASrO,KAAKsM,WAEd,kBAAC1L,EAAA,EAAD,aACA,kBAACA,EAAA,EAAD,mBACA,kBAACA,EAAA,EAAD,oBACA,kBAACA,EAAA,EAAD,0BAOxB,kBAACkC,EAAA,EAAD,CAAMG,MAAI,EAACgD,GAAI,EAAG/C,GAAI,IACtB,kBAACJ,EAAA,EAAD,CAAMG,MAAI,EAACgD,GAAI,EAAG/C,GAAI,IACtB,kBAACJ,EAAA,EAAD,CAAMG,MAAI,EAACgD,GAAI,GAAI/C,GAAI,IACnB,kBAACJ,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAMG,MAAI,EAAC6E,GAAI,GAAI5E,GAAI,IACnB,kBAACJ,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACpBhD,KAAKP,MAAMgN,eACR,kBAAC,IAAMU,SAAP,KACI,kBAACrK,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIU,GAAI,EAAGkE,GAAI,EAAGxE,MAAO,CAACuC,UAAU,WAC/C,kBAAC,GAAD,CAAMK,IAAKlG,KAAKkM,QAASL,SAAU7L,KAAKuM,cAQ5C,kBAACzJ,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIU,GAAI,EAAGkE,GAAI,EAAGxE,MAAO,CAACuC,UAAU,WAC/C,kBAACyI,EAAA,EAAD,CAActI,QAAShG,KAAKmM,cAAeoC,SAAUvO,KAAKP,MAAM+M,gBAAgB,kBAAC,IAAD,MAAhF,cAGV,KAEF,kBAAC1J,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAII,MAAO,CAACkL,UAAU,OAAQC,aAAa,OAAQC,QAAQ1O,KAAKP,MAAM+M,eAAe,GAAG,SACjG,kBAACzF,EAAA,EAAD,CAAOzD,MAAO,CAAC0D,QAAQ,SACjB,kBAAC,EAAD,CAAed,IAAKlG,KAAKiM,cAAe9F,cAAenG,KAAKoM,kBAIpEpM,KAAKP,MAAMgN,eACP,kBAAC3J,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,IACX,kBAAC,EAAD,CAASgD,IAAKlG,KAAK+L,WAAY5D,QAASnI,KAAKP,MAAM0I,QAASS,cAAe5I,KAAKP,MAAMmJ,cAAeC,WAAY7I,KAAKP,MAAMoJ,WAAY0B,aAAcvK,KAAKP,MAAMmK,QAEvK,SAMtB,kBAAC9G,EAAA,EAAD,CAAMG,MAAI,EAACgD,GAAI,EAAG/C,GAAI,U,GAhLfuB,IAAMkK,WAuLdC,GA9LH,SAACzM,GACT,IAAM0M,EAAQC,cACRC,EAAOC,YAAcH,EAAMI,YAAYC,GAAG,OAEhD,OAAO,kBAAC,GAAD,CAAU5B,YAAayB,KCpBdX,QACW,cAA7BtB,OAAOqC,SAASC,UAEe,UAA7BtC,OAAOqC,SAASC,UAEhBtC,OAAOqC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1K,MAAK,SAAA2K,GACJA,EAAaC,gBAEdC,OAAM,SAAAlQ,GACL6B,QAAQ7B,MAAMA,EAAMmQ,a,+7EE5HtBC,gBAAkBC,kEAAW,SAAAtB,GAAK,MAAK,CACzCuB,KAAM,CACFnJ,gBAAiB4H,EAAMwB,QAAQC,QAAQC,KACvCxK,MAAO8I,EAAMwB,QAAQG,OAAOC,OAEhCC,KAAM,CACFpJ,SAAU,OANM6I,CAQpB/I,6DAEEuJ,eAAiBR,kEAAW,SAAAtB,GAAK,MAAK,CACxC+B,KAAM,CACF,qBAAsB,CAClB3J,gBAAiB4H,EAAMwB,QAAQQ,WAAWC,aAH/BX,CAMnBhJ,2DAEEwB,eAAiB,SAACxG,GACpB,IAAM0M,EAAQC,mEACRC,EAAOC,wEAAcH,EAAMI,YAAYC,GAAG,OAEhD,OAAO,iDAAC6B,oBAAD,eAAqBzD,YAAayB,GAAU5M,KAGjD4O,oB,ocACF,+BAAe,IAAD,0NACV,qBAEKC,gCAAiC,CAClC,SACA,OACA,UACA,WACA,OACA,UACA,OACA,QACA,UAGJ,EAAKvR,MAAQ,CACTwR,yBAAyB,GACzBC,UAAU,EAAE,GAAG,GAAG,IAGtB,EAAKC,oBAAsB,EAAKA,oBAAoB5R,KAAzB,iMApBjB,E,8PAuBW6R,EAAmBxI,EAAeC,EAAY/B,GACnE,IAD2E,EACvEuK,EAA8B,GADyC,mMAG9CzI,EAAc0I,WAHgC,IAG3E,IAAI,EAAJ,qBAAqD,CAAC,IAAD,kMAA5CvQ,EAA4C,KAAzCwQ,EAAyC,KACjD,GAAGvR,KAAKwR,oBAAoBD,GACxB,IAA6B,GAAzBH,EAAkBrQ,GAAS,CAC3B,IAAI0Q,EAAqBzR,KAAK0R,yBAAyB,EAAGH,EAAc1I,EAAY/B,GAEhFoK,EAAYO,EADU,GAC8BE,MAAM,KAE9D,GAAIT,EAAUjQ,OAAS,EAAG,CAEtB,IAAI2Q,EAAgBV,EAAU,GAC9BlR,KAAKP,MAAMyR,UAAUnQ,GAAK6Q,EAE1BP,EAA4B1Q,KAAKX,KAAK0R,wBAAwBE,EAAeL,EAAc1I,EAAY/B,SAEvGuK,EAA4B1Q,KAAK8Q,QAIrCJ,EAA4B1Q,KAAKX,KAAK0R,wBAAwBN,EAAkBrQ,GAAIwQ,EAAc1I,EAAY/B,KArB/C,8BA0B3E,OAAOuK,I,0CAGSE,GAChB,OAA2C,GAApCA,EAAarR,qBAA8D,GAAlCqR,EAAa5R,oB,mCAGpDuK,GACT,OAAiB,QAAVA,I,8CAGa2H,EAAkBN,EAAc1I,EAAYuB,GAChEzI,QAAQC,IAAI,6BACZD,QAAQC,IAAIiQ,GACZlQ,QAAQC,IAAI2P,GACZ5P,QAAQC,IAAIiH,GACZlH,QAAQC,IAAIwI,GAEZ,IAAIpJ,EAAU6H,EAAW,GACrBvG,EAAiBuG,EAAW,GAC5B9D,EAAc8D,EAAW,GAEzBiJ,EAAaP,EAAanR,eAAemR,EAAarR,oBAAsB,GAC5E6R,EAAWR,EAAa7Q,aAAa6Q,EAAa5R,kBAAoB,GAC1EgC,QAAQC,IAAI,gBAAkBkQ,GAC9BnQ,QAAQC,IAAI,cAAgBmQ,GAG5B,IAAIC,EAAU,YACVC,EAAW,YACXC,EAAO,YACPC,EAAkB,KAClBC,EAAqB,KACrBC,EAAWrS,KAAKsS,YAAYR,EAAY9Q,GAG5C,GAFAW,QAAQC,IAAI,cAAgByQ,GAEb,MAAZA,EAAiB,CAAC,IAAD,qMACS/P,GADT,IAChB,IAAI,EAAJ,qBAAwC,CAAC,IAAjCE,EAAgC,QACpC,GAAIA,EAAcC,WAAa4P,GAAY7P,EAAcrB,MAAQ4Q,EAAS,CACtEK,EAAqB5P,EAGjBd,MAAMc,EAAcwP,WACpBA,EAAUO,WAAW/P,EAAcwP,UAIvC,IAAIQ,EAAUD,WAAW/P,EAAciQ,UACnCC,EAAUH,WAAW/P,EAAcmQ,UACvCV,EAAW,GAEX,IAAI,IAAIW,EAAOJ,EAASI,EAAOF,EAASE,GAAM,EAC1CX,GAAYW,EAAO,IAGvBX,GAAYS,EAEZ,QArBQ,8BAyBhB,IAAIG,EAAS7S,KAAK8S,aAAaP,WAAWnI,EAAWF,UACrDvI,QAAQC,IAAI,YAAciR,GA1BV,yMA4BM9N,GA5BN,IA4BhB,IAAI,EAAJ,qBAAkC,CAAC,IAA3BgO,EAA0B,QAC9B,GAAIA,EAAWtQ,WAAa4P,GAAYU,EAAWC,SAAWH,GAAUE,EAAWE,SAAWJ,GAAUE,EAAW1M,MAAQ0D,SAASK,EAAW/D,MAAM,CAEjJ6L,EAAOa,EAAWb,KAClBC,EAAkBY,EAClB,QAjCQ,+BAsCpBpR,QAAQC,IAAI,aAAeoQ,GAC3BrQ,QAAQC,IAAI,cAAgBqQ,GAC5BtQ,QAAQC,IAAI,UAAYsQ,GAExB,IAAIgB,EAAUX,WAAWhB,EAAa3R,eAAeuT,QAAQtT,OAIzDuT,EAAW,YAEf,GAAsB,MAAlBjB,GAAqC,aAAXH,EAAuB,CACjD,IAAIqB,EAAWlB,EAAgBmB,KAAKC,QAAQ,MAAO,IAGnD,OAFA5R,QAAQC,IAAI,cAAgByR,GAErBA,EAASG,eACZ,IAAK,UACDJ,EAAWhJ,EAAWqJ,QAAUzB,EAAU5H,EAAWD,WACrD,MACJ,IAAK,QACDiJ,EAAWhJ,EAAWsJ,MAAS1B,EAAU5H,EAAWD,WACpD,MACJ,IAAK,UACDiJ,EAAWhJ,EAAWuJ,QAAW3B,EAAU5H,EAAWD,WACtD,MACJ,IAAK,QACDiJ,EAAWhJ,EAAWwJ,MAAS5B,EAAU5H,EAAWD,WAI5DiJ,EAAWS,KAAKC,MAAMV,GAG1BzR,QAAQC,IAAI,cAAgBwR,GAG5B,IAAIW,EAAY,YAEhB,IAAyB,GAArBlC,GAAgC,aAANK,EAAmB,CAC7C,IAEI8B,EAAWhU,KAAKiU,IAAIpC,EAAmB,IAF5B,EACL,GACyD,GAAIK,GAAOgB,EAAS,GACnFgB,EAAW9B,EAAmB+B,UAC9BC,EAASJ,GAAY,EAAIE,GAE7BvS,QAAQC,IAAI,cAAgBoS,GAC5BrS,QAAQC,IAAI,cAAgBsS,GAC5BvS,QAAQC,IAAI,YAAcwS,GAE1B,IAGIC,EAAiB,EACuC,IAAxD9C,EAAa3R,eAAe,mBAAmBC,OAAgB6B,MAAM6P,EAAa3R,eAAe,mBAAmBC,SACpHwU,EAAiB9B,WAAWhB,EAAa3R,eAAe,mBAAmBC,QAG/E,IAAIyU,EAAc,EACuC,IAArD/C,EAAa3R,eAAe,gBAAgBC,OAAgB6B,MAAM6P,EAAa3R,eAAe,gBAAgBC,SAC9GyU,EAAc/B,WAAWhB,EAAa3R,eAAe,gBAAgBC,QAGzE,IAAI0U,EAAc,EACuC,IAArDhD,EAAa3R,eAAe,gBAAgBC,OAAgB6B,MAAM6P,EAAa3R,eAAe,gBAAgBC,SAC9G0U,EAAchC,WAAWhB,EAAa3R,eAAe,gBAAgBC,QAGzE,IAAI2U,EAAW,EACyC,IAApDjD,EAAa3R,eAAe,eAAeC,OAAgB6B,MAAM6P,EAAa3R,eAAe,eAAeC,SAC5G2U,EAAWjC,WAAWhB,EAAa3R,eAAe,eAAeC,QAGrE8B,QAAQC,IAAI,oBAAsByS,GAClC1S,QAAQC,IAAI,iBAAmB0S,GAC/B3S,QAAQC,IAAI,iBAAmB2S,GAC/B5S,QAAQC,IAAI,cAAgB4S,GAE5B,IAAIC,EAAUL,EA5BD,EACF,EA2B4BC,EAAiBC,EAAcC,EACtE5S,QAAQC,IAAI,aAAe6S,GAE3B,IAAIC,EAAe,EAE4B,IAA3CnD,EAAaxR,iBAAiB4U,IAAI9U,OAAgB6B,MAAM6P,EAAaxR,iBAAiB4U,IAAI9U,SAC1F8B,QAAQC,IAAI2P,EAAaxR,iBAAiB4U,IAAI9U,OAC9C6U,EAAenC,WAAWhB,EAAaxR,iBAAiB4U,IAAI9U,OAAS,KAGzE8B,QAAQC,IAAI,kBAAoB8S,GAEhC,IAAIE,EAAUH,GAAS,EAAEC,GAAgBF,EACzC7S,QAAQC,IAAI,aAAegT,GAGvBb,EADAa,EAAUxK,EAAWD,WAAaiJ,EACtBwB,EAAUxK,EAAWD,WAErBiJ,EAGhBW,EAAYF,KAAKC,MAAMC,GAc3B,OAXApS,QAAQC,IAAI,eAAiBmS,GAEb,aAAZX,IACAA,EAAWpT,KAAK6U,kBAAkBzB,IAGrB,aAAbW,IACAA,EAAY/T,KAAK6U,kBAAkBd,IAGvCpS,QAAQC,IAAI,iCACL,CAACkQ,EAAYC,EAAqB,IAAVC,EAAiB,IAAKC,EAAUC,EAAM,IAAMgB,EA1GhE,IA0G+EE,EAAUW,K,wCAGtFlU,GACd,OAAIA,EAAQ,EACF,KAAN,OAAYgU,KAAKiB,IAAIjV,IAEf,IAAN,OAAWA,K,4BAIhB+S,KAAMmC,QAAS7B,QAAS8B,OAAQ1B,MAE/B,IAAIA,KAAwB,qBAATA,KAAwB,EAAIA,KAO/C,OAJAV,KAAOqC,KAAKrC,MACZmC,QAAUE,KAAKF,SAGF,IAATnC,MACSM,QAAU6B,QAAUC,SAEnB,EAAInB,KAAKqB,IAAI,EAAItC,KAAMmC,UAAYnC,KAAQM,SAAW,EAAGN,KAAOU,MAAQ0B,QAAUnB,KAAKqB,IAAI,EAAItC,KAAMmC,W,kCAI3GjD,EAAY9Q,GACpB,IAAI,IAAID,EAAI,EAAGA,EAAIC,EAAQC,OAAQF,IAC/B,GAAI+Q,GAAc9Q,EAAQD,GAAGI,KACzB,OAAOH,EAAQD,GAAGqB,GAG1B,OAAO,O,0CAGSf,EAAO8T,GACvB,IAAIC,EAAc/T,EAAMG,OAAO3B,MAC3BqR,EAAYlR,KAAKP,MAAMyR,UAC3BA,EAAUiE,GAAeC,EAEzBpV,KAAKoB,SAAS,CAAC8P,UAAUA,M,yCAGVD,GAA0B,IAAD,OACxC,OACI,iDAAC,4CAAD,KACI,iDAAC,wDAAD,CAAO3N,MAAO,CAAC2D,gBAAgB,uBAC3B,iDAAC,uDAAD,KACI,iDAAC,4DAAD,KACQ,iDAAC0J,eAAD,KACC3Q,KAAKgR,gCAAgCtO,KAAI,SAAA2S,GAAM,OAC5C,iDAACnF,gBAAD,KAAkBmF,QAK1BpE,EAAyBvO,KAAI,SAAC4S,EAAcH,GAAf,OACzB,iDAACxE,eAAD,KAEQ2E,EAAa5S,KAAI,SAAC6S,EAAaxT,GAG3B,GAF0B,GAEtBA,EAA6B,CAC7B,IAAIyT,EAAoB,GAMxB,OAJAD,EAAY5D,MAAM,KAAK8D,SAAQ,SAACxD,EAAUlQ,GACtCyT,EAAkB7U,KAAK,iDAAC,2DAAD,CAAUd,MAAOoS,GAAWA,EAA5B,UAIvB,iDAAC/B,gBAAD,KACI,iDAAC,yDAAD,CAAQ9M,SAAU,SAAC/B,GAAD,OAAW,EAAK8P,oBAAoB9P,EAAO8T,IAActV,MAAO,EAAKJ,MAAMyR,UAAUiE,IAClGK,IAMjB,OACI,iDAACtF,gBAAD,KACKqF,e,iCActC1V,EAAOkC,EAAOoT,GAAa,IAAD,OAGjC,GAF0B,GAEtBpT,EAA6B,CAC7B,IAAIyT,EAAoB,GAMxB,OAJA3V,EAAM8R,MAAM,KAAK8D,SAAQ,SAACxD,EAAUlQ,GAChCyT,EAAkB7U,KAAK,iDAAC,2DAAD,CAAUd,MAAOoS,GAAWA,EAA5B,UAInB,iDAAC,yDAAD,CAAQ7O,SAAU,SAAC/B,GAAD,OAAW,EAAK8P,oBAAoB9P,EAAO8T,IAActV,MAAOG,KAAKP,MAAMyR,UAAUiE,IAClGK,GAKb,OAAO,iDAAC,4CAAD,KACF3V,K,4CAISoR,GAA0B,IAAD,SACvCyE,EAAS,GAD8B,mMAGczE,EAAyBK,WAHvC,2NAGlC6D,EAHkC,KAGrBQ,EAHqB,KAIvCD,EAAO/U,KACH,iDAAC,uDAAD,CAAMsC,MAAI,EAACC,GAAI,IACX,iDAAC,wDAAD,CAAOI,MAAO,CAAC2D,gBAAgB,uBAC3B,iDAAC,uDAAD,KACI,iDAAC,4DAAD,KACI,iDAAC0J,eAAD,KACI,iDAACT,gBAAD,aACA,iDAACA,gBAAD,gBAIJyF,EAA+BjT,KAAI,SAACiE,EAAK5E,GAAN,OAC/B,iDAAC4O,eAAD,KACI,iDAACT,gBAAD,KAAkB,EAAKc,gCAAgCjP,IACvD,iDAACmO,gBAAD,KAAkB,EAAK0F,WAAWjP,EAAK5E,EAAOoT,aAf9E,IAAI,EAAJ,qBAA6F,IAHlD,8BA4B3C,OACI,iDAAC,4CAAD,KACI,iDAAC,uDAAD,CAAMpS,WAAS,EAACC,QAAS,GACpB0S,M,+BAQb,IAAIG,OAAmDC,GAA5B9V,KAAKmC,MAAMyG,eAA8B5I,KAAKmC,MAAMyG,cAAc3H,OAAS,EAClGgQ,EAA2BjR,KAAK+V,yBAAyB/V,KAAKP,MAAMyR,UAAWlR,KAAKmC,MAAMyG,cAAe5I,KAAKmC,MAAM0G,WAAY7I,KAAKmC,MAAM2E,SAE/I,OAAI+O,EACI7V,KAAKmC,MAAMmL,YACJtN,KAAKgW,mBAAmB/E,GAExBjR,KAAKiW,sBAAsBhF,GAG/B,S,qBAjZexM,8CAsZnBkE,sC","file":"static/js/main.69bee3a5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","var domain = 'https://lender-filter-backend-test.herokuapp.com';\n\nfunction fetchCars(){\n    return fetch(`${domain}/cars/`);\n}\n\nfunction fetchLenders(){\n    return fetch(`${domain}/lenders/`);\n}\n\nfunction fetchLenderPrograms(){\n    return fetch(`${domain}/lenders/programs/`);\n}\n\nfunction fetchLenderTerms(){\n    return fetch(`${domain}/lenders/terms/`)\n}\n\n\nexport {fetchCars, fetchLenders, fetchLenderPrograms, fetchLenderTerms};","import * as React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Grid from \"@material-ui/core/Grid\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport {fetchCars, fetchLenders, fetchLenderPrograms, fetchLenderTerms} from \"./Api\";\n\nconst PLEASE_SELECT_INDEX = 0;\n\nexport default class LenderFilter extends React.Component{\n    constructor() {\n        super();\n        this.selectLenderEvent = this.selectLenderEvent.bind(this);\n        this.selectTierEvent = this.selectTierEvent.bind(this);\n        this.state = this.filterBeginningState();\n    }\n\n    textfieldsBeginningState(){\n        return {\n            selectedTierIndex:0,\n            currencyFields:{\n                \"Payment\":{\n                    value: \"\",\n                    error: false\n                },\n                \"Down Payment\":{\n                    value: \"\",\n                    error: false\n                },\n                \"Trade Allowance\":{\n                    value: \"\",\n                    error: false\n                },\n                \"Trade Payoff\":{\n                    value: \"\",\n                    error: false\n                },\n                \"Trace a.c.v\":{\n                    value: \"\",\n                    error: false\n                }\n            },\n            percentageFields:{\n                \"Tax\":{\n                    value: \"\",\n                    error: false\n                }\n            }\n        }\n    }\n\n    hasError(){\n        let currencyFields = this.state.currencyFields;\n        let percentageFields = this.state.percentageFields;\n\n        return currencyFields[\"Payment\"].error || currencyFields[\"Down Payment\"].error || currencyFields[\"Trade Allowance\"].error || currencyFields[\"Trade Payoff\"].error || currencyFields[\"Trace a.c.v\"].error || percentageFields[\"Tax\"].error;\n    }\n\n    filterBeginningState(){\n        let beginningState = {\n            selectedLenderIndex: 0,\n            selectedLenderImage: null,\n            allLenderNames:[],\n            tierMenuItems:[],\n            ...this.textfieldsBeginningState(),\n            isTierSelectEnabled:false,\n            isTextFieldsEnabled:false,\n            lenderMenuItems:[],\n            selectedTierIndex:0,\n            allTierNames:[]\n        };\n\n        beginningState.tierMenuItems.push(<MenuItem key={\"tier_please_select_item\"}value={PLEASE_SELECT_INDEX}>Please select tier</MenuItem>);\n\n        return beginningState;\n    }\n\n    componentWillReceiveProps(nextProps){\n        let lenderMenuItems = [];\n        let allLenderNames = [];\n\n        for(let i = 0; i < nextProps.lenders.length; i++){\n            let lender = nextProps.lenders[i];\n\n            lenderMenuItems.push(<MenuItem key={\"lender_name_\" + i} value={i+1}>{lender.name}</MenuItem>);\n            allLenderNames.push(lender.name);\n        }\n\n        this.setState({lenderMenuItems:lenderMenuItems, allLenderNames:allLenderNames});\n    }\n\n    textboxOnChange(event, fieldLabel){\n        let newValue = event.target.value;\n        let isError = isNaN(newValue);\n        console.log(isError);\n\n        if (fieldLabel in this.state.currencyFields){\n            let newCurrencyFields = {...this.state.currencyFields};\n            newCurrencyFields[fieldLabel] =  {\n                value:newValue,\n                error:isError\n            }\n\n            this.setState({currencyFields:newCurrencyFields});\n        }else if (fieldLabel in this.state.percentageFields){\n            let newPercentageFields = {...this.state.percentageFields};\n            newPercentageFields[fieldLabel] = {\n                value:newValue,\n                error:isError\n            }\n            this.setState({percentageFields:newPercentageFields})\n        }\n    }\n\n    selectLenderEvent(event){\n        let index = event.target.value;\n        let indexMinusOne = index - 1;\n\n        let newState = {};\n        newState.selectedLenderIndex = index;\n\n        let isPleaseSelectItemSelected = index == PLEASE_SELECT_INDEX;\n\n        // // Update lender logo\n        // if (isPleaseSelectItemSelected){\n        //     newState.selectedLenderImage = null;\n        //     newState.isTierSelectEnabled = false;\n        // }else{\n        //     newState.selectedLenderImage = this.lenders[indexMinusOne].img_url;\n        //     newState.isTierSelectEnabled = true;\n        // }\n\n        // Update tiers\n        if (!isPleaseSelectItemSelected){\n            let selectedLenderId = this.props.lenders[indexMinusOne].id;\n            let allTierOfSelectedLender = this.props.lenderPrograms.filter(lenderProgram  => lenderProgram.lender_id == selectedLenderId).map(lenderProgram => lenderProgram.name);\n            let newTierMenuItems = [];\n            newTierMenuItems.push(<MenuItem value={PLEASE_SELECT_INDEX}>Please select tier</MenuItem>);\n\n            for (let i = 0; i < allTierOfSelectedLender.length; i++) {\n                let itemValue = i + 1;\n\n                newTierMenuItems.push(<MenuItem value={itemValue}>{allTierOfSelectedLender[i]}</MenuItem>)\n            }\n\n            newState.tierMenuItems = newTierMenuItems;\n            newState.isTierSelectEnabled = true;\n            newState.allTierNames = allTierOfSelectedLender;\n        }\n\n        newState.selectedTierIndex = PLEASE_SELECT_INDEX;\n\n        this.setState(newState);\n    }\n\n    selectTierEvent(event){\n        let newState = {...this.textfieldsBeginningState()};\n\n        newState.selectedTierIndex = event.target.value;\n\n        let isPleaseSelectItemSelected = event.target.value == PLEASE_SELECT_INDEX;\n\n        if(isPleaseSelectItemSelected){\n            newState.isTextFieldsEnabled = false;\n        }else{\n            newState.isTextFieldsEnabled = true;\n        }\n\n        this.setState(newState);\n    }\n\n    reset(){\n        this.setState(this.filterBeginningState());\n    }\n\n    render(){\n        return (\n            <Grid container spacing={5}>\n                <Grid item xs={12}>\n                    <Select onChange={this.selectLenderEvent} value={this.state.selectedLenderValue} style={{width:'100%'}}>\n                        {this.state.lenderMenuItems}\n                    </Select>\n                </Grid>\n                {/*<Grid item xs={12} style={{textAlign:\"center\"}}>*/}\n                {/*    <img src={this.state.selectedLenderImage} {...this.state.selectedLenderImage == null? {style:{width:'150px', height:'150px', visibility:\"hidden\"}}:{style:{width:'150px', height:'150px'}}} />*/}\n                {/*</Grid>*/}\n                <Grid item xs={12}>\n                    <Select style={{width:'100%'}} disabled={!this.state.isTierSelectEnabled} value={this.state.selectedTierIndex} onChange={this.selectTierEvent}>\n                        {this.state.tierMenuItems}\n                    </Select>\n                </Grid>\n                {Object.keys(this.state.currencyFields).map(currencyFieldLabel => (\n                    <Grid item xs={6} sm={3} md={6}><TextField disabled={!this.state.isTextFieldsEnabled}\n                                                         label={currencyFieldLabel}\n                                                         variant=\"outlined\"\n                                                         onChange={(event) => this.textboxOnChange(event, currencyFieldLabel)}\n                                                               error = {this.state.currencyFields[currencyFieldLabel].error}\n                                                               helperText={this.state.currencyFields[currencyFieldLabel].error?\"Invalid Value\":\"\"}\n                                                               value={this.state.currencyFields[currencyFieldLabel].value}\n                                                         InputProps={{\n                                                             startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n                                                         }\n                                                         }\n                                                         size={\"small\"}\n                    /></Grid>\n                        )\n                    )\n                }\n                {Object.keys(this.state.percentageFields).map(percentageFieldLabel => (\n                        <Grid item xs={6} sm={3} md={6}><TextField disabled={!this.state.isTextFieldsEnabled}\n                                                             label={percentageFieldLabel}\n                                                             variant=\"outlined\"\n                                                             onChange={(event) => this.textboxOnChange(event, percentageFieldLabel)}\n                                                             error = {this.state.percentageFields[percentageFieldLabel].error}\n                                                                   helperText={this.state.percentageFields[percentageFieldLabel].error?\"Invalid Value\":\"\"}\n                                                             value={this.state.percentageFields[percentageFieldLabel].value}\n                                                             InputProps={{\n                                                                 startAdornment: <InputAdornment position=\"start\">%</InputAdornment>,\n                                                             }}\n                                                             size={\"small\"}\n                        /></Grid>\n                    )\n                )\n                }\n            </Grid>\n        )\n    }\n}","import LenderFilter from \"./LenderFilter\";\nimport * as React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport {fetchLenderPrograms, fetchLenders, fetchLenderTerms} from \"./Api\";\nimport TextField from \"@material-ui/core/TextField\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\n\nexport default class LendersFilter extends React.Component{\n    constructor() {\n        super();\n        this.clearFiltersOnClick = this.clearFiltersOnClick.bind(this);\n        this.lenderFilter1 = React.createRef();\n        this.lenderFilter2 = React.createRef();\n        this.lenderFilter3 = React.createRef();\n\n        this.state = {\n            lenders: [],\n            lenderPrograms: [],\n            lenderTerms: []\n        }\n\n        Promise.all([fetchLenders(), fetchLenderPrograms(), fetchLenderTerms()]).then(async([lenders, lenderPrograms, lenderTerms]) => {\n            const lendersJson = await lenders.json();\n            const lenderProgramsJson = await lenderPrograms.json();\n            const lenderTermsJson = await lenderTerms.json();\n\n            return [lendersJson, lenderProgramsJson, lenderTermsJson];\n        }).then(([lenders, lenderPrograms, lenderTerms]) => {\n            this.setState({lenders:lenders, lenderPrograms:lenderPrograms, lenderTerms:lenderTerms});\n        });\n    }\n\n    clearFiltersOnClick(event){\n        this.lenderFilter1.current.reset();\n        this.lenderFilter2.current.reset();\n        this.lenderFilter3.current.reset();\n    }\n\n    getFiltersInputs(){\n        return [this.lenderFilter1.current.state, this.lenderFilter2.current.state, this.lenderFilter3.current.state];\n    }\n\n    hasError(){\n        return this.lenderFilter1.current.hasError() || this.lenderFilter2.current.hasError() || this.lenderFilter3.current.hasError();\n    }\n\n    getLenderData(){\n        return [this.state.lenders, this.state.lenderPrograms, this.state.lenderTerms];\n    }\n\n    render(){\n        return (\n            <React.Fragment>\n                <Grid container direction={\"row\"} spacing={4}>\n                    <Grid item xs={12} style={{textAlign:\"center\"}}>\n                        <Button variant=\"contained\" color={\"secondary\"} onClick={this.clearFiltersOnClick}>Clear Filters</Button>\n                    </Grid>\n                    <Grid item xs={12}>\n                        Customer Name: <TextField variant=\"outlined\" size={\"small\"}/>\n                    </Grid>\n                    <Grid item xl={4}>\n                        <LenderFilter ref={this.lenderFilter1} lenders={this.state.lenders} lenderPrograms={this.state.lenderPrograms} lenderTerms={this.state.lenderTerms}/>\n                    </Grid>\n                    <Grid item xl={4}>\n                        <LenderFilter ref={this.lenderFilter2} lenders={this.state.lenders} lenderPrograms={this.state.lenderPrograms} lenderTerms={this.state.lenderTerms}/>\n                    </Grid>\n                    <Grid item xl={4}>\n                        <LenderFilter ref={this.lenderFilter3} lenders={this.state.lenders} lenderPrograms={this.state.lenderPrograms} lenderTerms={this.state.lenderTerms}/>\n                    </Grid>\n                    <Grid item xs={12} style={{textAlign:\"center\"}}>\n                        <Button variant=\"contained\" color=\"primary\" onClick={this.props.submitOnClick}>Submit</Button>\n                    </Grid>\n                </Grid>\n            </React.Fragment>\n        )\n    }\n}","import * as React from \"react\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\n\nexport default class CarDescription extends React.Component {\n    getCarTitle() {\n        let year = this.getRowValue('YEAR');\n        let make = this.getRowValue('MAKE');\n        let model = this.getRowValue('MODEL');\n        let trim = this.getRowValue('TRIM');\n\n        return `${year} ${make} ${model} ${trim}`;\n    }\n\n    getRowValue(rowName){\n        let row = this.getRowWithName(rowName);\n\n        if (row != null){\n            return row.value;\n        }\n\n        return '';\n    }\n\n    getRowWithName(rowName){\n        let matches = this.props.details.filter(row => (row.name == rowName));\n\n        if (matches.length > 0){\n            return matches[0];\n        }\n\n        return null;\n    }\n    render() {\n        return (\n            <Paper style={{padding: \"20px\", backgroundColor: \"rgb(247, 248, 248)\"}}>\n                <Table>\n                    <TableRow>\n                        <TableCell colSpan={2} style={{textAlign: \"center\"}}><b\n                            style={{fontSize: \"1.2rem\"}}>{this.getCarTitle()}</b></TableCell>\n                    </TableRow>\n                    {this.props.details.map(row => (\n                        <TableRow>\n                            <TableCell style={{padding: \"0px\"}}>\n                                <b>{row.name}</b>\n                            </TableCell>\n                            <TableCell style={{padding: \"0px\"}}>\n                                {row.value}\n                            </TableCell>\n                        </TableRow>\n                    ))}\n                </Table>\n            </Paper>\n        )\n    }\n}","import * as React from \"react\";\nimport ImageGallery from 'react-image-gallery';\nimport 'react-image-gallery/styles/css/image-gallery.css';\nimport './CarImagesGallery.css';\n\nexport default class CarImagesGallery extends React.Component{\n    render(){\n        return (\n            <ImageGallery items={this.props.images} showPlayButton={false} showFullscreenButton={false}/>\n        );\n    }\n}","import * as React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\n\nexport default class CarShowElementButtons extends React.Component{\n    render(){\n        return <React.Fragment>\n            <Grid container spacing={1}>\n                <Grid item xs={6} md={2} lg={2}>\n                    <Button variant=\"contained\" color={\"primary\"} style={{width:\"100%\"}}>Save</Button>\n                </Grid>\n                <Grid item xs={6} md={2} lg={2}>\n                    <Button variant=\"contained\" color={\"primary\"} style={{width:\"100%\"}}>Pictures</Button>\n                </Grid>\n                <Grid item xs={6} md={2} lg={2}>\n                    <Button variant=\"contained\" color={\"primary\"} style={{width:\"100%\"}}>Breakdown</Button>\n                </Grid>\n                <Grid item xs={6} md={2} lg={2}>\n                    <Button variant=\"contained\" color={\"primary\"} style={{width:\"100%\"}}>Send</Button>\n                </Grid>\n            </Grid>\n        </React.Fragment>\n    }\n}","import * as React from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CarDescription from \"./CarDescription\";\nimport CarCalculation from \"./CarCalculation\";\nimport CarImagesGallery from \"./CarImagesGallery\";\nimport CarShowElementButtons from \"./CarShowElementButtons\";\nimport Grid from \"@material-ui/core/Grid\";\n\nexport default class CarShowElement extends React.Component{\n    excludeCarDetailFields(fieldName){\n        let excludedFields = ['id', 'images', 'img_url', 'x_clean', 'clean', 'average', 'rough', 'series'];\n\n        return excludedFields.includes(fieldName);\n    }\n\n    convertFieldNameToLabel(fieldName){\n        let convertDict = {\n            'total_cost': 'TOTAL COST'\n        }\n\n        if (fieldName in convertDict){\n            return convertDict[fieldName];\n        }\n\n        return fieldName\n    }\n\n    convertToCarDetails(carJson){\n        let result = [];\n\n        for(let key in carJson){\n            if (!this.excludeCarDetailFields(key)){\n                result.push({\n                    name:this.convertFieldNameToLabel(key).toUpperCase(),\n                    value:carJson[key]\n                });\n            }\n        }\n\n        return result;\n    }\n\n    render() {\n        return (\n           <Card style={{width:\"100%\"}}>\n               <CardContent>\n                   <Grid container spacing={2}>\n                       <Grid item xs={12} lg={7}>\n                            <CarImagesGallery images={this.props.images}/>\n                       </Grid>\n                       <Grid item xs={12} lg={5}>\n                           <CarDescription details={this.convertToCarDetails(this.props.details)}/>\n                       </Grid>\n                       <Grid item xs={12}>\n                           <CarCalculation filtersInputs={this.props.filtersInputs} lenderData={this.props.lenderData} details={this.props.details}/>\n                       </Grid>\n                       <Grid item xs={12}>\n                           <CarShowElementButtons />\n                       </Grid>\n                   </Grid>\n               </CardContent>\n           </Card>\n        )\n    }\n}","import * as React from \"react\";\nimport CarShowElement from \"./CarShowElement\";\nimport Grid from \"@material-ui/core/Grid\";\nimport {styled, useTheme} from \"@material-ui/core/styles\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport {css} from \"@emotion/core\";\nimport {ClipLoader} from \"react-spinners\";\nimport './CarShow.css';\nimport {fetchCars} from \"./Api\";\nimport InfiniteScroll from \"react-infinite-scroller\";\n\nconst clipLoaderCss = css`\n    border-color:rgb(55,71,172);\n    position:absolute;\n    border-bottom-color:transparent;\n    top:50%;\n`;\n\nclass CarShow extends React.Component {\n    constructor() {\n        super();\n\n        this.state = {\n            carShowElements: [],\n            carDetailsList: [],\n            carImagesList: [],\n            isLoading: false,\n            hasMoreItems: false,\n            filtersInputs: null,\n            lenderData: null\n        }\n    }\n\n    componentDidMount() {\n        this.updateCars(this.props.carJson, this.props.filtersInputs, null, 0);\n    }\n\n    updateCars(carJson, filtersInputs, lenderData, sortBy) {\n        this.setState({isLoading: true, carDetailsList: [], carImagesList: [], carShowElements: [], filtersInputs: filtersInputs, lenderData: lenderData});\n\n        if(carJson != ''){\n            let json = carJson;\n            let carDetailsList = []\n            let carImagesDict = {}\n\n            for (let i = 0; i < json.length; i++) {\n                let car_details = json[i]\n                let car_images = this.getCarImages(json[i])\n\n                carDetailsList.push(car_details);\n                carImagesDict[car_details['id']] = car_images;\n            }\n\n            if (sortBy != 0){\n                console.log('sort');\n                switch(sortBy){\n                    case 1:\n                        // Year\n                        carDetailsList.sort((carDetail1, carDetail2) => parseInt(carDetail1.year) - parseInt(carDetail2.year));\n                        break;\n                    case 2:\n                        // Year\n                        carDetailsList.sort((carDetail1, carDetail2) => this.reverseNumberSign(parseInt(carDetail1.year) - parseInt(carDetail2.year)));\n                        break;\n                    case 3:\n                        // Make\n                        carDetailsList.sort((carDetail1, carDetail2) => carDetail1.make.localeCompare(carDetail2.make));\n                        break;\n                    case 4:\n                        // Model\n                        carDetailsList.sort((carDetail1, carDetail2) => this.reverseNumberSign(carDetail1.model.localeCompare(carDetail2.model)));\n                        break;\n                    case 5:\n                        // Mileage\n                        carDetailsList.sort((carDetail1, carDetail2) => parseInt(carDetail1.mileage) - parseInt(carDetail2.mileage));\n                        break;\n                    case 6:\n                        // Mileage\n                        carDetailsList.sort((carDetail1, carDetail2) => this.reverseNumberSign(parseInt(carDetail1.mileage) - parseInt(carDetail2.mileage)));\n                        break;\n                    case 7:\n                        // Cost\n                        carDetailsList.sort((carDetail1, carDetail2) => parseInt(carDetail1.total_cost) - parseInt(carDetail2.total_cost));\n                        break;\n                    case 8:\n                        // Cost\n                        carDetailsList.sort((carDetail1, carDetail2) => this.reverseNumberSign(parseInt(carDetail1.total_cost) - parseInt(carDetail2.total_cost)));\n                        break;\n                    case 6:\n                        // Profit\n                        break;\n                }\n            }\n\n            let carImagesList = [];\n\n            for (let i = 0; i < carDetailsList.length;i++){\n                carImagesList.push(carImagesDict[carDetailsList[i]['id']]);\n            }\n\n            let carShowElements = [];\n\n            for (let i = 0; i < 10 && i < carDetailsList.length; i++) {\n                let carDetails = carDetailsList[i];\n                let carImages = carImagesList[i];\n\n                carShowElements.push(\n                    <Grid item xs={12} xl={6}>\n                        <CarShowElement details={carDetails} images={carImages} filtersInputs={filtersInputs}\n                                        lenderData={lenderData}/>\n                    </Grid>\n                )\n            }\n\n            this.setState({\n                carDetailsList: carDetailsList,\n                carImagesList: carImagesList,\n                isLoading: false,\n                carShowElements: carShowElements,\n                hasMoreItems: carDetailsList.length > 10\n            });\n        }\n    }\n\n    reverseNumberSign(number){\n        return -number;\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.updateCars(nextProps.carJson, nextProps.filtersInputs, nextProps.lenderData, nextProps.sortCriteria);\n    }\n\n    getCarImages(carJson) {\n        let dict = [];\n        let imageNames = [];\n\n        for (let i = 0; i < carJson[\"images\"].length; i++) {\n            let image = carJson[\"images\"][i];\n\n            let imageSrc = image.src;\n            let imageName = image.name;\n            // console.log(imageSrc);\n\n            imageNames.push(imageName);\n            if (imageName in imageNames){\n                console.warn(imageName + ' is already in dicationary');\n            }\n\n            dict[imageName] = {\n                original: imageSrc,\n                thumbnail: imageSrc\n            };\n        }\n\n        // Sort image names\n        imageNames.sort();\n        let result = [];\n\n        for (let i = 0; i < imageNames.length;i++){\n            result.push(dict[imageNames[i]]);\n        }\n\n        return result;\n    }\n\n    loadItems(page) {\n        let numLoadItems = 10;\n        let newCarShowElements = this.state.carShowElements;\n        let originalLength = this.state.carShowElements.length;\n\n        if (this.state.carShowElements.length < this.state.carDetailsList.length){\n            while(newCarShowElements.length < originalLength + numLoadItems && newCarShowElements.length < this.state.carDetailsList.length){\n                newCarShowElements.push(\n                    <Grid item xs={12} xl={6}>\n                        <CarShowElement details={this.state.carDetailsList[newCarShowElements.length]} images={this.state.carImagesList[newCarShowElements.length]} filtersInputs={this.state.filtersInputs} lenderData={this.state.lenderData}/>\n                    </Grid>\n                )\n            }\n        }\n\n        let hasMoreItems = (newCarShowElements.length + numLoadItems) < this.state.carDetailsList.length;\n\n        this.setState({hasMoreItems:hasMoreItems, carShowElements:newCarShowElements});\n    }\n\n    render() {\n        const loader = <div className=\"loader\">Loading ...</div>;\n\n        return (\n            <InfiniteScroll\n                pageStart={0}\n                loadMore={this.loadItems.bind(this)}\n                hasMore={this.state.hasMoreItems}\n                loader={loader}>\n                <Grid container spacing={4} className={`car-show-grid ${this.state.isLoading ? \"loading\" : \"\"}`}>\n                    {this.state.isLoading ?\n                        <div className={\"spinner\"}><ClipLoader css={clipLoaderCss}/></div> : this.state.carShowElements}\n                </Grid>\n            </InfiniteScroll>\n        );\n    }\n}\n\nexport default CarShow;","import * as React from \"react\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Select from \"@material-ui/core/Select\";\n\nclass Sort extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            selectedCriteriaIndex: 0\n        }\n\n        this.sortCriteriaList = [\"Sort by (choose)\",\n                                \"Year (Latest -> Newest)\",\n                                \"Year (Newest -> Latest)\",\n                                \"Make\",\n                                \"Model\",\n                                \"Mileage (Lowest -> Highest)\",\n                                \"Mileage (Highest -> Lowest)\",\n                                \"Cost (Lowest -> Highest)\",\n                                \"Cost (Highest -> Lowest)\",\n                                \"Profit (Lowest -> Highest)\",\n                                \"Profit (Highest -> Lowest)\"]\n    }\n\n    selectCriteriaAtIndex(index){\n        this.setState(\n            {selectedCriteriaIndex:index}\n        )\n    }\n\n    getSelectedCriteriaIndex(){\n        return this.state.selectedCriteriaIndex;\n    }\n\n    getSelectedCriteriaName(){\n        return this.sortCriteriaList[this.state.selectedCriteriaIndex];\n    }\n\n    render(){\n        return (\n            <Select onChange={this.props.onSelect} value={this.state.selectedCriteriaIndex}>\n                {\n                    this.sortCriteriaList.map((sortCriteria, index) =>\n                        <MenuItem value={index}>{sortCriteria}</MenuItem>\n                    )\n                }\n            </Select>\n        );\n    }\n}\n\nexport default Sort;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport LenderFilter from \"./LenderFilter\";\nimport LendersFilter from \"./LenderFilters\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Form from \"@material-ui/core/FormControl\"\nimport CarShow from \"./CarShow\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Paper from \"@material-ui/core/Paper\";\nimport {useTheme} from \"@material-ui/core/styles\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\nimport {FaFilter} from \"react-icons/all\";\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Menu from \"@material-ui/core/Menu\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport ScrollToTop from \"react-scroll-to-top\";\nimport \"react-scroll-to-top/lib/index.css\";\nimport Sort from \"./Sort\";\nimport {fetchCars} from \"./Api\";\n\nconst App = (props) => {\n    const theme = useTheme();\n    const mdUp = useMediaQuery(theme.breakpoints.up(\"md\"));\n\n    return <AppClass isBigScreen={mdUp}/>\n}\n\nclass AppClass extends React.Component{\n    constructor() {\n        super();\n\n        this.carshowRef= React.createRef();\n        this.lendersFilter = React.createRef();\n        this.sortRef = React.createRef();\n        // this.sortRef1 = React.createRef();\n        // this.sortRef2 = React.createRef();\n        this.filterOnClick = this.filterOnClick.bind(this);\n        this.submitOnclick = this.submitOnclick.bind(this);\n        this.menuBtnOnClick = this.menuBtnOnClick.bind(this);\n        this.closeMenu = this.closeMenu.bind(this);\n        this.sortSelect = this.sortSelect.bind(this);\n        // this.sortSelect1 = this.sortSelect1.bind(this);\n        // this.sortSelect2 = this.sortSelect2.bind(this);\n\n        this.state = {\n            displayFilters: false,\n            displayCarShow: true,\n            anchorEl: null,\n            filtersInputs: [],\n            sort:0,\n            carJson:'',\n        }\n\n        fetchCars()\n            .then(res => res.json())\n            .then(json => {\n                this.setState(\n                    { carJson:json }\n                )\n            });\n    }\n\n\n    filterOnClick(event){\n        console.log('Filter')\n        this.setState({displayFilters:!this.state.displayFilters});\n    }\n\n    submitOnclick(){\n        if(!this.lendersFilter.current.hasError()) {\n            this.setState({\n                displayFilters: false,\n                displayCarShow: true,\n                filtersInputs: this.lendersFilter.current.getFiltersInputs(),\n                lenderData: this.lendersFilter.current.getLenderData()\n            })\n            window.scrollTo(0, 0);\n        }\n    }\n\n    menuBtnOnClick(event){\n        this.setState({anchorEl:event.currentTarget})    ;\n    }\n\n    closeMenu(){\n        this.setState({anchorEl:null});\n    }\n\n    sortSelect(event){\n        let criteriaIndex = event.target.value;\n        this.sortRef.current.selectCriteriaAtIndex(criteriaIndex);\n\n        this.setState({sort:criteriaIndex});\n    }\n\n    // sortSelect1(event){\n    //     let criteriaIndex = event.target.value;\n    //     this.sortRef1.current.selectCriteriaAtIndex(criteriaIndex);\n    //     let newSort = this.state.sort;\n    //     newSort[1] = criteriaIndex;\n    //\n    //     this.setState({sort:newSort});\n    // }\n    //\n    // sortSelect2(event){\n    //     let criteriaIndex = event.target.value;\n    //     this.sortRef2.current.selectCriteriaAtIndex(criteriaIndex);\n    //     let newSort = this.state.sort;\n    //     newSort[2] = criteriaIndex;\n    //\n    //     this.setState({sort:newSort});\n    // }\n\n    render() {\n        return (\n            <React.Fragment>\n            <ScrollToTop smooth />\n            <Grid container style={{backgroundColor:\"rgb(247,248,248)\"}}>\n                <Grid item xl={1} xs={0} />\n                <Grid item xl={10} xs={12}>\n                    <AppBar position=\"static\">\n                        {this.props.isBigScreen ? (\n                            <React.Fragment>\n                                <Tabs>\n                                    <Tab label=\"Home\"/>\n                                    <Tab label=\"Rate Sheet\" disabled/>\n                                    <Tab label=\"Quick Quote\" disabled/>\n                                    <Tab label=\"Lender Assist\" disabled/>\n                                </Tabs>\n                            </React.Fragment>) : (\n                                <Toolbar>\n                                    <IconButton\n                                        aria-label=\"menu\"\n                                        aria-controls=\"menu-appbar\"\n                                        aria-haspopup=\"true\"\n                                        style={{\"color\":\"white\"}}\n                                        onClick={this.menuBtnOnClick}>\n                                        <MenuIcon />\n                                    </IconButton>\n                                    <Menu\n                                        id=\"menu-appbar\"\n                                        anchorEl={this.state.anchorEl}\n                                        anchorOrigin={{\n                                            vertical: 'top',\n                                            horizontal: 'right',\n                                        }}\n                                        keepMounted\n                                        transformOrigin={{\n                                            vertical: 'top',\n                                            horizontal: 'right',\n                                        }}\n                                        open={Boolean(this.state.anchorEl)}\n                                        onClose={this.closeMenu}\n                                    >\n                                        <MenuItem>HOME</MenuItem>\n                                        <MenuItem>RATE SHEET</MenuItem>\n                                        <MenuItem>QUICK QUOTE</MenuItem>\n                                        <MenuItem>LENDER ASSIST</MenuItem>\n                                    </Menu>\n                                </Toolbar>\n                            )\n                        }\n                    </AppBar>\n                </Grid>\n                <Grid item xl={1} xs={0}/>\n                <Grid item xl={1} xs={0}/>\n                <Grid item xl={10} xs={12}>\n                    <Grid container>\n                        <Grid item lg={12} xs={12}>\n                            <Grid container spacing={2}>\n                                {this.state.displayCarShow?(\n                                    <React.Fragment>\n                                        <Grid item xs={12} sm={4} lg={2} style={{textAlign:\"center\"}}>\n                                            <Sort ref={this.sortRef} onSelect={this.sortSelect}/>\n                                        </Grid>\n                                        {/*<Grid item xs={12} sm={4} lg={2} style={{textAlign:\"center\"}}>*/}\n                                        {/*    <Sort ref={this.sortRef1} onSelect={this.sortSelect1}/>*/}\n                                        {/*</Grid>*/}\n                                        {/*<Grid item xs={12} sm={4} lg={2} style={{textAlign:\"center\"}}>*/}\n                                        {/*    <Sort ref={this.sortRef2} onSelect={this.sortSelect2}/>*/}\n                                        {/*</Grid>*/}\n                                        <Grid item xs={12} sm={4} lg={2} style={{textAlign:\"center\"}}>\n                                            <ToggleButton onClick={this.filterOnClick} selected={this.state.displayFilters}><FaFilter/>  Filter</ToggleButton>\n                                        </Grid>\n                                    </React.Fragment>\n                                ):null\n                                }\n                                <Grid item xs={12} style={{marginTop:\"16px\", marginBottom:\"16px\", display:this.state.displayFilters?\"\":\"none\"}}>\n                                      <Paper style={{padding:\"10px\"}}>\n                                            <LendersFilter ref={this.lendersFilter} submitOnClick={this.submitOnclick}/>\n                                      </Paper>\n                                </Grid>\n                                {\n                                    this.state.displayCarShow?(\n                                        <Grid item xs={12}>\n                                            <CarShow ref={this.carshowRef} carJson={this.state.carJson} filtersInputs={this.state.filtersInputs} lenderData={this.state.lenderData} sortCriteria={this.state.sort}/>\n                                        </Grid>\n                                    ):null\n                                }\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xl={1} xs={0}/>\n            </Grid>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import * as React from \"react\";\nimport Table from \"@material-ui/core/Table\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { useTheme } from '@material-ui/core/styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport Grid from \"@material-ui/core/Grid\";\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\n\nconst StyledTableCell = withStyles(theme => ({\n    head: {\n        backgroundColor: theme.palette.primary.main,\n        color: theme.palette.common.white,\n    },\n    body: {\n        fontSize: 14,\n    },\n}))(TableCell);\n\nconst StyledTableRow = withStyles(theme => ({\n    root: {\n        '&:nth-of-type(odd)': {\n            backgroundColor: theme.palette.background.default,\n        },\n    },\n}))(TableRow);\n\nconst CarCalculation = (props)=>{\n    const theme = useTheme();\n    const mdUp = useMediaQuery(theme.breakpoints.up(\"md\"));\n\n    return <CarCalculationClass isBigScreen={mdUp} {...props}/>\n}\n\nclass CarCalculationClass extends React.Component{\n    constructor() {\n        super();\n\n        this.calculationDetailsColumnHeaders =[\n            \"Lender\",\n            \"Tier\",\n            \"Advance\",\n            \"Interest\",\n            \"Term\",\n            \"Payment\",\n            \"Back\",\n            \"Front\",\n            \"Profit\"\n        ];\n\n        this.state = {\n            calculationDetailsValues:[],\n            interests:[-1,-1,-1]\n        }\n\n        this.selectInterestEvent = this.selectInterestEvent.bind(this);\n    }\n\n    createCalculationDetails(selectedInterests, filtersInputs, lenderData, details){\n        let newCalculationDetailsValues = [];\n\n        for(let [i, filterInputs] of filtersInputs.entries()){\n            if(this.isValidFilterInputs(filterInputs)) {\n                if (selectedInterests[i] == -1){\n                    let calculationDetails = this.createCalculationDetail(-1, filterInputs, lenderData, details);\n                    let interestColumnIndex = 3;\n                    let interests = calculationDetails[interestColumnIndex].split(',');\n\n                    if (interests.length > 0) {\n                        // Select first interest as default\n                        let firstInterest = interests[0];\n                        this.state.interests[i] = firstInterest;\n\n                        newCalculationDetailsValues.push(this.createCalculationDetail(firstInterest, filterInputs, lenderData, details));\n                    }else{\n                        newCalculationDetailsValues.push(calculationDetails);\n                    }\n                }\n                else{\n                    newCalculationDetailsValues.push(this.createCalculationDetail(selectedInterests[i], filterInputs, lenderData, details));\n                }\n            }\n        }\n\n        return newCalculationDetailsValues;\n    }\n\n    isValidFilterInputs(filterInputs){\n        return filterInputs.selectedLenderIndex != 0 && filterInputs.selectedTierIndex != 0;\n    }\n\n    mileageToKms(mileage){\n        return mileage * 1.60934;\n    }\n\n    createCalculationDetail(selectedInterest, filterInputs, lenderData, carDetails){\n        console.log('createCalculationDetail()');\n        console.log(selectedInterest);\n        console.log(filterInputs);\n        console.log(lenderData);\n        console.log(carDetails);\n\n        let lenders = lenderData[0];\n        let lenderPrograms = lenderData[1];\n        let lenderTerms = lenderData[2];\n\n        let lenderName = filterInputs.allLenderNames[filterInputs.selectedLenderIndex - 1];\n        let tierName = filterInputs.allTierNames[filterInputs.selectedTierIndex - 1];\n        console.log('lenderName = ' + lenderName);\n        console.log('tierName = ' + tierName);\n\n        // Advance\n        let advance = 'NOT_FOUND';\n        let interest = 'NOT_FOUND';\n        let term = 'NOT_FOUND';\n        let foundLenderTerm = null;\n        let foundLenderProgram = null;\n        let lenderId = this.getLenderId(lenderName, lenders);\n        console.log('lenderId = ' + lenderId);\n\n        if(lenderId != null){\n            for(let lenderProgram of lenderPrograms){\n                if (lenderProgram.lender_id == lenderId && lenderProgram.name == tierName){\n                    foundLenderProgram = lenderProgram;\n\n                    // Advance\n                    if(!isNaN(lenderProgram.advance)){\n                        advance = parseFloat(lenderProgram.advance);\n                    }\n\n                    // Interest\n                    let rateMin = parseFloat(lenderProgram.rate_min);\n                    let rateMax = parseFloat(lenderProgram.rate_max);\n                    interest = '';\n\n                    for(let rate = rateMin; rate < rateMax; rate+=1){\n                        interest += rate + ',';\n                    }\n\n                    interest += rateMax;\n\n                    break;\n                }\n            }\n\n            let carKms = this.mileageToKms(parseFloat(carDetails.mileage));\n            console.log('carKms = ' + carKms);\n\n            for(let lenderTerm of lenderTerms){\n                if (lenderTerm.lender_id == lenderId && lenderTerm.min_kms <= carKms && lenderTerm.max_kms >= carKms && lenderTerm.year == parseInt(carDetails.year)){\n                    // Term\n                    term = lenderTerm.term;\n                    foundLenderTerm = lenderTerm;\n                    break;\n                }\n            }\n        }\n\n        console.log('advance = ' + advance);\n        console.log('interest = ' + interest);\n        console.log('term = ' + term);\n\n        let payment = parseFloat(filterInputs.currencyFields.Payment.value);\n        let back = '0';\n\n        // Calculate max front\n        let maxFront = 'NOT_FOUND';\n\n        if (foundLenderTerm !=null && advance != \"NOT_FOUND\"){\n            let termType = foundLenderTerm.type.replace(/\\s/g, '');\n            console.log('termType = ' + termType);\n\n            switch(termType.toLowerCase()){\n                case 'x-clean':\n                    maxFront = carDetails.x_clean * advance - carDetails.total_cost;\n                    break;\n                case 'clean':\n                    maxFront = carDetails.clean  * advance - carDetails.total_cost;\n                    break;\n                case 'average':\n                    maxFront = carDetails.average  * advance - carDetails.total_cost;\n                    break;\n                case 'rough':\n                    maxFront = carDetails.rough  * advance - carDetails.total_cost;\n                    break;\n            }\n\n            maxFront = Math.round(maxFront);\n        }\n\n        console.log('maxFront = ' + maxFront);\n\n        // Calculate max profit\n        let maxProfit = 'NOT_FOUND';\n\n        if (selectedInterest != -1 && term!='NOT_FOUND') {\n            let discount = 0;\n            let tax = 0;\n            let financed = this.pv((selectedInterest / 100 + discount + tax) / 12, term, -payment, 0);\n            let holdBack = foundLenderProgram.hold_back;\n            let funded = financed * (1 - holdBack);\n\n            console.log('financed = ' + financed);\n            console.log('holdBack = ' + holdBack);\n            console.log('funded = ' + funded);\n\n            let lender = 0;\n            let ppsa = 0;\n\n            let tradeAllowance = 0;\n            if (filterInputs.currencyFields[\"Trade Allowance\"].value != '' && !isNaN(filterInputs.currencyFields[\"Trade Allowance\"].value)) {\n                tradeAllowance = parseFloat(filterInputs.currencyFields[\"Trade Allowance\"].value);\n            }\n\n            let tradePayOff = 0;\n            if (filterInputs.currencyFields[\"Trade Payoff\"].value != '' && !isNaN(filterInputs.currencyFields[\"Trade Payoff\"].value)) {\n                tradePayOff = parseFloat(filterInputs.currencyFields[\"Trade Payoff\"].value)\n            }\n\n            let downPayment = 0;\n            if (filterInputs.currencyFields[\"Down Payment\"].value != '' && !isNaN(filterInputs.currencyFields[\"Down Payment\"].value)) {\n                downPayment = parseFloat(filterInputs.currencyFields[\"Down Payment\"].value);\n            }\n\n            let tradeAcv = 0;\n            if (filterInputs.currencyFields[\"Trace a.c.v\"].value != '' && !isNaN(filterInputs.currencyFields[\"Trace a.c.v\"].value)) {\n                tradeAcv = parseFloat(filterInputs.currencyFields[\"Trace a.c.v\"].value)\n            }\n\n            console.log('tradeAllowance = ' + tradeAllowance);\n            console.log('tradePayOff = ' + tradePayOff);\n            console.log('downPayment = ' + downPayment);\n            console.log('tradeAcv = ' + tradeAcv);\n\n            let paidOut = funded - lender - ppsa + tradeAllowance - tradePayOff + downPayment;\n            console.log('paidOut = ' + paidOut);\n\n            let userInputTax = 0;\n\n            if (filterInputs.percentageFields.Tax.value != '' && !isNaN(filterInputs.percentageFields.Tax.value)) {\n                console.log(filterInputs.percentageFields.Tax.value);\n                userInputTax = parseFloat(filterInputs.percentageFields.Tax.value) / 100;\n            }\n\n            console.log('userInputTax = ' + userInputTax);\n\n            let netPaid = paidOut*(1-userInputTax) + tradeAcv;\n            console.log('netPaid = ' + netPaid);\n\n            if (netPaid - carDetails.total_cost < maxFront){\n                maxProfit = netPaid - carDetails.total_cost;\n            }else {\n                maxProfit = maxFront;\n            }\n\n            maxProfit = Math.round(maxProfit);\n        }\n\n        console.log('maxProfit = ' + maxProfit);\n\n        if (maxFront != 'NOT_FOUND'){\n            maxFront = this.addCurrencySymbol(maxFront);\n        }\n\n        if (maxProfit != 'NOT_FOUND'){\n            maxProfit = this.addCurrencySymbol(maxProfit);\n        }\n\n        console.log('End createCalculationDetail()');\n        return [lenderName, tierName, (advance * 100) + '%', interest, term, '$' + payment, back, maxFront, maxProfit];\n    }\n\n    addCurrencySymbol(value){\n        if (value < 0){\n            return `-$${Math.abs(value)}`\n        }else{\n            return `$${value}`\n        }\n    }\n\n    pv(rate, periods, payment, future, type) {\n        // Initialize type\n        var type = (typeof type === 'undefined') ? 0 : type;\n\n        // Evaluate rate and periods (TODO: replace with secure expression evaluator)\n        rate = eval(rate);\n        periods = eval(periods);\n\n        // Return present value\n        if (rate === 0) {\n            return - payment * periods - future;\n        } else {\n            return (((1 - Math.pow(1 + rate, periods)) / rate) * payment * (1 +rate * type) - future) / Math.pow(1 + rate, periods);\n        }\n    }\n\n    getLenderId(lenderName, lenders){\n        for(let i = 0; i < lenders.length; i++){\n            if (lenderName == lenders[i].name)\n                return lenders[i].id;\n        }\n\n        return null;\n    }\n\n    selectInterestEvent(event, lenderIndex){\n        let newInterest = event.target.value;\n        let interests = this.state.interests;\n        interests[lenderIndex] = newInterest;\n\n        this.setState({interests:interests});\n    }\n\n    renderWithOneTable(calculationDetailsValues){\n        return (\n            <React.Fragment>\n                <Paper style={{backgroundColor:\"rgb(247, 248, 248)\"}}>\n                    <Table>\n                        <TableHead>\n                                <StyledTableRow>\n                                {this.calculationDetailsColumnHeaders.map(header => (\n                                    <StyledTableCell>{header}</StyledTableCell>\n                                ))}\n                                </StyledTableRow>\n                        </TableHead>\n                        {\n                            calculationDetailsValues.map((columnValues, lenderIndex) =>(\n                                <StyledTableRow>\n                                    {\n                                        columnValues.map((columnValue, index) => {\n                                            let interestColumnIndex = 3;\n\n                                            if (index == interestColumnIndex){\n                                                let interestMenuItems = [];\n\n                                                columnValue.split(',').forEach((interest, index) => {\n                                                    interestMenuItems.push(<MenuItem value={interest}>{interest} %</MenuItem>);\n                                                });\n\n                                                return (\n                                                    <StyledTableCell>\n                                                        <Select onChange={(event) => this.selectInterestEvent(event, lenderIndex)} value={this.state.interests[lenderIndex]}>\n                                                            {interestMenuItems}\n                                                        </Select>\n                                                    </StyledTableCell>\n                                                )\n                                            }\n                                            else\n                                            return (\n                                                <StyledTableCell>\n                                                    {columnValue}\n                                                </StyledTableCell>\n                                            )\n                                        })\n                                    }\n                                </StyledTableRow>\n                            ))\n                        }\n                    </Table>\n                </Paper>\n            </React.Fragment>\n        )\n    }\n\n    createCell(value, index, lenderIndex){\n        let interestColumnIndex = 3;\n\n        if (index == interestColumnIndex){\n            let interestMenuItems = [];\n\n            value.split(',').forEach((interest, index) => {\n                interestMenuItems.push(<MenuItem value={interest}>{interest} %</MenuItem>);\n            });\n\n            return (\n                    <Select onChange={(event) => this.selectInterestEvent(event, lenderIndex)} value={this.state.interests[lenderIndex]}>\n                        {interestMenuItems}\n                    </Select>\n            )\n        }\n        else\n            return <React.Fragment>\n                {value}\n            </React.Fragment>\n    }\n\n    renderWithThreeTables(calculationDetailsValues){\n        let tables = [];\n\n        for(let [lenderIndex, lenderCalculationDetailsValues] of calculationDetailsValues.entries()){\n            tables.push(\n                <Grid item xs={12}>\n                    <Paper style={{backgroundColor:\"rgb(247, 248, 248)\"}}>\n                        <Table>\n                            <TableHead>\n                                <StyledTableRow>\n                                    <StyledTableCell>Name</StyledTableCell>\n                                    <StyledTableCell>Value</StyledTableCell>\n                                </StyledTableRow>\n                            </TableHead>\n                            {\n                                lenderCalculationDetailsValues.map((row, index) => (\n                                    <StyledTableRow>\n                                        <StyledTableCell>{this.calculationDetailsColumnHeaders[index]}</StyledTableCell>\n                                        <StyledTableCell>{this.createCell(row, index, lenderIndex)}</StyledTableCell>\n                                    </StyledTableRow>\n                                ))\n                            }\n                        </Table>\n                    </Paper>\n                </Grid>\n            )\n        }\n\n        return (\n            <React.Fragment>\n                <Grid container spacing={4}>\n                    {tables}\n                </Grid>\n            </React.Fragment>\n        )\n    }\n\n\n    render(){\n        let userInputsFilterData = this.props.filtersInputs != undefined && this.props.filtersInputs.length > 0;\n        let calculationDetailsValues = this.createCalculationDetails(this.state.interests, this.props.filtersInputs, this.props.lenderData, this.props.details);\n\n        if (userInputsFilterData){\n            if (this.props.isBigScreen){\n                return this.renderWithOneTable(calculationDetailsValues);\n            }else{\n                return this.renderWithThreeTables(calculationDetailsValues);\n            }\n        }else{\n            return null;\n        }\n    }\n}\n\nexport default CarCalculation;"],"sourceRoot":""}